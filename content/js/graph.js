/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 129.0, "minX": 0.0, "maxY": 3371.0, "series": [{"data": [[0.0, 154.0], [0.1, 154.0], [0.2, 154.0], [0.3, 154.0], [0.4, 154.0], [0.5, 154.0], [0.6, 154.0], [0.7, 154.0], [0.8, 155.0], [0.9, 155.0], [1.0, 155.0], [1.1, 155.0], [1.2, 155.0], [1.3, 156.0], [1.4, 156.0], [1.5, 156.0], [1.6, 158.0], [1.7, 158.0], [1.8, 158.0], [1.9, 158.0], [2.0, 160.0], [2.1, 160.0], [2.2, 160.0], [2.3, 160.0], [2.4, 161.0], [2.5, 161.0], [2.6, 161.0], [2.7, 161.0], [2.8, 162.0], [2.9, 162.0], [3.0, 162.0], [3.1, 162.0], [3.2, 162.0], [3.3, 162.0], [3.4, 162.0], [3.5, 162.0], [3.6, 163.0], [3.7, 163.0], [3.8, 163.0], [3.9, 163.0], [4.0, 164.0], [4.1, 164.0], [4.2, 164.0], [4.3, 164.0], [4.4, 165.0], [4.5, 165.0], [4.6, 165.0], [4.7, 165.0], [4.8, 166.0], [4.9, 166.0], [5.0, 166.0], [5.1, 166.0], [5.2, 166.0], [5.3, 166.0], [5.4, 166.0], [5.5, 166.0], [5.6, 166.0], [5.7, 166.0], [5.8, 166.0], [5.9, 166.0], [6.0, 166.0], [6.1, 166.0], [6.2, 166.0], [6.3, 166.0], [6.4, 167.0], [6.5, 167.0], [6.6, 167.0], [6.7, 167.0], [6.8, 167.0], [6.9, 167.0], [7.0, 167.0], [7.1, 167.0], [7.2, 169.0], [7.3, 169.0], [7.4, 169.0], [7.5, 169.0], [7.6, 169.0], [7.7, 171.0], [7.8, 171.0], [7.9, 171.0], [8.0, 171.0], [8.1, 171.0], [8.2, 171.0], [8.3, 171.0], [8.4, 173.0], [8.5, 173.0], [8.6, 173.0], [8.7, 173.0], [8.8, 174.0], [8.9, 174.0], [9.0, 174.0], [9.1, 174.0], [9.2, 174.0], [9.3, 174.0], [9.4, 174.0], [9.5, 174.0], [9.6, 174.0], [9.7, 176.0], [9.8, 176.0], [9.9, 176.0], [10.0, 176.0], [10.1, 177.0], [10.2, 177.0], [10.3, 177.0], [10.4, 177.0], [10.5, 177.0], [10.6, 177.0], [10.7, 177.0], [10.8, 177.0], [10.9, 178.0], [11.0, 178.0], [11.1, 178.0], [11.2, 178.0], [11.3, 178.0], [11.4, 178.0], [11.5, 178.0], [11.6, 178.0], [11.7, 178.0], [11.8, 178.0], [11.9, 178.0], [12.0, 178.0], [12.1, 179.0], [12.2, 179.0], [12.3, 179.0], [12.4, 179.0], [12.5, 179.0], [12.6, 179.0], [12.7, 179.0], [12.8, 179.0], [12.9, 179.0], [13.0, 179.0], [13.1, 179.0], [13.2, 179.0], [13.3, 180.0], [13.4, 180.0], [13.5, 180.0], [13.6, 180.0], [13.7, 181.0], [13.8, 181.0], [13.9, 181.0], [14.0, 181.0], [14.1, 183.0], [14.2, 183.0], [14.3, 183.0], [14.4, 183.0], [14.5, 185.0], [14.6, 185.0], [14.7, 185.0], [14.8, 185.0], [14.9, 185.0], [15.0, 185.0], [15.1, 185.0], [15.2, 185.0], [15.3, 186.0], [15.4, 186.0], [15.5, 186.0], [15.6, 186.0], [15.7, 186.0], [15.8, 186.0], [15.9, 186.0], [16.0, 186.0], [16.1, 187.0], [16.2, 187.0], [16.3, 187.0], [16.4, 187.0], [16.5, 190.0], [16.6, 190.0], [16.7, 190.0], [16.8, 191.0], [16.9, 191.0], [17.0, 191.0], [17.1, 191.0], [17.2, 191.0], [17.3, 191.0], [17.4, 191.0], [17.5, 191.0], [17.6, 194.0], [17.7, 194.0], [17.8, 194.0], [17.9, 194.0], [18.0, 198.0], [18.1, 198.0], [18.2, 198.0], [18.3, 198.0], [18.4, 198.0], [18.5, 198.0], [18.6, 198.0], [18.7, 198.0], [18.8, 200.0], [18.9, 200.0], [19.0, 200.0], [19.1, 200.0], [19.2, 206.0], [19.3, 206.0], [19.4, 206.0], [19.5, 206.0], [19.6, 207.0], [19.7, 207.0], [19.8, 207.0], [19.9, 207.0], [20.0, 209.0], [20.1, 209.0], [20.2, 209.0], [20.3, 209.0], [20.4, 211.0], [20.5, 211.0], [20.6, 211.0], [20.7, 211.0], [20.8, 212.0], [20.9, 212.0], [21.0, 212.0], [21.1, 212.0], [21.2, 212.0], [21.3, 212.0], [21.4, 212.0], [21.5, 212.0], [21.6, 213.0], [21.7, 213.0], [21.8, 213.0], [21.9, 213.0], [22.0, 214.0], [22.1, 214.0], [22.2, 214.0], [22.3, 214.0], [22.4, 216.0], [22.5, 216.0], [22.6, 216.0], [22.7, 216.0], [22.8, 224.0], [22.9, 224.0], [23.0, 224.0], [23.1, 224.0], [23.2, 225.0], [23.3, 225.0], [23.4, 225.0], [23.5, 225.0], [23.6, 225.0], [23.7, 225.0], [23.8, 225.0], [23.9, 225.0], [24.0, 229.0], [24.1, 229.0], [24.2, 229.0], [24.3, 229.0], [24.4, 230.0], [24.5, 230.0], [24.6, 230.0], [24.7, 230.0], [24.8, 232.0], [24.9, 232.0], [25.0, 232.0], [25.1, 232.0], [25.2, 233.0], [25.3, 233.0], [25.4, 233.0], [25.5, 233.0], [25.6, 236.0], [25.7, 236.0], [25.8, 236.0], [25.9, 236.0], [26.0, 236.0], [26.1, 236.0], [26.2, 236.0], [26.3, 236.0], [26.4, 237.0], [26.5, 237.0], [26.6, 237.0], [26.7, 237.0], [26.8, 237.0], [26.9, 237.0], [27.0, 237.0], [27.1, 237.0], [27.2, 240.0], [27.3, 240.0], [27.4, 240.0], [27.5, 240.0], [27.6, 241.0], [27.7, 241.0], [27.8, 241.0], [27.9, 241.0], [28.0, 250.0], [28.1, 250.0], [28.2, 250.0], [28.3, 250.0], [28.4, 252.0], [28.5, 252.0], [28.6, 252.0], [28.7, 252.0], [28.8, 252.0], [28.9, 252.0], [29.0, 252.0], [29.1, 252.0], [29.2, 254.0], [29.3, 254.0], [29.4, 254.0], [29.5, 254.0], [29.6, 263.0], [29.7, 263.0], [29.8, 263.0], [29.9, 263.0], [30.0, 266.0], [30.1, 266.0], [30.2, 266.0], [30.3, 266.0], [30.4, 268.0], [30.5, 268.0], [30.6, 268.0], [30.7, 268.0], [30.8, 273.0], [30.9, 273.0], [31.0, 273.0], [31.1, 273.0], [31.2, 274.0], [31.3, 274.0], [31.4, 274.0], [31.5, 274.0], [31.6, 275.0], [31.7, 275.0], [31.8, 275.0], [31.9, 275.0], [32.0, 284.0], [32.1, 284.0], [32.2, 284.0], [32.3, 284.0], [32.4, 285.0], [32.5, 285.0], [32.6, 285.0], [32.7, 285.0], [32.8, 288.0], [32.9, 288.0], [33.0, 288.0], [33.1, 288.0], [33.2, 290.0], [33.3, 290.0], [33.4, 290.0], [33.5, 290.0], [33.6, 290.0], [33.7, 290.0], [33.8, 290.0], [33.9, 290.0], [34.0, 291.0], [34.1, 291.0], [34.2, 291.0], [34.3, 291.0], [34.4, 296.0], [34.5, 296.0], [34.6, 296.0], [34.7, 296.0], [34.8, 299.0], [34.9, 299.0], [35.0, 299.0], [35.1, 299.0], [35.2, 302.0], [35.3, 302.0], [35.4, 302.0], [35.5, 302.0], [35.6, 322.0], [35.7, 322.0], [35.8, 322.0], [35.9, 322.0], [36.0, 332.0], [36.1, 332.0], [36.2, 332.0], [36.3, 332.0], [36.4, 334.0], [36.5, 334.0], [36.6, 334.0], [36.7, 334.0], [36.8, 335.0], [36.9, 335.0], [37.0, 335.0], [37.1, 335.0], [37.2, 339.0], [37.3, 339.0], [37.4, 339.0], [37.5, 339.0], [37.6, 345.0], [37.7, 345.0], [37.8, 345.0], [37.9, 345.0], [38.0, 352.0], [38.1, 352.0], [38.2, 352.0], [38.3, 352.0], [38.4, 357.0], [38.5, 357.0], [38.6, 357.0], [38.7, 357.0], [38.8, 358.0], [38.9, 358.0], [39.0, 358.0], [39.1, 358.0], [39.2, 358.0], [39.3, 358.0], [39.4, 358.0], [39.5, 358.0], [39.6, 359.0], [39.7, 359.0], [39.8, 359.0], [39.9, 359.0], [40.0, 360.0], [40.1, 360.0], [40.2, 360.0], [40.3, 360.0], [40.4, 361.0], [40.5, 361.0], [40.6, 361.0], [40.7, 361.0], [40.8, 365.0], [40.9, 365.0], [41.0, 365.0], [41.1, 365.0], [41.2, 371.0], [41.3, 371.0], [41.4, 371.0], [41.5, 371.0], [41.6, 377.0], [41.7, 377.0], [41.8, 377.0], [41.9, 377.0], [42.0, 381.0], [42.1, 381.0], [42.2, 381.0], [42.3, 381.0], [42.4, 383.0], [42.5, 383.0], [42.6, 383.0], [42.7, 383.0], [42.8, 390.0], [42.9, 390.0], [43.0, 390.0], [43.1, 390.0], [43.2, 395.0], [43.3, 395.0], [43.4, 395.0], [43.5, 395.0], [43.6, 398.0], [43.7, 398.0], [43.8, 398.0], [43.9, 398.0], [44.0, 407.0], [44.1, 407.0], [44.2, 407.0], [44.3, 407.0], [44.4, 427.0], [44.5, 427.0], [44.6, 427.0], [44.7, 427.0], [44.8, 436.0], [44.9, 436.0], [45.0, 436.0], [45.1, 436.0], [45.2, 437.0], [45.3, 437.0], [45.4, 437.0], [45.5, 437.0], [45.6, 446.0], [45.7, 446.0], [45.8, 446.0], [45.9, 446.0], [46.0, 448.0], [46.1, 448.0], [46.2, 448.0], [46.3, 448.0], [46.4, 451.0], [46.5, 451.0], [46.6, 451.0], [46.7, 451.0], [46.8, 453.0], [46.9, 453.0], [47.0, 453.0], [47.1, 453.0], [47.2, 457.0], [47.3, 457.0], [47.4, 457.0], [47.5, 457.0], [47.6, 460.0], [47.7, 460.0], [47.8, 460.0], [47.9, 460.0], [48.0, 469.0], [48.1, 469.0], [48.2, 469.0], [48.3, 469.0], [48.4, 474.0], [48.5, 474.0], [48.6, 474.0], [48.7, 474.0], [48.8, 476.0], [48.9, 476.0], [49.0, 476.0], [49.1, 476.0], [49.2, 484.0], [49.3, 484.0], [49.4, 484.0], [49.5, 484.0], [49.6, 490.0], [49.7, 490.0], [49.8, 490.0], [49.9, 490.0], [50.0, 491.0], [50.1, 491.0], [50.2, 491.0], [50.3, 491.0], [50.4, 496.0], [50.5, 496.0], [50.6, 496.0], [50.7, 496.0], [50.8, 499.0], [50.9, 499.0], [51.0, 499.0], [51.1, 499.0], [51.2, 511.0], [51.3, 511.0], [51.4, 511.0], [51.5, 511.0], [51.6, 517.0], [51.7, 517.0], [51.8, 517.0], [51.9, 517.0], [52.0, 521.0], [52.1, 521.0], [52.2, 521.0], [52.3, 521.0], [52.4, 544.0], [52.5, 544.0], [52.6, 544.0], [52.7, 544.0], [52.8, 547.0], [52.9, 547.0], [53.0, 547.0], [53.1, 547.0], [53.2, 559.0], [53.3, 559.0], [53.4, 559.0], [53.5, 559.0], [53.6, 566.0], [53.7, 566.0], [53.8, 566.0], [53.9, 566.0], [54.0, 566.0], [54.1, 566.0], [54.2, 566.0], [54.3, 566.0], [54.4, 574.0], [54.5, 574.0], [54.6, 574.0], [54.7, 574.0], [54.8, 579.0], [54.9, 579.0], [55.0, 579.0], [55.1, 579.0], [55.2, 583.0], [55.3, 583.0], [55.4, 583.0], [55.5, 583.0], [55.6, 587.0], [55.7, 587.0], [55.8, 587.0], [55.9, 587.0], [56.0, 589.0], [56.1, 589.0], [56.2, 589.0], [56.3, 589.0], [56.4, 595.0], [56.5, 595.0], [56.6, 595.0], [56.7, 595.0], [56.8, 602.0], [56.9, 602.0], [57.0, 602.0], [57.1, 602.0], [57.2, 610.0], [57.3, 610.0], [57.4, 610.0], [57.5, 610.0], [57.6, 623.0], [57.7, 623.0], [57.8, 623.0], [57.9, 623.0], [58.0, 624.0], [58.1, 624.0], [58.2, 624.0], [58.3, 624.0], [58.4, 633.0], [58.5, 633.0], [58.6, 633.0], [58.7, 633.0], [58.8, 641.0], [58.9, 641.0], [59.0, 641.0], [59.1, 641.0], [59.2, 645.0], [59.3, 645.0], [59.4, 645.0], [59.5, 645.0], [59.6, 651.0], [59.7, 651.0], [59.8, 651.0], [59.9, 651.0], [60.0, 669.0], [60.1, 669.0], [60.2, 669.0], [60.3, 669.0], [60.4, 669.0], [60.5, 669.0], [60.6, 669.0], [60.7, 669.0], [60.8, 672.0], [60.9, 672.0], [61.0, 672.0], [61.1, 672.0], [61.2, 675.0], [61.3, 675.0], [61.4, 675.0], [61.5, 675.0], [61.6, 678.0], [61.7, 678.0], [61.8, 678.0], [61.9, 678.0], [62.0, 697.0], [62.1, 697.0], [62.2, 697.0], [62.3, 697.0], [62.4, 705.0], [62.5, 705.0], [62.6, 705.0], [62.7, 705.0], [62.8, 708.0], [62.9, 708.0], [63.0, 708.0], [63.1, 708.0], [63.2, 717.0], [63.3, 717.0], [63.4, 717.0], [63.5, 717.0], [63.6, 721.0], [63.7, 721.0], [63.8, 721.0], [63.9, 721.0], [64.0, 721.0], [64.1, 721.0], [64.2, 721.0], [64.3, 721.0], [64.4, 748.0], [64.5, 748.0], [64.6, 748.0], [64.7, 748.0], [64.8, 749.0], [64.9, 749.0], [65.0, 749.0], [65.1, 749.0], [65.2, 751.0], [65.3, 751.0], [65.4, 751.0], [65.5, 751.0], [65.6, 753.0], [65.7, 753.0], [65.8, 753.0], [65.9, 753.0], [66.0, 755.0], [66.1, 755.0], [66.2, 755.0], [66.3, 755.0], [66.4, 757.0], [66.5, 757.0], [66.6, 757.0], [66.7, 757.0], [66.8, 769.0], [66.9, 769.0], [67.0, 769.0], [67.1, 769.0], [67.2, 773.0], [67.3, 773.0], [67.4, 773.0], [67.5, 773.0], [67.6, 779.0], [67.7, 779.0], [67.8, 779.0], [67.9, 779.0], [68.0, 786.0], [68.1, 786.0], [68.2, 786.0], [68.3, 786.0], [68.4, 789.0], [68.5, 789.0], [68.6, 789.0], [68.7, 789.0], [68.8, 806.0], [68.9, 806.0], [69.0, 806.0], [69.1, 806.0], [69.2, 816.0], [69.3, 816.0], [69.4, 816.0], [69.5, 816.0], [69.6, 817.0], [69.7, 817.0], [69.8, 817.0], [69.9, 817.0], [70.0, 817.0], [70.1, 817.0], [70.2, 817.0], [70.3, 817.0], [70.4, 824.0], [70.5, 824.0], [70.6, 824.0], [70.7, 824.0], [70.8, 833.0], [70.9, 833.0], [71.0, 833.0], [71.1, 833.0], [71.2, 836.0], [71.3, 836.0], [71.4, 836.0], [71.5, 836.0], [71.6, 853.0], [71.7, 853.0], [71.8, 853.0], [71.9, 853.0], [72.0, 889.0], [72.1, 889.0], [72.2, 889.0], [72.3, 889.0], [72.4, 895.0], [72.5, 895.0], [72.6, 895.0], [72.7, 895.0], [72.8, 896.0], [72.9, 896.0], [73.0, 896.0], [73.1, 896.0], [73.2, 906.0], [73.3, 906.0], [73.4, 906.0], [73.5, 906.0], [73.6, 916.0], [73.7, 916.0], [73.8, 916.0], [73.9, 916.0], [74.0, 937.0], [74.1, 937.0], [74.2, 937.0], [74.3, 937.0], [74.4, 943.0], [74.5, 943.0], [74.6, 943.0], [74.7, 943.0], [74.8, 963.0], [74.9, 963.0], [75.0, 963.0], [75.1, 963.0], [75.2, 967.0], [75.3, 967.0], [75.4, 967.0], [75.5, 967.0], [75.6, 967.0], [75.7, 997.0], [75.8, 997.0], [75.9, 997.0], [76.0, 997.0], [76.1, 998.0], [76.2, 998.0], [76.3, 998.0], [76.4, 998.0], [76.5, 1009.0], [76.6, 1009.0], [76.7, 1009.0], [76.8, 1009.0], [76.9, 1012.0], [77.0, 1012.0], [77.1, 1012.0], [77.2, 1012.0], [77.3, 1016.0], [77.4, 1016.0], [77.5, 1016.0], [77.6, 1016.0], [77.7, 1043.0], [77.8, 1043.0], [77.9, 1043.0], [78.0, 1043.0], [78.1, 1049.0], [78.2, 1049.0], [78.3, 1049.0], [78.4, 1049.0], [78.5, 1073.0], [78.6, 1073.0], [78.7, 1073.0], [78.8, 1073.0], [78.9, 1109.0], [79.0, 1109.0], [79.1, 1109.0], [79.2, 1109.0], [79.3, 1133.0], [79.4, 1133.0], [79.5, 1133.0], [79.6, 1133.0], [79.7, 1133.0], [79.8, 1133.0], [79.9, 1133.0], [80.0, 1133.0], [80.1, 1136.0], [80.2, 1136.0], [80.3, 1136.0], [80.4, 1136.0], [80.5, 1138.0], [80.6, 1138.0], [80.7, 1138.0], [80.8, 1138.0], [80.9, 1170.0], [81.0, 1170.0], [81.1, 1170.0], [81.2, 1170.0], [81.3, 1184.0], [81.4, 1184.0], [81.5, 1184.0], [81.6, 1184.0], [81.7, 1200.0], [81.8, 1200.0], [81.9, 1200.0], [82.0, 1200.0], [82.1, 1228.0], [82.2, 1228.0], [82.3, 1228.0], [82.4, 1228.0], [82.5, 1241.0], [82.6, 1241.0], [82.7, 1241.0], [82.8, 1241.0], [82.9, 1249.0], [83.0, 1249.0], [83.1, 1249.0], [83.2, 1249.0], [83.3, 1256.0], [83.4, 1256.0], [83.5, 1256.0], [83.6, 1256.0], [83.7, 1263.0], [83.8, 1263.0], [83.9, 1263.0], [84.0, 1263.0], [84.1, 1282.0], [84.2, 1282.0], [84.3, 1282.0], [84.4, 1282.0], [84.5, 1307.0], [84.6, 1307.0], [84.7, 1307.0], [84.8, 1307.0], [84.9, 1307.0], [85.0, 1307.0], [85.1, 1307.0], [85.2, 1307.0], [85.3, 1316.0], [85.4, 1316.0], [85.5, 1316.0], [85.6, 1316.0], [85.7, 1345.0], [85.8, 1345.0], [85.9, 1345.0], [86.0, 1345.0], [86.1, 1355.0], [86.2, 1355.0], [86.3, 1355.0], [86.4, 1355.0], [86.5, 1375.0], [86.6, 1375.0], [86.7, 1375.0], [86.8, 1375.0], [86.9, 1376.0], [87.0, 1376.0], [87.1, 1376.0], [87.2, 1376.0], [87.3, 1378.0], [87.4, 1378.0], [87.5, 1378.0], [87.6, 1378.0], [87.7, 1395.0], [87.8, 1395.0], [87.9, 1395.0], [88.0, 1395.0], [88.1, 1395.0], [88.2, 1395.0], [88.3, 1395.0], [88.4, 1395.0], [88.5, 1409.0], [88.6, 1409.0], [88.7, 1409.0], [88.8, 1409.0], [88.9, 1410.0], [89.0, 1410.0], [89.1, 1410.0], [89.2, 1410.0], [89.3, 1441.0], [89.4, 1441.0], [89.5, 1441.0], [89.6, 1441.0], [89.7, 1485.0], [89.8, 1485.0], [89.9, 1485.0], [90.0, 1485.0], [90.1, 1492.0], [90.2, 1492.0], [90.3, 1492.0], [90.4, 1492.0], [90.5, 1502.0], [90.6, 1502.0], [90.7, 1502.0], [90.8, 1502.0], [90.9, 1534.0], [91.0, 1534.0], [91.1, 1534.0], [91.2, 1534.0], [91.3, 1566.0], [91.4, 1566.0], [91.5, 1566.0], [91.6, 1566.0], [91.7, 1610.0], [91.8, 1610.0], [91.9, 1610.0], [92.0, 1610.0], [92.1, 1625.0], [92.2, 1625.0], [92.3, 1625.0], [92.4, 1625.0], [92.5, 1651.0], [92.6, 1651.0], [92.7, 1651.0], [92.8, 1651.0], [92.9, 1790.0], [93.0, 1790.0], [93.1, 1790.0], [93.2, 1790.0], [93.3, 1790.0], [93.4, 1790.0], [93.5, 1790.0], [93.6, 1790.0], [93.7, 1820.0], [93.8, 1820.0], [93.9, 1820.0], [94.0, 1820.0], [94.1, 1905.0], [94.2, 1905.0], [94.3, 1905.0], [94.4, 1905.0], [94.5, 1959.0], [94.6, 1959.0], [94.7, 1959.0], [94.8, 1959.0], [94.9, 1999.0], [95.0, 1999.0], [95.1, 1999.0], [95.2, 1999.0], [95.3, 2012.0], [95.4, 2012.0], [95.5, 2012.0], [95.6, 2012.0], [95.7, 2066.0], [95.8, 2066.0], [95.9, 2066.0], [96.0, 2066.0], [96.1, 2131.0], [96.2, 2131.0], [96.3, 2131.0], [96.4, 2131.0], [96.5, 2193.0], [96.6, 2193.0], [96.7, 2193.0], [96.8, 2193.0], [96.9, 2212.0], [97.0, 2212.0], [97.1, 2212.0], [97.2, 2212.0], [97.3, 2253.0], [97.4, 2253.0], [97.5, 2253.0], [97.6, 2253.0], [97.7, 2523.0], [97.8, 2523.0], [97.9, 2523.0], [98.0, 2523.0], [98.1, 2730.0], [98.2, 2730.0], [98.3, 2730.0], [98.4, 2730.0], [98.5, 2769.0], [98.6, 2769.0], [98.7, 2769.0], [98.8, 2769.0], [98.9, 3142.0], [99.0, 3142.0], [99.1, 3142.0], [99.2, 3142.0], [99.3, 3278.0], [99.4, 3278.0], [99.5, 3278.0], [99.6, 3278.0], [99.7, 3344.0], [99.8, 3344.0], [99.9, 3344.0], [100.0, 3344.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 129.0], [0.1, 129.0], [0.2, 129.0], [0.3, 129.0], [0.4, 139.0], [0.5, 139.0], [0.6, 139.0], [0.7, 139.0], [0.8, 140.0], [0.9, 140.0], [1.0, 140.0], [1.1, 140.0], [1.2, 140.0], [1.3, 141.0], [1.4, 141.0], [1.5, 141.0], [1.6, 141.0], [1.7, 141.0], [1.8, 141.0], [1.9, 141.0], [2.0, 141.0], [2.1, 141.0], [2.2, 141.0], [2.3, 141.0], [2.4, 141.0], [2.5, 142.0], [2.6, 142.0], [2.7, 142.0], [2.8, 142.0], [2.9, 143.0], [3.0, 143.0], [3.1, 143.0], [3.2, 144.0], [3.3, 144.0], [3.4, 144.0], [3.5, 144.0], [3.6, 148.0], [3.7, 148.0], [3.8, 148.0], [3.9, 148.0], [4.0, 148.0], [4.1, 148.0], [4.2, 148.0], [4.3, 148.0], [4.4, 149.0], [4.5, 149.0], [4.6, 149.0], [4.7, 149.0], [4.8, 149.0], [4.9, 149.0], [5.0, 149.0], [5.1, 149.0], [5.2, 149.0], [5.3, 149.0], [5.4, 149.0], [5.5, 149.0], [5.6, 149.0], [5.7, 149.0], [5.8, 149.0], [5.9, 149.0], [6.0, 150.0], [6.1, 150.0], [6.2, 150.0], [6.3, 150.0], [6.4, 150.0], [6.5, 150.0], [6.6, 150.0], [6.7, 150.0], [6.8, 151.0], [6.9, 151.0], [7.0, 151.0], [7.1, 151.0], [7.2, 151.0], [7.3, 151.0], [7.4, 151.0], [7.5, 151.0], [7.6, 151.0], [7.7, 151.0], [7.8, 151.0], [7.9, 151.0], [8.0, 152.0], [8.1, 152.0], [8.2, 152.0], [8.3, 152.0], [8.4, 152.0], [8.5, 152.0], [8.6, 152.0], [8.7, 152.0], [8.8, 153.0], [8.9, 153.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 158.0], [9.4, 158.0], [9.5, 158.0], [9.6, 158.0], [9.7, 158.0], [9.8, 158.0], [9.9, 158.0], [10.0, 158.0], [10.1, 158.0], [10.2, 158.0], [10.3, 158.0], [10.4, 159.0], [10.5, 159.0], [10.6, 159.0], [10.7, 159.0], [10.8, 160.0], [10.9, 160.0], [11.0, 160.0], [11.1, 160.0], [11.2, 160.0], [11.3, 160.0], [11.4, 160.0], [11.5, 160.0], [11.6, 160.0], [11.7, 160.0], [11.8, 160.0], [11.9, 160.0], [12.0, 161.0], [12.1, 161.0], [12.2, 161.0], [12.3, 161.0], [12.4, 163.0], [12.5, 163.0], [12.6, 163.0], [12.7, 163.0], [12.8, 168.0], [12.9, 168.0], [13.0, 168.0], [13.1, 168.0], [13.2, 168.0], [13.3, 168.0], [13.4, 168.0], [13.5, 168.0], [13.6, 168.0], [13.7, 168.0], [13.8, 168.0], [13.9, 168.0], [14.0, 169.0], [14.1, 169.0], [14.2, 169.0], [14.3, 169.0], [14.4, 169.0], [14.5, 169.0], [14.6, 169.0], [14.7, 169.0], [14.8, 172.0], [14.9, 172.0], [15.0, 172.0], [15.1, 172.0], [15.2, 172.0], [15.3, 172.0], [15.4, 172.0], [15.5, 172.0], [15.6, 172.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 175.0], [16.1, 175.0], [16.2, 175.0], [16.3, 175.0], [16.4, 176.0], [16.5, 176.0], [16.6, 176.0], [16.7, 176.0], [16.8, 176.0], [16.9, 176.0], [17.0, 176.0], [17.1, 176.0], [17.2, 177.0], [17.3, 177.0], [17.4, 177.0], [17.5, 177.0], [17.6, 177.0], [17.7, 177.0], [17.8, 177.0], [17.9, 177.0], [18.0, 179.0], [18.1, 179.0], [18.2, 179.0], [18.3, 179.0], [18.4, 180.0], [18.5, 180.0], [18.6, 180.0], [18.7, 180.0], [18.8, 181.0], [18.9, 181.0], [19.0, 181.0], [19.1, 181.0], [19.2, 183.0], [19.3, 183.0], [19.4, 183.0], [19.5, 183.0], [19.6, 184.0], [19.7, 184.0], [19.8, 184.0], [19.9, 184.0], [20.0, 185.0], [20.1, 185.0], [20.2, 185.0], [20.3, 185.0], [20.4, 185.0], [20.5, 185.0], [20.6, 185.0], [20.7, 185.0], [20.8, 185.0], [20.9, 185.0], [21.0, 185.0], [21.1, 185.0], [21.2, 186.0], [21.3, 186.0], [21.4, 186.0], [21.5, 186.0], [21.6, 186.0], [21.7, 186.0], [21.8, 186.0], [21.9, 186.0], [22.0, 187.0], [22.1, 187.0], [22.2, 187.0], [22.3, 187.0], [22.4, 191.0], [22.5, 191.0], [22.6, 191.0], [22.7, 191.0], [22.8, 192.0], [22.9, 192.0], [23.0, 192.0], [23.1, 192.0], [23.2, 192.0], [23.3, 192.0], [23.4, 192.0], [23.5, 192.0], [23.6, 197.0], [23.7, 197.0], [23.8, 197.0], [23.9, 197.0], [24.0, 198.0], [24.1, 198.0], [24.2, 198.0], [24.3, 198.0], [24.4, 198.0], [24.5, 198.0], [24.6, 198.0], [24.7, 198.0], [24.8, 201.0], [24.9, 201.0], [25.0, 201.0], [25.1, 201.0], [25.2, 204.0], [25.3, 204.0], [25.4, 204.0], [25.5, 204.0], [25.6, 207.0], [25.7, 207.0], [25.8, 207.0], [25.9, 207.0], [26.0, 208.0], [26.1, 208.0], [26.2, 208.0], [26.3, 208.0], [26.4, 208.0], [26.5, 208.0], [26.6, 208.0], [26.7, 208.0], [26.8, 210.0], [26.9, 210.0], [27.0, 210.0], [27.1, 210.0], [27.2, 217.0], [27.3, 217.0], [27.4, 217.0], [27.5, 217.0], [27.6, 217.0], [27.7, 217.0], [27.8, 217.0], [27.9, 217.0], [28.0, 218.0], [28.1, 218.0], [28.2, 218.0], [28.3, 218.0], [28.4, 220.0], [28.5, 220.0], [28.6, 220.0], [28.7, 220.0], [28.8, 221.0], [28.9, 221.0], [29.0, 221.0], [29.1, 221.0], [29.2, 222.0], [29.3, 222.0], [29.4, 222.0], [29.5, 222.0], [29.6, 227.0], [29.7, 227.0], [29.8, 227.0], [29.9, 227.0], [30.0, 230.0], [30.1, 230.0], [30.2, 230.0], [30.3, 230.0], [30.4, 231.0], [30.5, 231.0], [30.6, 231.0], [30.7, 231.0], [30.8, 232.0], [30.9, 232.0], [31.0, 232.0], [31.1, 232.0], [31.2, 233.0], [31.3, 233.0], [31.4, 233.0], [31.5, 233.0], [31.6, 234.0], [31.7, 234.0], [31.8, 234.0], [31.9, 234.0], [32.0, 237.0], [32.1, 237.0], [32.2, 237.0], [32.3, 237.0], [32.4, 239.0], [32.5, 239.0], [32.6, 239.0], [32.7, 239.0], [32.8, 248.0], [32.9, 248.0], [33.0, 248.0], [33.1, 248.0], [33.2, 248.0], [33.3, 248.0], [33.4, 248.0], [33.5, 248.0], [33.6, 250.0], [33.7, 250.0], [33.8, 250.0], [33.9, 250.0], [34.0, 253.0], [34.1, 253.0], [34.2, 253.0], [34.3, 253.0], [34.4, 259.0], [34.5, 259.0], [34.6, 259.0], [34.7, 259.0], [34.8, 263.0], [34.9, 263.0], [35.0, 263.0], [35.1, 263.0], [35.2, 265.0], [35.3, 265.0], [35.4, 265.0], [35.5, 265.0], [35.6, 269.0], [35.7, 269.0], [35.8, 269.0], [35.9, 269.0], [36.0, 276.0], [36.1, 276.0], [36.2, 276.0], [36.3, 276.0], [36.4, 276.0], [36.5, 276.0], [36.6, 276.0], [36.7, 276.0], [36.8, 279.0], [36.9, 279.0], [37.0, 279.0], [37.1, 279.0], [37.2, 282.0], [37.3, 282.0], [37.4, 282.0], [37.5, 282.0], [37.6, 283.0], [37.7, 283.0], [37.8, 283.0], [37.9, 283.0], [38.0, 290.0], [38.1, 290.0], [38.2, 290.0], [38.3, 290.0], [38.4, 290.0], [38.5, 290.0], [38.6, 290.0], [38.7, 290.0], [38.8, 294.0], [38.9, 294.0], [39.0, 294.0], [39.1, 294.0], [39.2, 301.0], [39.3, 301.0], [39.4, 301.0], [39.5, 301.0], [39.6, 301.0], [39.7, 301.0], [39.8, 301.0], [39.9, 301.0], [40.0, 304.0], [40.1, 304.0], [40.2, 304.0], [40.3, 304.0], [40.4, 305.0], [40.5, 305.0], [40.6, 305.0], [40.7, 305.0], [40.8, 311.0], [40.9, 311.0], [41.0, 311.0], [41.1, 311.0], [41.2, 312.0], [41.3, 312.0], [41.4, 312.0], [41.5, 312.0], [41.6, 322.0], [41.7, 322.0], [41.8, 322.0], [41.9, 322.0], [42.0, 322.0], [42.1, 322.0], [42.2, 322.0], [42.3, 322.0], [42.4, 330.0], [42.5, 330.0], [42.6, 330.0], [42.7, 330.0], [42.8, 331.0], [42.9, 331.0], [43.0, 331.0], [43.1, 331.0], [43.2, 333.0], [43.3, 333.0], [43.4, 333.0], [43.5, 333.0], [43.6, 333.0], [43.7, 333.0], [43.8, 333.0], [43.9, 333.0], [44.0, 335.0], [44.1, 335.0], [44.2, 335.0], [44.3, 335.0], [44.4, 342.0], [44.5, 342.0], [44.6, 342.0], [44.7, 342.0], [44.8, 345.0], [44.9, 345.0], [45.0, 345.0], [45.1, 345.0], [45.2, 356.0], [45.3, 356.0], [45.4, 356.0], [45.5, 356.0], [45.6, 363.0], [45.7, 363.0], [45.8, 363.0], [45.9, 363.0], [46.0, 371.0], [46.1, 371.0], [46.2, 371.0], [46.3, 371.0], [46.4, 371.0], [46.5, 371.0], [46.6, 371.0], [46.7, 371.0], [46.8, 384.0], [46.9, 384.0], [47.0, 384.0], [47.1, 384.0], [47.2, 388.0], [47.3, 388.0], [47.4, 388.0], [47.5, 388.0], [47.6, 397.0], [47.7, 397.0], [47.8, 397.0], [47.9, 397.0], [48.0, 404.0], [48.1, 404.0], [48.2, 404.0], [48.3, 404.0], [48.4, 429.0], [48.5, 429.0], [48.6, 429.0], [48.7, 429.0], [48.8, 437.0], [48.9, 437.0], [49.0, 437.0], [49.1, 437.0], [49.2, 437.0], [49.3, 437.0], [49.4, 437.0], [49.5, 437.0], [49.6, 441.0], [49.7, 441.0], [49.8, 441.0], [49.9, 441.0], [50.0, 442.0], [50.1, 442.0], [50.2, 442.0], [50.3, 442.0], [50.4, 446.0], [50.5, 446.0], [50.6, 446.0], [50.7, 446.0], [50.8, 451.0], [50.9, 451.0], [51.0, 451.0], [51.1, 451.0], [51.2, 466.0], [51.3, 466.0], [51.4, 466.0], [51.5, 466.0], [51.6, 472.0], [51.7, 472.0], [51.8, 472.0], [51.9, 472.0], [52.0, 476.0], [52.1, 476.0], [52.2, 476.0], [52.3, 476.0], [52.4, 481.0], [52.5, 481.0], [52.6, 481.0], [52.7, 481.0], [52.8, 502.0], [52.9, 502.0], [53.0, 502.0], [53.1, 502.0], [53.2, 513.0], [53.3, 513.0], [53.4, 513.0], [53.5, 513.0], [53.6, 520.0], [53.7, 520.0], [53.8, 520.0], [53.9, 520.0], [54.0, 523.0], [54.1, 523.0], [54.2, 523.0], [54.3, 523.0], [54.4, 526.0], [54.5, 526.0], [54.6, 526.0], [54.7, 526.0], [54.8, 529.0], [54.9, 529.0], [55.0, 529.0], [55.1, 529.0], [55.2, 531.0], [55.3, 531.0], [55.4, 531.0], [55.5, 531.0], [55.6, 531.0], [55.7, 531.0], [55.8, 531.0], [55.9, 531.0], [56.0, 533.0], [56.1, 533.0], [56.2, 533.0], [56.3, 533.0], [56.4, 544.0], [56.5, 544.0], [56.6, 544.0], [56.7, 544.0], [56.8, 548.0], [56.9, 548.0], [57.0, 548.0], [57.1, 548.0], [57.2, 550.0], [57.3, 550.0], [57.4, 550.0], [57.5, 550.0], [57.6, 553.0], [57.7, 553.0], [57.8, 553.0], [57.9, 553.0], [58.0, 554.0], [58.1, 554.0], [58.2, 554.0], [58.3, 554.0], [58.4, 554.0], [58.5, 554.0], [58.6, 554.0], [58.7, 554.0], [58.8, 555.0], [58.9, 555.0], [59.0, 555.0], [59.1, 555.0], [59.2, 557.0], [59.3, 557.0], [59.4, 557.0], [59.5, 557.0], [59.6, 562.0], [59.7, 562.0], [59.8, 562.0], [59.9, 562.0], [60.0, 563.0], [60.1, 563.0], [60.2, 563.0], [60.3, 563.0], [60.4, 566.0], [60.5, 566.0], [60.6, 566.0], [60.7, 566.0], [60.8, 567.0], [60.9, 567.0], [61.0, 567.0], [61.1, 567.0], [61.2, 570.0], [61.3, 570.0], [61.4, 570.0], [61.5, 570.0], [61.6, 572.0], [61.7, 572.0], [61.8, 572.0], [61.9, 572.0], [62.0, 577.0], [62.1, 577.0], [62.2, 577.0], [62.3, 577.0], [62.4, 609.0], [62.5, 609.0], [62.6, 609.0], [62.7, 609.0], [62.8, 614.0], [62.9, 614.0], [63.0, 614.0], [63.1, 614.0], [63.2, 615.0], [63.3, 615.0], [63.4, 615.0], [63.5, 615.0], [63.6, 615.0], [63.7, 615.0], [63.8, 615.0], [63.9, 615.0], [64.0, 617.0], [64.1, 617.0], [64.2, 617.0], [64.3, 617.0], [64.4, 618.0], [64.5, 618.0], [64.6, 618.0], [64.7, 618.0], [64.8, 619.0], [64.9, 619.0], [65.0, 619.0], [65.1, 619.0], [65.2, 620.0], [65.3, 620.0], [65.4, 620.0], [65.5, 620.0], [65.6, 622.0], [65.7, 622.0], [65.8, 622.0], [65.9, 622.0], [66.0, 626.0], [66.1, 626.0], [66.2, 626.0], [66.3, 626.0], [66.4, 626.0], [66.5, 626.0], [66.6, 626.0], [66.7, 626.0], [66.8, 633.0], [66.9, 633.0], [67.0, 633.0], [67.1, 633.0], [67.2, 636.0], [67.3, 636.0], [67.4, 636.0], [67.5, 636.0], [67.6, 642.0], [67.7, 642.0], [67.8, 642.0], [67.9, 642.0], [68.0, 643.0], [68.1, 643.0], [68.2, 643.0], [68.3, 643.0], [68.4, 646.0], [68.5, 646.0], [68.6, 646.0], [68.7, 646.0], [68.8, 652.0], [68.9, 652.0], [69.0, 652.0], [69.1, 652.0], [69.2, 679.0], [69.3, 679.0], [69.4, 679.0], [69.5, 679.0], [69.6, 685.0], [69.7, 685.0], [69.8, 685.0], [69.9, 685.0], [70.0, 693.0], [70.1, 693.0], [70.2, 693.0], [70.3, 693.0], [70.4, 699.0], [70.5, 699.0], [70.6, 699.0], [70.7, 699.0], [70.8, 707.0], [70.9, 707.0], [71.0, 707.0], [71.1, 707.0], [71.2, 709.0], [71.3, 709.0], [71.4, 709.0], [71.5, 709.0], [71.6, 711.0], [71.7, 711.0], [71.8, 711.0], [71.9, 711.0], [72.0, 717.0], [72.1, 717.0], [72.2, 717.0], [72.3, 717.0], [72.4, 730.0], [72.5, 730.0], [72.6, 730.0], [72.7, 730.0], [72.8, 732.0], [72.9, 732.0], [73.0, 732.0], [73.1, 732.0], [73.2, 740.0], [73.3, 740.0], [73.4, 740.0], [73.5, 740.0], [73.6, 744.0], [73.7, 744.0], [73.8, 744.0], [73.9, 744.0], [74.0, 747.0], [74.1, 747.0], [74.2, 747.0], [74.3, 747.0], [74.4, 748.0], [74.5, 748.0], [74.6, 748.0], [74.7, 748.0], [74.8, 748.0], [74.9, 748.0], [75.0, 748.0], [75.1, 748.0], [75.2, 754.0], [75.3, 754.0], [75.4, 754.0], [75.5, 754.0], [75.6, 755.0], [75.7, 755.0], [75.8, 755.0], [75.9, 755.0], [76.0, 756.0], [76.1, 756.0], [76.2, 756.0], [76.3, 756.0], [76.4, 763.0], [76.5, 763.0], [76.6, 763.0], [76.7, 763.0], [76.8, 763.0], [76.9, 766.0], [77.0, 766.0], [77.1, 766.0], [77.2, 766.0], [77.3, 766.0], [77.4, 766.0], [77.5, 766.0], [77.6, 766.0], [77.7, 769.0], [77.8, 769.0], [77.9, 769.0], [78.0, 769.0], [78.1, 771.0], [78.2, 771.0], [78.3, 771.0], [78.4, 771.0], [78.5, 777.0], [78.6, 777.0], [78.7, 777.0], [78.8, 777.0], [78.9, 777.0], [79.0, 777.0], [79.1, 777.0], [79.2, 777.0], [79.3, 799.0], [79.4, 799.0], [79.5, 799.0], [79.6, 799.0], [79.7, 823.0], [79.8, 823.0], [79.9, 823.0], [80.0, 823.0], [80.1, 831.0], [80.2, 831.0], [80.3, 831.0], [80.4, 831.0], [80.5, 835.0], [80.6, 835.0], [80.7, 835.0], [80.8, 835.0], [80.9, 838.0], [81.0, 838.0], [81.1, 838.0], [81.2, 838.0], [81.3, 865.0], [81.4, 865.0], [81.5, 865.0], [81.6, 865.0], [81.7, 871.0], [81.8, 871.0], [81.9, 871.0], [82.0, 871.0], [82.1, 891.0], [82.2, 891.0], [82.3, 891.0], [82.4, 891.0], [82.5, 895.0], [82.6, 895.0], [82.7, 895.0], [82.8, 895.0], [82.9, 917.0], [83.0, 917.0], [83.1, 917.0], [83.2, 917.0], [83.3, 918.0], [83.4, 918.0], [83.5, 918.0], [83.6, 918.0], [83.7, 919.0], [83.8, 919.0], [83.9, 919.0], [84.0, 919.0], [84.1, 919.0], [84.2, 919.0], [84.3, 919.0], [84.4, 919.0], [84.5, 925.0], [84.6, 925.0], [84.7, 925.0], [84.8, 925.0], [84.9, 927.0], [85.0, 927.0], [85.1, 927.0], [85.2, 927.0], [85.3, 927.0], [85.4, 927.0], [85.5, 927.0], [85.6, 927.0], [85.7, 932.0], [85.8, 932.0], [85.9, 932.0], [86.0, 932.0], [86.1, 934.0], [86.2, 934.0], [86.3, 934.0], [86.4, 934.0], [86.5, 967.0], [86.6, 967.0], [86.7, 967.0], [86.8, 967.0], [86.9, 975.0], [87.0, 975.0], [87.1, 975.0], [87.2, 975.0], [87.3, 983.0], [87.4, 983.0], [87.5, 983.0], [87.6, 983.0], [87.7, 995.0], [87.8, 995.0], [87.9, 995.0], [88.0, 995.0], [88.1, 1028.0], [88.2, 1028.0], [88.3, 1028.0], [88.4, 1028.0], [88.5, 1048.0], [88.6, 1048.0], [88.7, 1048.0], [88.8, 1048.0], [88.9, 1079.0], [89.0, 1079.0], [89.1, 1079.0], [89.2, 1079.0], [89.3, 1087.0], [89.4, 1087.0], [89.5, 1087.0], [89.6, 1087.0], [89.7, 1122.0], [89.8, 1122.0], [89.9, 1122.0], [90.0, 1122.0], [90.1, 1128.0], [90.2, 1128.0], [90.3, 1128.0], [90.4, 1128.0], [90.5, 1147.0], [90.6, 1147.0], [90.7, 1147.0], [90.8, 1147.0], [90.9, 1170.0], [91.0, 1170.0], [91.1, 1170.0], [91.2, 1170.0], [91.3, 1233.0], [91.4, 1233.0], [91.5, 1233.0], [91.6, 1233.0], [91.7, 1235.0], [91.8, 1235.0], [91.9, 1235.0], [92.0, 1235.0], [92.1, 1260.0], [92.2, 1260.0], [92.3, 1260.0], [92.4, 1260.0], [92.5, 1263.0], [92.6, 1263.0], [92.7, 1263.0], [92.8, 1263.0], [92.9, 1290.0], [93.0, 1290.0], [93.1, 1290.0], [93.2, 1290.0], [93.3, 1336.0], [93.4, 1336.0], [93.5, 1336.0], [93.6, 1336.0], [93.7, 1442.0], [93.8, 1442.0], [93.9, 1442.0], [94.0, 1442.0], [94.1, 1452.0], [94.2, 1452.0], [94.3, 1452.0], [94.4, 1452.0], [94.5, 1465.0], [94.6, 1465.0], [94.7, 1465.0], [94.8, 1465.0], [94.9, 1468.0], [95.0, 1468.0], [95.1, 1468.0], [95.2, 1468.0], [95.3, 1498.0], [95.4, 1498.0], [95.5, 1498.0], [95.6, 1498.0], [95.7, 1533.0], [95.8, 1533.0], [95.9, 1533.0], [96.0, 1533.0], [96.1, 1560.0], [96.2, 1560.0], [96.3, 1560.0], [96.4, 1560.0], [96.5, 1687.0], [96.6, 1687.0], [96.7, 1687.0], [96.8, 1687.0], [96.9, 2102.0], [97.0, 2102.0], [97.1, 2102.0], [97.2, 2102.0], [97.3, 2433.0], [97.4, 2433.0], [97.5, 2433.0], [97.6, 2433.0], [97.7, 2514.0], [97.8, 2514.0], [97.9, 2514.0], [98.0, 2514.0], [98.1, 2519.0], [98.2, 2519.0], [98.3, 2519.0], [98.4, 2519.0], [98.5, 3091.0], [98.6, 3091.0], [98.7, 3091.0], [98.8, 3091.0], [98.9, 3270.0], [99.0, 3270.0], [99.1, 3270.0], [99.2, 3270.0], [99.3, 3366.0], [99.4, 3366.0], [99.5, 3366.0], [99.6, 3366.0], [99.7, 3371.0], [99.8, 3371.0], [99.9, 3371.0], [100.0, 3371.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 134.0], [0.1, 134.0], [0.2, 134.0], [0.3, 134.0], [0.4, 141.0], [0.5, 141.0], [0.6, 141.0], [0.7, 141.0], [0.8, 141.0], [0.9, 141.0], [1.0, 141.0], [1.1, 141.0], [1.2, 141.0], [1.3, 141.0], [1.4, 141.0], [1.5, 141.0], [1.6, 143.0], [1.7, 143.0], [1.8, 143.0], [1.9, 143.0], [2.0, 144.0], [2.1, 144.0], [2.2, 144.0], [2.3, 144.0], [2.4, 145.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 146.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 148.0], [3.7, 148.0], [3.8, 148.0], [3.9, 148.0], [4.0, 149.0], [4.1, 149.0], [4.2, 149.0], [4.3, 149.0], [4.4, 149.0], [4.5, 149.0], [4.6, 149.0], [4.7, 149.0], [4.8, 149.0], [4.9, 149.0], [5.0, 149.0], [5.1, 149.0], [5.2, 149.0], [5.3, 149.0], [5.4, 149.0], [5.5, 149.0], [5.6, 150.0], [5.7, 150.0], [5.8, 150.0], [5.9, 150.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 153.0], [6.5, 153.0], [6.6, 153.0], [6.7, 153.0], [6.8, 153.0], [6.9, 153.0], [7.0, 153.0], [7.1, 153.0], [7.2, 153.0], [7.3, 153.0], [7.4, 153.0], [7.5, 153.0], [7.6, 153.0], [7.7, 154.0], [7.8, 154.0], [7.9, 154.0], [8.0, 154.0], [8.1, 154.0], [8.2, 154.0], [8.3, 154.0], [8.4, 154.0], [8.5, 154.0], [8.6, 154.0], [8.7, 154.0], [8.8, 154.0], [8.9, 154.0], [9.0, 154.0], [9.1, 154.0], [9.2, 154.0], [9.3, 155.0], [9.4, 155.0], [9.5, 155.0], [9.6, 155.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 158.0], [10.2, 158.0], [10.3, 158.0], [10.4, 158.0], [10.5, 160.0], [10.6, 160.0], [10.7, 160.0], [10.8, 160.0], [10.9, 161.0], [11.0, 161.0], [11.1, 161.0], [11.2, 161.0], [11.3, 161.0], [11.4, 161.0], [11.5, 161.0], [11.6, 161.0], [11.7, 165.0], [11.8, 165.0], [11.9, 165.0], [12.0, 165.0], [12.1, 168.0], [12.2, 168.0], [12.3, 168.0], [12.4, 168.0], [12.5, 168.0], [12.6, 168.0], [12.7, 168.0], [12.8, 168.0], [12.9, 169.0], [13.0, 169.0], [13.1, 169.0], [13.2, 169.0], [13.3, 173.0], [13.4, 173.0], [13.5, 173.0], [13.6, 173.0], [13.7, 174.0], [13.8, 174.0], [13.9, 174.0], [14.0, 174.0], [14.1, 175.0], [14.2, 175.0], [14.3, 175.0], [14.4, 175.0], [14.5, 176.0], [14.6, 176.0], [14.7, 176.0], [14.8, 176.0], [14.9, 176.0], [15.0, 176.0], [15.1, 176.0], [15.2, 176.0], [15.3, 177.0], [15.4, 177.0], [15.5, 177.0], [15.6, 177.0], [15.7, 180.0], [15.8, 180.0], [15.9, 180.0], [16.0, 180.0], [16.1, 183.0], [16.2, 183.0], [16.3, 183.0], [16.4, 183.0], [16.5, 185.0], [16.6, 185.0], [16.7, 185.0], [16.8, 185.0], [16.9, 185.0], [17.0, 185.0], [17.1, 185.0], [17.2, 185.0], [17.3, 187.0], [17.4, 187.0], [17.5, 187.0], [17.6, 187.0], [17.7, 188.0], [17.8, 188.0], [17.9, 188.0], [18.0, 188.0], [18.1, 189.0], [18.2, 189.0], [18.3, 189.0], [18.4, 189.0], [18.5, 189.0], [18.6, 189.0], [18.7, 189.0], [18.8, 189.0], [18.9, 189.0], [19.0, 189.0], [19.1, 189.0], [19.2, 189.0], [19.3, 189.0], [19.4, 189.0], [19.5, 189.0], [19.6, 189.0], [19.7, 190.0], [19.8, 190.0], [19.9, 190.0], [20.0, 190.0], [20.1, 190.0], [20.2, 190.0], [20.3, 190.0], [20.4, 190.0], [20.5, 191.0], [20.6, 191.0], [20.7, 191.0], [20.8, 191.0], [20.9, 191.0], [21.0, 191.0], [21.1, 191.0], [21.2, 191.0], [21.3, 191.0], [21.4, 191.0], [21.5, 191.0], [21.6, 191.0], [21.7, 192.0], [21.8, 192.0], [21.9, 192.0], [22.0, 192.0], [22.1, 192.0], [22.2, 192.0], [22.3, 192.0], [22.4, 192.0], [22.5, 192.0], [22.6, 192.0], [22.7, 192.0], [22.8, 192.0], [22.9, 195.0], [23.0, 195.0], [23.1, 195.0], [23.2, 195.0], [23.3, 195.0], [23.4, 195.0], [23.5, 195.0], [23.6, 195.0], [23.7, 197.0], [23.8, 197.0], [23.9, 197.0], [24.0, 197.0], [24.1, 197.0], [24.2, 197.0], [24.3, 197.0], [24.4, 197.0], [24.5, 199.0], [24.6, 199.0], [24.7, 199.0], [24.8, 199.0], [24.9, 200.0], [25.0, 200.0], [25.1, 200.0], [25.2, 200.0], [25.3, 202.0], [25.4, 202.0], [25.5, 202.0], [25.6, 203.0], [25.7, 203.0], [25.8, 203.0], [25.9, 203.0], [26.0, 203.0], [26.1, 203.0], [26.2, 203.0], [26.3, 203.0], [26.4, 203.0], [26.5, 205.0], [26.6, 205.0], [26.7, 205.0], [26.8, 207.0], [26.9, 207.0], [27.0, 207.0], [27.1, 207.0], [27.2, 208.0], [27.3, 208.0], [27.4, 208.0], [27.5, 208.0], [27.6, 215.0], [27.7, 215.0], [27.8, 215.0], [27.9, 215.0], [28.0, 217.0], [28.1, 217.0], [28.2, 217.0], [28.3, 217.0], [28.4, 221.0], [28.5, 221.0], [28.6, 221.0], [28.7, 221.0], [28.8, 222.0], [28.9, 222.0], [29.0, 222.0], [29.1, 222.0], [29.2, 223.0], [29.3, 223.0], [29.4, 223.0], [29.5, 223.0], [29.6, 225.0], [29.7, 225.0], [29.8, 225.0], [29.9, 225.0], [30.0, 225.0], [30.1, 225.0], [30.2, 225.0], [30.3, 225.0], [30.4, 229.0], [30.5, 229.0], [30.6, 229.0], [30.7, 229.0], [30.8, 230.0], [30.9, 230.0], [31.0, 230.0], [31.1, 230.0], [31.2, 237.0], [31.3, 237.0], [31.4, 237.0], [31.5, 237.0], [31.6, 240.0], [31.7, 240.0], [31.8, 240.0], [31.9, 240.0], [32.0, 241.0], [32.1, 241.0], [32.2, 241.0], [32.3, 241.0], [32.4, 245.0], [32.5, 245.0], [32.6, 245.0], [32.7, 245.0], [32.8, 246.0], [32.9, 246.0], [33.0, 246.0], [33.1, 246.0], [33.2, 247.0], [33.3, 247.0], [33.4, 247.0], [33.5, 247.0], [33.6, 249.0], [33.7, 249.0], [33.8, 249.0], [33.9, 249.0], [34.0, 251.0], [34.1, 251.0], [34.2, 251.0], [34.3, 251.0], [34.4, 254.0], [34.5, 254.0], [34.6, 254.0], [34.7, 254.0], [34.8, 256.0], [34.9, 256.0], [35.0, 256.0], [35.1, 256.0], [35.2, 257.0], [35.3, 257.0], [35.4, 257.0], [35.5, 257.0], [35.6, 260.0], [35.7, 260.0], [35.8, 260.0], [35.9, 260.0], [36.0, 260.0], [36.1, 260.0], [36.2, 260.0], [36.3, 260.0], [36.4, 262.0], [36.5, 262.0], [36.6, 262.0], [36.7, 262.0], [36.8, 267.0], [36.9, 267.0], [37.0, 267.0], [37.1, 267.0], [37.2, 267.0], [37.3, 267.0], [37.4, 267.0], [37.5, 267.0], [37.6, 267.0], [37.7, 267.0], [37.8, 267.0], [37.9, 267.0], [38.0, 270.0], [38.1, 270.0], [38.2, 270.0], [38.3, 270.0], [38.4, 272.0], [38.5, 272.0], [38.6, 272.0], [38.7, 272.0], [38.8, 273.0], [38.9, 273.0], [39.0, 273.0], [39.1, 273.0], [39.2, 276.0], [39.3, 276.0], [39.4, 276.0], [39.5, 276.0], [39.6, 276.0], [39.7, 276.0], [39.8, 276.0], [39.9, 276.0], [40.0, 278.0], [40.1, 278.0], [40.2, 278.0], [40.3, 278.0], [40.4, 278.0], [40.5, 278.0], [40.6, 278.0], [40.7, 278.0], [40.8, 282.0], [40.9, 282.0], [41.0, 282.0], [41.1, 282.0], [41.2, 288.0], [41.3, 288.0], [41.4, 288.0], [41.5, 288.0], [41.6, 291.0], [41.7, 291.0], [41.8, 291.0], [41.9, 291.0], [42.0, 293.0], [42.1, 293.0], [42.2, 293.0], [42.3, 293.0], [42.4, 294.0], [42.5, 294.0], [42.6, 294.0], [42.7, 294.0], [42.8, 304.0], [42.9, 304.0], [43.0, 304.0], [43.1, 304.0], [43.2, 311.0], [43.3, 311.0], [43.4, 311.0], [43.5, 311.0], [43.6, 314.0], [43.7, 314.0], [43.8, 314.0], [43.9, 314.0], [44.0, 333.0], [44.1, 333.0], [44.2, 333.0], [44.3, 333.0], [44.4, 341.0], [44.5, 341.0], [44.6, 341.0], [44.7, 341.0], [44.8, 342.0], [44.9, 342.0], [45.0, 342.0], [45.1, 342.0], [45.2, 343.0], [45.3, 343.0], [45.4, 343.0], [45.5, 343.0], [45.6, 343.0], [45.7, 343.0], [45.8, 343.0], [45.9, 343.0], [46.0, 353.0], [46.1, 353.0], [46.2, 353.0], [46.3, 353.0], [46.4, 361.0], [46.5, 361.0], [46.6, 361.0], [46.7, 361.0], [46.8, 363.0], [46.9, 363.0], [47.0, 363.0], [47.1, 363.0], [47.2, 365.0], [47.3, 365.0], [47.4, 365.0], [47.5, 365.0], [47.6, 366.0], [47.7, 366.0], [47.8, 366.0], [47.9, 366.0], [48.0, 366.0], [48.1, 366.0], [48.2, 366.0], [48.3, 366.0], [48.4, 366.0], [48.5, 366.0], [48.6, 366.0], [48.7, 366.0], [48.8, 368.0], [48.9, 368.0], [49.0, 368.0], [49.1, 368.0], [49.2, 376.0], [49.3, 376.0], [49.4, 376.0], [49.5, 376.0], [49.6, 381.0], [49.7, 381.0], [49.8, 381.0], [49.9, 381.0], [50.0, 382.0], [50.1, 382.0], [50.2, 382.0], [50.3, 382.0], [50.4, 383.0], [50.5, 383.0], [50.6, 383.0], [50.7, 383.0], [50.8, 383.0], [50.9, 383.0], [51.0, 383.0], [51.1, 383.0], [51.2, 390.0], [51.3, 390.0], [51.4, 390.0], [51.5, 390.0], [51.6, 390.0], [51.7, 390.0], [51.8, 390.0], [51.9, 390.0], [52.0, 391.0], [52.1, 391.0], [52.2, 391.0], [52.3, 391.0], [52.4, 392.0], [52.5, 392.0], [52.6, 392.0], [52.7, 392.0], [52.8, 397.0], [52.9, 397.0], [53.0, 397.0], [53.1, 397.0], [53.2, 417.0], [53.3, 417.0], [53.4, 417.0], [53.5, 417.0], [53.6, 418.0], [53.7, 418.0], [53.8, 418.0], [53.9, 418.0], [54.0, 426.0], [54.1, 426.0], [54.2, 426.0], [54.3, 426.0], [54.4, 434.0], [54.5, 434.0], [54.6, 434.0], [54.7, 434.0], [54.8, 438.0], [54.9, 438.0], [55.0, 438.0], [55.1, 438.0], [55.2, 441.0], [55.3, 441.0], [55.4, 441.0], [55.5, 441.0], [55.6, 444.0], [55.7, 444.0], [55.8, 444.0], [55.9, 444.0], [56.0, 445.0], [56.1, 445.0], [56.2, 445.0], [56.3, 445.0], [56.4, 450.0], [56.5, 450.0], [56.6, 450.0], [56.7, 450.0], [56.8, 451.0], [56.9, 451.0], [57.0, 451.0], [57.1, 451.0], [57.2, 459.0], [57.3, 459.0], [57.4, 459.0], [57.5, 459.0], [57.6, 460.0], [57.7, 460.0], [57.8, 460.0], [57.9, 460.0], [58.0, 465.0], [58.1, 465.0], [58.2, 465.0], [58.3, 465.0], [58.4, 465.0], [58.5, 465.0], [58.6, 465.0], [58.7, 465.0], [58.8, 472.0], [58.9, 472.0], [59.0, 472.0], [59.1, 472.0], [59.2, 473.0], [59.3, 473.0], [59.4, 473.0], [59.5, 473.0], [59.6, 475.0], [59.7, 475.0], [59.8, 475.0], [59.9, 475.0], [60.0, 489.0], [60.1, 489.0], [60.2, 489.0], [60.3, 489.0], [60.4, 492.0], [60.5, 492.0], [60.6, 492.0], [60.7, 492.0], [60.8, 498.0], [60.9, 498.0], [61.0, 498.0], [61.1, 498.0], [61.2, 500.0], [61.3, 500.0], [61.4, 500.0], [61.5, 500.0], [61.6, 503.0], [61.7, 503.0], [61.8, 503.0], [61.9, 503.0], [62.0, 507.0], [62.1, 507.0], [62.2, 507.0], [62.3, 507.0], [62.4, 515.0], [62.5, 515.0], [62.6, 515.0], [62.7, 515.0], [62.8, 525.0], [62.9, 525.0], [63.0, 525.0], [63.1, 525.0], [63.2, 528.0], [63.3, 528.0], [63.4, 528.0], [63.5, 528.0], [63.6, 529.0], [63.7, 529.0], [63.8, 529.0], [63.9, 529.0], [64.0, 535.0], [64.1, 535.0], [64.2, 535.0], [64.3, 535.0], [64.4, 549.0], [64.5, 549.0], [64.6, 549.0], [64.7, 549.0], [64.8, 549.0], [64.9, 549.0], [65.0, 549.0], [65.1, 549.0], [65.2, 558.0], [65.3, 558.0], [65.4, 558.0], [65.5, 558.0], [65.6, 558.0], [65.7, 558.0], [65.8, 558.0], [65.9, 558.0], [66.0, 574.0], [66.1, 574.0], [66.2, 574.0], [66.3, 574.0], [66.4, 575.0], [66.5, 575.0], [66.6, 575.0], [66.7, 575.0], [66.8, 577.0], [66.9, 577.0], [67.0, 577.0], [67.1, 577.0], [67.2, 577.0], [67.3, 577.0], [67.4, 577.0], [67.5, 577.0], [67.6, 581.0], [67.7, 581.0], [67.8, 581.0], [67.9, 581.0], [68.0, 582.0], [68.1, 582.0], [68.2, 582.0], [68.3, 582.0], [68.4, 585.0], [68.5, 585.0], [68.6, 585.0], [68.7, 585.0], [68.8, 590.0], [68.9, 590.0], [69.0, 590.0], [69.1, 590.0], [69.2, 602.0], [69.3, 602.0], [69.4, 602.0], [69.5, 602.0], [69.6, 615.0], [69.7, 615.0], [69.8, 615.0], [69.9, 615.0], [70.0, 625.0], [70.1, 625.0], [70.2, 625.0], [70.3, 625.0], [70.4, 630.0], [70.5, 630.0], [70.6, 630.0], [70.7, 630.0], [70.8, 632.0], [70.9, 632.0], [71.0, 632.0], [71.1, 632.0], [71.2, 634.0], [71.3, 634.0], [71.4, 634.0], [71.5, 634.0], [71.6, 637.0], [71.7, 637.0], [71.8, 637.0], [71.9, 637.0], [72.0, 643.0], [72.1, 643.0], [72.2, 643.0], [72.3, 643.0], [72.4, 644.0], [72.5, 644.0], [72.6, 644.0], [72.7, 644.0], [72.8, 670.0], [72.9, 670.0], [73.0, 670.0], [73.1, 670.0], [73.2, 676.0], [73.3, 676.0], [73.4, 676.0], [73.5, 676.0], [73.6, 693.0], [73.7, 693.0], [73.8, 693.0], [73.9, 693.0], [74.0, 702.0], [74.1, 702.0], [74.2, 702.0], [74.3, 702.0], [74.4, 736.0], [74.5, 736.0], [74.6, 736.0], [74.7, 736.0], [74.8, 755.0], [74.9, 755.0], [75.0, 755.0], [75.1, 755.0], [75.2, 761.0], [75.3, 761.0], [75.4, 761.0], [75.5, 761.0], [75.6, 761.0], [75.7, 771.0], [75.8, 771.0], [75.9, 771.0], [76.0, 771.0], [76.1, 778.0], [76.2, 778.0], [76.3, 778.0], [76.4, 778.0], [76.5, 787.0], [76.6, 787.0], [76.7, 787.0], [76.8, 787.0], [76.9, 792.0], [77.0, 792.0], [77.1, 792.0], [77.2, 792.0], [77.3, 801.0], [77.4, 801.0], [77.5, 801.0], [77.6, 801.0], [77.7, 805.0], [77.8, 805.0], [77.9, 805.0], [78.0, 805.0], [78.1, 818.0], [78.2, 818.0], [78.3, 818.0], [78.4, 818.0], [78.5, 848.0], [78.6, 848.0], [78.7, 848.0], [78.8, 848.0], [78.9, 854.0], [79.0, 854.0], [79.1, 854.0], [79.2, 854.0], [79.3, 860.0], [79.4, 860.0], [79.5, 860.0], [79.6, 860.0], [79.7, 869.0], [79.8, 869.0], [79.9, 869.0], [80.0, 869.0], [80.1, 879.0], [80.2, 879.0], [80.3, 879.0], [80.4, 879.0], [80.5, 883.0], [80.6, 883.0], [80.7, 883.0], [80.8, 883.0], [80.9, 896.0], [81.0, 896.0], [81.1, 896.0], [81.2, 896.0], [81.3, 913.0], [81.4, 913.0], [81.5, 913.0], [81.6, 913.0], [81.7, 923.0], [81.8, 923.0], [81.9, 923.0], [82.0, 923.0], [82.1, 939.0], [82.2, 939.0], [82.3, 939.0], [82.4, 939.0], [82.5, 948.0], [82.6, 948.0], [82.7, 948.0], [82.8, 948.0], [82.9, 949.0], [83.0, 949.0], [83.1, 949.0], [83.2, 949.0], [83.3, 950.0], [83.4, 950.0], [83.5, 950.0], [83.6, 950.0], [83.7, 956.0], [83.8, 956.0], [83.9, 956.0], [84.0, 956.0], [84.1, 972.0], [84.2, 972.0], [84.3, 972.0], [84.4, 972.0], [84.5, 991.0], [84.6, 991.0], [84.7, 991.0], [84.8, 991.0], [84.9, 991.0], [85.0, 991.0], [85.1, 991.0], [85.2, 991.0], [85.3, 1007.0], [85.4, 1007.0], [85.5, 1007.0], [85.6, 1007.0], [85.7, 1007.0], [85.8, 1007.0], [85.9, 1007.0], [86.0, 1007.0], [86.1, 1019.0], [86.2, 1019.0], [86.3, 1019.0], [86.4, 1019.0], [86.5, 1028.0], [86.6, 1028.0], [86.7, 1028.0], [86.8, 1028.0], [86.9, 1045.0], [87.0, 1045.0], [87.1, 1045.0], [87.2, 1045.0], [87.3, 1076.0], [87.4, 1076.0], [87.5, 1076.0], [87.6, 1076.0], [87.7, 1104.0], [87.8, 1104.0], [87.9, 1104.0], [88.0, 1104.0], [88.1, 1123.0], [88.2, 1123.0], [88.3, 1123.0], [88.4, 1123.0], [88.5, 1141.0], [88.6, 1141.0], [88.7, 1141.0], [88.8, 1141.0], [88.9, 1165.0], [89.0, 1165.0], [89.1, 1165.0], [89.2, 1165.0], [89.3, 1184.0], [89.4, 1184.0], [89.5, 1184.0], [89.6, 1184.0], [89.7, 1206.0], [89.8, 1206.0], [89.9, 1206.0], [90.0, 1206.0], [90.1, 1233.0], [90.2, 1233.0], [90.3, 1233.0], [90.4, 1233.0], [90.5, 1238.0], [90.6, 1238.0], [90.7, 1238.0], [90.8, 1238.0], [90.9, 1253.0], [91.0, 1253.0], [91.1, 1253.0], [91.2, 1253.0], [91.3, 1265.0], [91.4, 1265.0], [91.5, 1265.0], [91.6, 1265.0], [91.7, 1266.0], [91.8, 1266.0], [91.9, 1266.0], [92.0, 1266.0], [92.1, 1286.0], [92.2, 1286.0], [92.3, 1286.0], [92.4, 1286.0], [92.5, 1305.0], [92.6, 1305.0], [92.7, 1305.0], [92.8, 1305.0], [92.9, 1351.0], [93.0, 1351.0], [93.1, 1351.0], [93.2, 1351.0], [93.3, 1365.0], [93.4, 1365.0], [93.5, 1365.0], [93.6, 1365.0], [93.7, 1463.0], [93.8, 1463.0], [93.9, 1463.0], [94.0, 1463.0], [94.1, 1537.0], [94.2, 1537.0], [94.3, 1537.0], [94.4, 1537.0], [94.5, 1628.0], [94.6, 1628.0], [94.7, 1628.0], [94.8, 1628.0], [94.9, 1647.0], [95.0, 1647.0], [95.1, 1647.0], [95.2, 1647.0], [95.3, 1713.0], [95.4, 1713.0], [95.5, 1713.0], [95.6, 1713.0], [95.7, 2285.0], [95.8, 2285.0], [95.9, 2285.0], [96.0, 2285.0], [96.1, 2470.0], [96.2, 2470.0], [96.3, 2470.0], [96.4, 2470.0], [96.5, 2474.0], [96.6, 2474.0], [96.7, 2474.0], [96.8, 2474.0], [96.9, 2495.0], [97.0, 2495.0], [97.1, 2495.0], [97.2, 2495.0], [97.3, 2712.0], [97.4, 2712.0], [97.5, 2712.0], [97.6, 2712.0], [97.7, 2717.0], [97.8, 2717.0], [97.9, 2717.0], [98.0, 2717.0], [98.1, 2808.0], [98.2, 2808.0], [98.3, 2808.0], [98.4, 2808.0], [98.5, 2856.0], [98.6, 2856.0], [98.7, 2856.0], [98.8, 2856.0], [98.9, 2968.0], [99.0, 2968.0], [99.1, 2968.0], [99.2, 2968.0], [99.3, 3204.0], [99.4, 3204.0], [99.5, 3204.0], [99.6, 3204.0], [99.7, 3255.0], [99.8, 3255.0], [99.9, 3255.0], [100.0, 3255.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 62.0, "series": [{"data": [[600.0, 14.0], [700.0, 16.0], [800.0, 11.0], [900.0, 8.0], [1000.0, 6.0], [1100.0, 7.0], [1200.0, 7.0], [1300.0, 10.0], [1400.0, 5.0], [1500.0, 3.0], [1600.0, 3.0], [100.0, 47.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 2.0], [2500.0, 1.0], [2700.0, 2.0], [3100.0, 1.0], [200.0, 41.0], [3300.0, 1.0], [3200.0, 1.0], [300.0, 22.0], [400.0, 18.0], [500.0, 14.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[2100.0, 1.0], [600.0, 21.0], [2400.0, 1.0], [2500.0, 2.0], [700.0, 22.0], [3000.0, 1.0], [200.0, 36.0], [800.0, 8.0], [3200.0, 1.0], [3300.0, 2.0], [900.0, 13.0], [1000.0, 4.0], [1100.0, 4.0], [300.0, 22.0], [1200.0, 5.0], [1300.0, 1.0], [1400.0, 5.0], [1500.0, 2.0], [100.0, 62.0], [400.0, 12.0], [1600.0, 1.0], [500.0, 24.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 12.0], [2400.0, 3.0], [700.0, 8.0], [2700.0, 2.0], [2800.0, 2.0], [2900.0, 1.0], [200.0, 45.0], [800.0, 10.0], [3200.0, 2.0], [900.0, 10.0], [1000.0, 6.0], [1100.0, 5.0], [300.0, 26.0], [1200.0, 7.0], [1300.0, 3.0], [1400.0, 1.0], [1500.0, 1.0], [400.0, 20.0], [100.0, 62.0], [1600.0, 2.0], [1700.0, 1.0], [500.0, 20.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 414.0, "series": [{"data": [[0.0, 414.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 286.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 50.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 36.09929078014185, "minX": 1.72793472E12, "maxY": 48.61324786324791, "series": [{"data": [[1.72793478E12, 36.09929078014185], [1.72793472E12, 48.61324786324791]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793478E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 141.0, "minX": 1.0, "maxY": 3368.5, "series": [{"data": [[32.0, 566.0], [36.0, 455.75], [37.0, 484.0], [39.0, 424.6], [38.0, 547.75], [41.0, 427.49999999999994], [40.0, 743.8181818181819], [43.0, 502.29166666666674], [42.0, 527.0909090909092], [44.0, 497.53333333333336], [45.0, 600.7058823529412], [46.0, 847.0], [47.0, 512.8333333333333], [48.0, 397.0], [49.0, 1373.7142857142856], [50.0, 195.66666666666666], [51.0, 779.5], [52.0, 713.0], [53.0, 1059.0], [54.0, 675.2857142857142], [55.0, 707.5], [57.0, 1040.1538461538462], [56.0, 854.8571428571429], [58.0, 934.9999999999999], [59.0, 1661.6], [7.0, 3278.0], [9.0, 3344.0], [18.0, 3142.0], [29.0, 769.0], [30.0, 784.0], [31.0, 1049.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[45.507999999999996, 701.4439999999997]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[32.0, 506.0], [37.0, 362.0], [38.0, 549.6666666666667], [39.0, 233.0], [41.0, 805.2352941176471], [40.0, 320.6666666666667], [43.0, 542.3043478260869], [42.0, 538.1923076923076], [45.0, 632.2352941176471], [44.0, 633.5263157894738], [47.0, 527.8], [46.0, 552.8333333333334], [49.0, 341.0], [48.0, 589.0], [3.0, 934.0], [51.0, 435.2], [50.0, 969.0], [53.0, 888.0], [52.0, 185.0], [54.0, 379.14285714285717], [55.0, 654.5714285714286], [57.0, 485.7], [56.0, 359.2857142857143], [58.0, 523.8888888888889], [59.0, 489.42857142857144], [4.0, 3091.0], [5.0, 330.0], [7.0, 3368.5], [9.0, 3270.0], [13.0, 865.0], [15.0, 204.0], [16.0, 577.0], [17.0, 502.0], [22.0, 919.0], [24.0, 310.0], [28.0, 918.0], [30.0, 448.5], [31.0, 450.33333333333337]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[44.07199999999999, 580.352]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 625.0], [3.0, 2474.0], [4.0, 383.0], [5.0, 376.0], [6.0, 146.0], [7.0, 1628.0], [8.0, 145.0], [9.0, 676.0], [10.0, 3255.0], [11.0, 200.0], [12.0, 3204.0], [13.0, 702.0], [14.0, 165.0], [15.0, 272.0], [16.0, 972.0], [17.0, 736.0], [18.0, 245.0], [19.0, 187.0], [20.0, 475.0], [21.0, 2968.0], [22.0, 246.0], [23.0, 225.0], [24.0, 585.0], [25.0, 397.0], [26.0, 2856.0], [27.0, 223.0], [28.0, 291.0], [29.0, 366.0], [30.0, 141.0], [31.0, 343.0], [32.0, 1019.0], [35.0, 1141.0], [34.0, 549.0], [37.0, 313.0], [36.0, 526.0], [39.0, 765.4], [38.0, 267.0], [41.0, 569.8823529411766], [40.0, 320.8333333333333], [43.0, 542.4074074074074], [42.0, 464.88888888888886], [45.0, 559.2272727272726], [44.0, 702.375], [47.0, 459.375], [46.0, 661.4285714285714], [49.0, 731.25], [48.0, 620.8333333333334], [51.0, 345.6666666666667], [50.0, 543.75], [53.0, 991.0], [52.0, 941.3333333333334], [55.0, 530.5], [54.0, 400.3333333333333], [57.0, 290.09090909090907], [56.0, 382.57142857142856], [58.0, 416.875], [59.0, 241.33333333333334], [60.0, 333.0], [1.0, 2808.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[42.144, 583.1999999999999]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2107.016666666667, "minX": 1.72793472E12, "maxY": 52046.05, "series": [{"data": [[1.72793478E12, 30787.416666666668], [1.72793472E12, 52046.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72793478E12, 2107.016666666667], [1.72793472E12, 3401.3166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793478E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 497.1935483870966, "minX": 1.72793472E12, "maxY": 747.617647058823, "series": [{"data": [[1.72793478E12, 603.325], [1.72793472E12, 747.617647058823]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793478E12, 716.0315789473686], [1.72793472E12, 497.1935483870966]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793478E12, 620.1121495327101], [1.72793472E12, 555.5804195804192]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793478E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 495.8322580645163, "minX": 1.72793472E12, "maxY": 745.8764705882356, "series": [{"data": [[1.72793478E12, 601.625], [1.72793472E12, 745.8764705882356]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793478E12, 714.5473684210525], [1.72793472E12, 495.8322580645163]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793478E12, 619.5046728971963], [1.72793472E12, 554.9090909090908]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793478E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72793472E12, "maxY": 193.52941176470588, "series": [{"data": [[1.72793478E12, 18.0], [1.72793472E12, 193.52941176470588]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793478E12, 0.0], [1.72793472E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793478E12, 0.0], [1.72793472E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793478E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 129.0, "minX": 1.72793472E12, "maxY": 3371.0, "series": [{"data": [[1.72793478E12, 3371.0], [1.72793472E12, 2769.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72793478E12, 1427.2000000000007], [1.72793472E12, 1267.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72793478E12, 3347.7400000000002], [1.72793472E12, 2262.92]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72793478E12, 2716.25], [1.72793472E12, 1590.199999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72793478E12, 140.0], [1.72793472E12, 129.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72793478E12, 363.5], [1.72793472E12, 465.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793478E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 275.0, "minX": 1.0, "maxY": 1716.5, "series": [{"data": [[43.0, 502.0], [46.0, 736.0], [15.0, 1628.0], [1.0, 1716.5], [68.0, 275.0], [74.0, 482.5], [75.0, 342.0], [72.0, 326.5], [77.0, 434.0], [86.0, 518.0], [84.0, 489.5], [101.0, 465.0], [7.0, 383.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 274.5, "minX": 1.0, "maxY": 1716.0, "series": [{"data": [[43.0, 499.0], [46.0, 735.0], [15.0, 1627.0], [1.0, 1716.0], [68.0, 274.5], [74.0, 482.0], [75.0, 341.0], [72.0, 326.5], [77.0, 432.0], [86.0, 518.0], [84.0, 489.0], [101.0, 465.0], [7.0, 383.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72793472E12, "maxY": 8.466666666666667, "series": [{"data": [[1.72793478E12, 4.033333333333333], [1.72793472E12, 8.466666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793478E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.7, "minX": 1.72793472E12, "maxY": 7.8, "series": [{"data": [[1.72793478E12, 4.7], [1.72793472E12, 7.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793478E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.72793472E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.72793478E12, 1.5833333333333333], [1.72793472E12, 2.5833333333333335]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.72793478E12, 1.7833333333333334], [1.72793472E12, 2.3833333333333333]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.72793478E12, 1.3333333333333333], [1.72793472E12, 2.8333333333333335]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793478E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.7, "minX": 1.72793472E12, "maxY": 7.8, "series": [{"data": [[1.72793478E12, 4.7], [1.72793472E12, 7.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793478E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

