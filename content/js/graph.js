/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "maxY": 2006.0, "series": [{"data": [[0.0, 163.0], [0.1, 163.0], [0.2, 163.0], [0.3, 163.0], [0.4, 166.0], [0.5, 166.0], [0.6, 166.0], [0.7, 166.0], [0.8, 168.0], [0.9, 168.0], [1.0, 168.0], [1.1, 168.0], [1.2, 168.0], [1.3, 170.0], [1.4, 170.0], [1.5, 170.0], [1.6, 172.0], [1.7, 172.0], [1.8, 172.0], [1.9, 172.0], [2.0, 178.0], [2.1, 178.0], [2.2, 178.0], [2.3, 178.0], [2.4, 178.0], [2.5, 178.0], [2.6, 178.0], [2.7, 178.0], [2.8, 180.0], [2.9, 180.0], [3.0, 180.0], [3.1, 180.0], [3.2, 182.0], [3.3, 182.0], [3.4, 182.0], [3.5, 182.0], [3.6, 184.0], [3.7, 184.0], [3.8, 184.0], [3.9, 184.0], [4.0, 187.0], [4.1, 187.0], [4.2, 187.0], [4.3, 187.0], [4.4, 191.0], [4.5, 191.0], [4.6, 191.0], [4.7, 191.0], [4.8, 192.0], [4.9, 192.0], [5.0, 192.0], [5.1, 192.0], [5.2, 192.0], [5.3, 192.0], [5.4, 192.0], [5.5, 192.0], [5.6, 194.0], [5.7, 194.0], [5.8, 194.0], [5.9, 194.0], [6.0, 201.0], [6.1, 201.0], [6.2, 201.0], [6.3, 201.0], [6.4, 203.0], [6.5, 203.0], [6.6, 203.0], [6.7, 203.0], [6.8, 203.0], [6.9, 204.0], [7.0, 204.0], [7.1, 204.0], [7.2, 204.0], [7.3, 207.0], [7.4, 207.0], [7.5, 207.0], [7.6, 207.0], [7.7, 209.0], [7.8, 209.0], [7.9, 209.0], [8.0, 209.0], [8.1, 210.0], [8.2, 210.0], [8.3, 210.0], [8.4, 210.0], [8.5, 215.0], [8.6, 215.0], [8.7, 215.0], [8.8, 215.0], [8.9, 216.0], [9.0, 216.0], [9.1, 216.0], [9.2, 216.0], [9.3, 216.0], [9.4, 216.0], [9.5, 216.0], [9.6, 216.0], [9.7, 218.0], [9.8, 218.0], [9.9, 218.0], [10.0, 218.0], [10.1, 218.0], [10.2, 218.0], [10.3, 218.0], [10.4, 218.0], [10.5, 221.0], [10.6, 221.0], [10.7, 221.0], [10.8, 221.0], [10.9, 226.0], [11.0, 226.0], [11.1, 226.0], [11.2, 226.0], [11.3, 228.0], [11.4, 228.0], [11.5, 228.0], [11.6, 228.0], [11.7, 229.0], [11.8, 229.0], [11.9, 229.0], [12.0, 229.0], [12.1, 230.0], [12.2, 230.0], [12.3, 230.0], [12.4, 230.0], [12.5, 231.0], [12.6, 231.0], [12.7, 231.0], [12.8, 231.0], [12.9, 232.0], [13.0, 232.0], [13.1, 232.0], [13.2, 232.0], [13.3, 232.0], [13.4, 232.0], [13.5, 232.0], [13.6, 232.0], [13.7, 236.0], [13.8, 236.0], [13.9, 236.0], [14.0, 236.0], [14.1, 241.0], [14.2, 241.0], [14.3, 241.0], [14.4, 241.0], [14.5, 242.0], [14.6, 242.0], [14.7, 242.0], [14.8, 242.0], [14.9, 243.0], [15.0, 243.0], [15.1, 243.0], [15.2, 243.0], [15.3, 248.0], [15.4, 248.0], [15.5, 248.0], [15.6, 248.0], [15.7, 250.0], [15.8, 250.0], [15.9, 250.0], [16.0, 250.0], [16.1, 253.0], [16.2, 253.0], [16.3, 253.0], [16.4, 253.0], [16.5, 262.0], [16.6, 262.0], [16.7, 262.0], [16.8, 262.0], [16.9, 267.0], [17.0, 267.0], [17.1, 267.0], [17.2, 267.0], [17.3, 269.0], [17.4, 269.0], [17.5, 269.0], [17.6, 270.0], [17.7, 270.0], [17.8, 270.0], [17.9, 270.0], [18.0, 277.0], [18.1, 277.0], [18.2, 277.0], [18.3, 277.0], [18.4, 279.0], [18.5, 279.0], [18.6, 279.0], [18.7, 279.0], [18.8, 282.0], [18.9, 282.0], [19.0, 282.0], [19.1, 282.0], [19.2, 282.0], [19.3, 282.0], [19.4, 282.0], [19.5, 282.0], [19.6, 283.0], [19.7, 283.0], [19.8, 283.0], [19.9, 283.0], [20.0, 299.0], [20.1, 299.0], [20.2, 299.0], [20.3, 299.0], [20.4, 300.0], [20.5, 300.0], [20.6, 300.0], [20.7, 300.0], [20.8, 303.0], [20.9, 303.0], [21.0, 303.0], [21.1, 303.0], [21.2, 315.0], [21.3, 315.0], [21.4, 315.0], [21.5, 315.0], [21.6, 316.0], [21.7, 316.0], [21.8, 316.0], [21.9, 316.0], [22.0, 319.0], [22.1, 319.0], [22.2, 319.0], [22.3, 319.0], [22.4, 320.0], [22.5, 320.0], [22.6, 320.0], [22.7, 320.0], [22.8, 322.0], [22.9, 322.0], [23.0, 322.0], [23.1, 322.0], [23.2, 326.0], [23.3, 326.0], [23.4, 326.0], [23.5, 326.0], [23.6, 328.0], [23.7, 328.0], [23.8, 328.0], [23.9, 328.0], [24.0, 329.0], [24.1, 329.0], [24.2, 329.0], [24.3, 329.0], [24.4, 332.0], [24.5, 332.0], [24.6, 332.0], [24.7, 332.0], [24.8, 337.0], [24.9, 337.0], [25.0, 337.0], [25.1, 337.0], [25.2, 342.0], [25.3, 342.0], [25.4, 342.0], [25.5, 342.0], [25.6, 345.0], [25.7, 345.0], [25.8, 345.0], [25.9, 345.0], [26.0, 346.0], [26.1, 346.0], [26.2, 346.0], [26.3, 346.0], [26.4, 354.0], [26.5, 354.0], [26.6, 354.0], [26.7, 354.0], [26.8, 354.0], [26.9, 354.0], [27.0, 354.0], [27.1, 354.0], [27.2, 361.0], [27.3, 361.0], [27.4, 361.0], [27.5, 361.0], [27.6, 363.0], [27.7, 363.0], [27.8, 363.0], [27.9, 363.0], [28.0, 375.0], [28.1, 375.0], [28.2, 375.0], [28.3, 375.0], [28.4, 380.0], [28.5, 380.0], [28.6, 380.0], [28.7, 380.0], [28.8, 384.0], [28.9, 384.0], [29.0, 384.0], [29.1, 384.0], [29.2, 384.0], [29.3, 384.0], [29.4, 384.0], [29.5, 384.0], [29.6, 386.0], [29.7, 386.0], [29.8, 386.0], [29.9, 386.0], [30.0, 386.0], [30.1, 386.0], [30.2, 386.0], [30.3, 386.0], [30.4, 387.0], [30.5, 387.0], [30.6, 387.0], [30.7, 387.0], [30.8, 388.0], [30.9, 388.0], [31.0, 388.0], [31.1, 388.0], [31.2, 397.0], [31.3, 397.0], [31.4, 397.0], [31.5, 397.0], [31.6, 405.0], [31.7, 405.0], [31.8, 405.0], [31.9, 405.0], [32.0, 406.0], [32.1, 406.0], [32.2, 406.0], [32.3, 406.0], [32.4, 407.0], [32.5, 407.0], [32.6, 407.0], [32.7, 407.0], [32.8, 428.0], [32.9, 428.0], [33.0, 428.0], [33.1, 428.0], [33.2, 430.0], [33.3, 430.0], [33.4, 430.0], [33.5, 430.0], [33.6, 431.0], [33.7, 431.0], [33.8, 431.0], [33.9, 431.0], [34.0, 434.0], [34.1, 434.0], [34.2, 434.0], [34.3, 434.0], [34.4, 434.0], [34.5, 434.0], [34.6, 434.0], [34.7, 434.0], [34.8, 435.0], [34.9, 435.0], [35.0, 435.0], [35.1, 435.0], [35.2, 443.0], [35.3, 443.0], [35.4, 443.0], [35.5, 443.0], [35.6, 445.0], [35.7, 445.0], [35.8, 445.0], [35.9, 445.0], [36.0, 447.0], [36.1, 447.0], [36.2, 447.0], [36.3, 447.0], [36.4, 448.0], [36.5, 448.0], [36.6, 448.0], [36.7, 448.0], [36.8, 449.0], [36.9, 449.0], [37.0, 449.0], [37.1, 449.0], [37.2, 449.0], [37.3, 449.0], [37.4, 449.0], [37.5, 449.0], [37.6, 449.0], [37.7, 449.0], [37.8, 449.0], [37.9, 449.0], [38.0, 454.0], [38.1, 454.0], [38.2, 454.0], [38.3, 454.0], [38.4, 455.0], [38.5, 455.0], [38.6, 455.0], [38.7, 455.0], [38.8, 456.0], [38.9, 456.0], [39.0, 456.0], [39.1, 456.0], [39.2, 459.0], [39.3, 459.0], [39.4, 459.0], [39.5, 459.0], [39.6, 460.0], [39.7, 460.0], [39.8, 460.0], [39.9, 460.0], [40.0, 463.0], [40.1, 463.0], [40.2, 463.0], [40.3, 463.0], [40.4, 465.0], [40.5, 465.0], [40.6, 465.0], [40.7, 465.0], [40.8, 467.0], [40.9, 467.0], [41.0, 467.0], [41.1, 467.0], [41.2, 471.0], [41.3, 471.0], [41.4, 471.0], [41.5, 471.0], [41.6, 476.0], [41.7, 476.0], [41.8, 476.0], [41.9, 476.0], [42.0, 482.0], [42.1, 482.0], [42.2, 482.0], [42.3, 482.0], [42.4, 482.0], [42.5, 482.0], [42.6, 482.0], [42.7, 482.0], [42.8, 482.0], [42.9, 482.0], [43.0, 482.0], [43.1, 482.0], [43.2, 485.0], [43.3, 485.0], [43.4, 485.0], [43.5, 485.0], [43.6, 488.0], [43.7, 488.0], [43.8, 488.0], [43.9, 488.0], [44.0, 490.0], [44.1, 490.0], [44.2, 490.0], [44.3, 490.0], [44.4, 492.0], [44.5, 492.0], [44.6, 492.0], [44.7, 492.0], [44.8, 503.0], [44.9, 503.0], [45.0, 503.0], [45.1, 503.0], [45.2, 524.0], [45.3, 524.0], [45.4, 524.0], [45.5, 524.0], [45.6, 531.0], [45.7, 531.0], [45.8, 531.0], [45.9, 531.0], [46.0, 532.0], [46.1, 532.0], [46.2, 532.0], [46.3, 532.0], [46.4, 538.0], [46.5, 538.0], [46.6, 538.0], [46.7, 538.0], [46.8, 558.0], [46.9, 558.0], [47.0, 558.0], [47.1, 558.0], [47.2, 562.0], [47.3, 562.0], [47.4, 562.0], [47.5, 562.0], [47.6, 576.0], [47.7, 576.0], [47.8, 576.0], [47.9, 576.0], [48.0, 580.0], [48.1, 580.0], [48.2, 580.0], [48.3, 580.0], [48.4, 598.0], [48.5, 598.0], [48.6, 598.0], [48.7, 598.0], [48.8, 608.0], [48.9, 608.0], [49.0, 608.0], [49.1, 608.0], [49.2, 610.0], [49.3, 610.0], [49.4, 610.0], [49.5, 610.0], [49.6, 617.0], [49.7, 617.0], [49.8, 617.0], [49.9, 617.0], [50.0, 619.0], [50.1, 619.0], [50.2, 619.0], [50.3, 619.0], [50.4, 626.0], [50.5, 626.0], [50.6, 626.0], [50.7, 626.0], [50.8, 629.0], [50.9, 629.0], [51.0, 629.0], [51.1, 629.0], [51.2, 633.0], [51.3, 633.0], [51.4, 633.0], [51.5, 633.0], [51.6, 633.0], [51.7, 633.0], [51.8, 633.0], [51.9, 633.0], [52.0, 634.0], [52.1, 634.0], [52.2, 634.0], [52.3, 634.0], [52.4, 637.0], [52.5, 637.0], [52.6, 637.0], [52.7, 637.0], [52.8, 641.0], [52.9, 641.0], [53.0, 641.0], [53.1, 641.0], [53.2, 653.0], [53.3, 653.0], [53.4, 653.0], [53.5, 653.0], [53.6, 658.0], [53.7, 658.0], [53.8, 658.0], [53.9, 658.0], [54.0, 662.0], [54.1, 662.0], [54.2, 662.0], [54.3, 662.0], [54.4, 664.0], [54.5, 664.0], [54.6, 664.0], [54.7, 664.0], [54.8, 666.0], [54.9, 666.0], [55.0, 666.0], [55.1, 666.0], [55.2, 667.0], [55.3, 667.0], [55.4, 667.0], [55.5, 667.0], [55.6, 669.0], [55.7, 669.0], [55.8, 669.0], [55.9, 669.0], [56.0, 669.0], [56.1, 669.0], [56.2, 669.0], [56.3, 669.0], [56.4, 673.0], [56.5, 673.0], [56.6, 673.0], [56.7, 673.0], [56.8, 677.0], [56.9, 677.0], [57.0, 677.0], [57.1, 677.0], [57.2, 680.0], [57.3, 680.0], [57.4, 680.0], [57.5, 680.0], [57.6, 688.0], [57.7, 688.0], [57.8, 688.0], [57.9, 688.0], [58.0, 689.0], [58.1, 689.0], [58.2, 689.0], [58.3, 689.0], [58.4, 690.0], [58.5, 690.0], [58.6, 690.0], [58.7, 690.0], [58.8, 691.0], [58.9, 691.0], [59.0, 691.0], [59.1, 691.0], [59.2, 692.0], [59.3, 692.0], [59.4, 692.0], [59.5, 692.0], [59.6, 697.0], [59.7, 697.0], [59.8, 697.0], [59.9, 697.0], [60.0, 697.0], [60.1, 697.0], [60.2, 697.0], [60.3, 697.0], [60.4, 699.0], [60.5, 699.0], [60.6, 699.0], [60.7, 699.0], [60.8, 700.0], [60.9, 700.0], [61.0, 700.0], [61.1, 700.0], [61.2, 708.0], [61.3, 708.0], [61.4, 708.0], [61.5, 708.0], [61.6, 710.0], [61.7, 710.0], [61.8, 710.0], [61.9, 710.0], [62.0, 712.0], [62.1, 712.0], [62.2, 712.0], [62.3, 712.0], [62.4, 720.0], [62.5, 720.0], [62.6, 720.0], [62.7, 720.0], [62.8, 723.0], [62.9, 723.0], [63.0, 723.0], [63.1, 723.0], [63.2, 725.0], [63.3, 725.0], [63.4, 725.0], [63.5, 725.0], [63.6, 736.0], [63.7, 736.0], [63.8, 736.0], [63.9, 736.0], [64.0, 746.0], [64.1, 746.0], [64.2, 746.0], [64.3, 746.0], [64.4, 750.0], [64.5, 750.0], [64.6, 750.0], [64.7, 750.0], [64.8, 757.0], [64.9, 757.0], [65.0, 757.0], [65.1, 757.0], [65.2, 764.0], [65.3, 764.0], [65.4, 764.0], [65.5, 764.0], [65.6, 776.0], [65.7, 776.0], [65.8, 776.0], [65.9, 776.0], [66.0, 780.0], [66.1, 780.0], [66.2, 780.0], [66.3, 780.0], [66.4, 783.0], [66.5, 783.0], [66.6, 783.0], [66.7, 783.0], [66.8, 783.0], [66.9, 783.0], [67.0, 783.0], [67.1, 783.0], [67.2, 785.0], [67.3, 785.0], [67.4, 785.0], [67.5, 785.0], [67.6, 791.0], [67.7, 791.0], [67.8, 791.0], [67.9, 791.0], [68.0, 793.0], [68.1, 793.0], [68.2, 793.0], [68.3, 793.0], [68.4, 798.0], [68.5, 798.0], [68.6, 798.0], [68.7, 798.0], [68.8, 806.0], [68.9, 806.0], [69.0, 806.0], [69.1, 806.0], [69.2, 821.0], [69.3, 821.0], [69.4, 821.0], [69.5, 821.0], [69.6, 821.0], [69.7, 821.0], [69.8, 821.0], [69.9, 821.0], [70.0, 823.0], [70.1, 823.0], [70.2, 823.0], [70.3, 823.0], [70.4, 824.0], [70.5, 824.0], [70.6, 824.0], [70.7, 824.0], [70.8, 830.0], [70.9, 830.0], [71.0, 830.0], [71.1, 830.0], [71.2, 837.0], [71.3, 837.0], [71.4, 837.0], [71.5, 837.0], [71.6, 840.0], [71.7, 840.0], [71.8, 840.0], [71.9, 840.0], [72.0, 841.0], [72.1, 841.0], [72.2, 841.0], [72.3, 841.0], [72.4, 848.0], [72.5, 848.0], [72.6, 848.0], [72.7, 848.0], [72.8, 866.0], [72.9, 866.0], [73.0, 866.0], [73.1, 866.0], [73.2, 867.0], [73.3, 867.0], [73.4, 867.0], [73.5, 867.0], [73.6, 871.0], [73.7, 871.0], [73.8, 871.0], [73.9, 871.0], [74.0, 872.0], [74.1, 872.0], [74.2, 872.0], [74.3, 872.0], [74.4, 885.0], [74.5, 885.0], [74.6, 885.0], [74.7, 885.0], [74.8, 886.0], [74.9, 886.0], [75.0, 886.0], [75.1, 886.0], [75.2, 890.0], [75.3, 890.0], [75.4, 890.0], [75.5, 890.0], [75.6, 897.0], [75.7, 897.0], [75.8, 897.0], [75.9, 897.0], [76.0, 903.0], [76.1, 903.0], [76.2, 903.0], [76.3, 903.0], [76.4, 915.0], [76.5, 915.0], [76.6, 915.0], [76.7, 915.0], [76.8, 915.0], [76.9, 925.0], [77.0, 925.0], [77.1, 925.0], [77.2, 925.0], [77.3, 934.0], [77.4, 934.0], [77.5, 934.0], [77.6, 934.0], [77.7, 935.0], [77.8, 935.0], [77.9, 935.0], [78.0, 935.0], [78.1, 941.0], [78.2, 941.0], [78.3, 941.0], [78.4, 941.0], [78.5, 942.0], [78.6, 942.0], [78.7, 942.0], [78.8, 942.0], [78.9, 949.0], [79.0, 949.0], [79.1, 949.0], [79.2, 949.0], [79.3, 991.0], [79.4, 991.0], [79.5, 991.0], [79.6, 991.0], [79.7, 1007.0], [79.8, 1007.0], [79.9, 1007.0], [80.0, 1007.0], [80.1, 1021.0], [80.2, 1021.0], [80.3, 1021.0], [80.4, 1021.0], [80.5, 1036.0], [80.6, 1036.0], [80.7, 1036.0], [80.8, 1036.0], [80.9, 1045.0], [81.0, 1045.0], [81.1, 1045.0], [81.2, 1045.0], [81.3, 1061.0], [81.4, 1061.0], [81.5, 1061.0], [81.6, 1061.0], [81.7, 1063.0], [81.8, 1063.0], [81.9, 1063.0], [82.0, 1063.0], [82.1, 1064.0], [82.2, 1064.0], [82.3, 1064.0], [82.4, 1064.0], [82.5, 1104.0], [82.6, 1104.0], [82.7, 1104.0], [82.8, 1104.0], [82.9, 1104.0], [83.0, 1104.0], [83.1, 1104.0], [83.2, 1104.0], [83.3, 1112.0], [83.4, 1112.0], [83.5, 1112.0], [83.6, 1112.0], [83.7, 1125.0], [83.8, 1125.0], [83.9, 1125.0], [84.0, 1125.0], [84.1, 1136.0], [84.2, 1136.0], [84.3, 1136.0], [84.4, 1136.0], [84.5, 1146.0], [84.6, 1146.0], [84.7, 1146.0], [84.8, 1146.0], [84.9, 1154.0], [85.0, 1154.0], [85.1, 1154.0], [85.2, 1154.0], [85.3, 1172.0], [85.4, 1172.0], [85.5, 1172.0], [85.6, 1172.0], [85.7, 1196.0], [85.8, 1196.0], [85.9, 1196.0], [86.0, 1196.0], [86.1, 1213.0], [86.2, 1213.0], [86.3, 1213.0], [86.4, 1213.0], [86.5, 1216.0], [86.6, 1216.0], [86.7, 1216.0], [86.8, 1216.0], [86.9, 1235.0], [87.0, 1235.0], [87.1, 1235.0], [87.2, 1235.0], [87.3, 1237.0], [87.4, 1237.0], [87.5, 1237.0], [87.6, 1237.0], [87.7, 1240.0], [87.8, 1240.0], [87.9, 1240.0], [88.0, 1240.0], [88.1, 1254.0], [88.2, 1254.0], [88.3, 1254.0], [88.4, 1254.0], [88.5, 1272.0], [88.6, 1272.0], [88.7, 1272.0], [88.8, 1272.0], [88.9, 1281.0], [89.0, 1281.0], [89.1, 1281.0], [89.2, 1281.0], [89.3, 1289.0], [89.4, 1289.0], [89.5, 1289.0], [89.6, 1289.0], [89.7, 1291.0], [89.8, 1291.0], [89.9, 1291.0], [90.0, 1291.0], [90.1, 1312.0], [90.2, 1312.0], [90.3, 1312.0], [90.4, 1312.0], [90.5, 1323.0], [90.6, 1323.0], [90.7, 1323.0], [90.8, 1323.0], [90.9, 1335.0], [91.0, 1335.0], [91.1, 1335.0], [91.2, 1335.0], [91.3, 1335.0], [91.4, 1335.0], [91.5, 1335.0], [91.6, 1335.0], [91.7, 1341.0], [91.8, 1341.0], [91.9, 1341.0], [92.0, 1341.0], [92.1, 1347.0], [92.2, 1347.0], [92.3, 1347.0], [92.4, 1347.0], [92.5, 1349.0], [92.6, 1349.0], [92.7, 1349.0], [92.8, 1349.0], [92.9, 1352.0], [93.0, 1352.0], [93.1, 1352.0], [93.2, 1352.0], [93.3, 1358.0], [93.4, 1358.0], [93.5, 1358.0], [93.6, 1358.0], [93.7, 1361.0], [93.8, 1361.0], [93.9, 1361.0], [94.0, 1361.0], [94.1, 1404.0], [94.2, 1404.0], [94.3, 1404.0], [94.4, 1404.0], [94.5, 1405.0], [94.6, 1405.0], [94.7, 1405.0], [94.8, 1405.0], [94.9, 1422.0], [95.0, 1422.0], [95.1, 1422.0], [95.2, 1422.0], [95.3, 1424.0], [95.4, 1424.0], [95.5, 1424.0], [95.6, 1424.0], [95.7, 1439.0], [95.8, 1439.0], [95.9, 1439.0], [96.0, 1439.0], [96.1, 1462.0], [96.2, 1462.0], [96.3, 1462.0], [96.4, 1462.0], [96.5, 1500.0], [96.6, 1500.0], [96.7, 1500.0], [96.8, 1500.0], [96.9, 1520.0], [97.0, 1520.0], [97.1, 1520.0], [97.2, 1520.0], [97.3, 1524.0], [97.4, 1524.0], [97.5, 1524.0], [97.6, 1524.0], [97.7, 1595.0], [97.8, 1595.0], [97.9, 1595.0], [98.0, 1595.0], [98.1, 1736.0], [98.2, 1736.0], [98.3, 1736.0], [98.4, 1736.0], [98.5, 1743.0], [98.6, 1743.0], [98.7, 1743.0], [98.8, 1743.0], [98.9, 1835.0], [99.0, 1835.0], [99.1, 1835.0], [99.2, 1835.0], [99.3, 1844.0], [99.4, 1844.0], [99.5, 1844.0], [99.6, 1844.0], [99.7, 2006.0], [99.8, 2006.0], [99.9, 2006.0], [100.0, 2006.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 134.0], [0.1, 134.0], [0.2, 134.0], [0.3, 134.0], [0.4, 136.0], [0.5, 136.0], [0.6, 136.0], [0.7, 136.0], [0.8, 140.0], [0.9, 140.0], [1.0, 140.0], [1.1, 140.0], [1.2, 140.0], [1.3, 142.0], [1.4, 142.0], [1.5, 142.0], [1.6, 143.0], [1.7, 143.0], [1.8, 143.0], [1.9, 143.0], [2.0, 147.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 148.0], [2.5, 148.0], [2.6, 148.0], [2.7, 148.0], [2.8, 151.0], [2.9, 151.0], [3.0, 151.0], [3.1, 151.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 154.0], [3.7, 154.0], [3.8, 154.0], [3.9, 154.0], [4.0, 159.0], [4.1, 159.0], [4.2, 159.0], [4.3, 159.0], [4.4, 163.0], [4.5, 163.0], [4.6, 163.0], [4.7, 163.0], [4.8, 163.0], [4.9, 163.0], [5.0, 163.0], [5.1, 163.0], [5.2, 170.0], [5.3, 170.0], [5.4, 170.0], [5.5, 170.0], [5.6, 179.0], [5.7, 179.0], [5.8, 179.0], [5.9, 179.0], [6.0, 182.0], [6.1, 182.0], [6.2, 182.0], [6.3, 182.0], [6.4, 182.0], [6.5, 182.0], [6.6, 182.0], [6.7, 182.0], [6.8, 182.0], [6.9, 182.0], [7.0, 182.0], [7.1, 182.0], [7.2, 186.0], [7.3, 186.0], [7.4, 186.0], [7.5, 186.0], [7.6, 186.0], [7.7, 186.0], [7.8, 186.0], [7.9, 186.0], [8.0, 186.0], [8.1, 186.0], [8.2, 186.0], [8.3, 186.0], [8.4, 191.0], [8.5, 191.0], [8.6, 191.0], [8.7, 191.0], [8.8, 192.0], [8.9, 192.0], [9.0, 192.0], [9.1, 192.0], [9.2, 192.0], [9.3, 192.0], [9.4, 192.0], [9.5, 192.0], [9.6, 192.0], [9.7, 194.0], [9.8, 194.0], [9.9, 194.0], [10.0, 194.0], [10.1, 199.0], [10.2, 199.0], [10.3, 199.0], [10.4, 199.0], [10.5, 199.0], [10.6, 199.0], [10.7, 199.0], [10.8, 199.0], [10.9, 199.0], [11.0, 199.0], [11.1, 199.0], [11.2, 199.0], [11.3, 201.0], [11.4, 201.0], [11.5, 201.0], [11.6, 201.0], [11.7, 203.0], [11.8, 203.0], [11.9, 203.0], [12.0, 203.0], [12.1, 205.0], [12.2, 205.0], [12.3, 205.0], [12.4, 205.0], [12.5, 205.0], [12.6, 205.0], [12.7, 205.0], [12.8, 205.0], [12.9, 209.0], [13.0, 209.0], [13.1, 209.0], [13.2, 209.0], [13.3, 211.0], [13.4, 211.0], [13.5, 211.0], [13.6, 211.0], [13.7, 213.0], [13.8, 213.0], [13.9, 213.0], [14.0, 213.0], [14.1, 213.0], [14.2, 213.0], [14.3, 213.0], [14.4, 213.0], [14.5, 214.0], [14.6, 214.0], [14.7, 214.0], [14.8, 214.0], [14.9, 220.0], [15.0, 220.0], [15.1, 220.0], [15.2, 220.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 229.0], [15.8, 229.0], [15.9, 229.0], [16.0, 229.0], [16.1, 231.0], [16.2, 231.0], [16.3, 231.0], [16.4, 231.0], [16.5, 232.0], [16.6, 232.0], [16.7, 232.0], [16.8, 235.0], [16.9, 235.0], [17.0, 235.0], [17.1, 235.0], [17.2, 236.0], [17.3, 236.0], [17.4, 236.0], [17.5, 236.0], [17.6, 236.0], [17.7, 236.0], [17.8, 236.0], [17.9, 236.0], [18.0, 240.0], [18.1, 240.0], [18.2, 240.0], [18.3, 240.0], [18.4, 247.0], [18.5, 247.0], [18.6, 247.0], [18.7, 247.0], [18.8, 248.0], [18.9, 248.0], [19.0, 248.0], [19.1, 248.0], [19.2, 249.0], [19.3, 249.0], [19.4, 249.0], [19.5, 249.0], [19.6, 249.0], [19.7, 249.0], [19.8, 249.0], [19.9, 249.0], [20.0, 251.0], [20.1, 251.0], [20.2, 251.0], [20.3, 251.0], [20.4, 252.0], [20.5, 252.0], [20.6, 252.0], [20.7, 252.0], [20.8, 253.0], [20.9, 253.0], [21.0, 253.0], [21.1, 253.0], [21.2, 254.0], [21.3, 254.0], [21.4, 254.0], [21.5, 254.0], [21.6, 255.0], [21.7, 255.0], [21.8, 255.0], [21.9, 255.0], [22.0, 256.0], [22.1, 256.0], [22.2, 256.0], [22.3, 256.0], [22.4, 258.0], [22.5, 258.0], [22.6, 258.0], [22.7, 258.0], [22.8, 260.0], [22.9, 260.0], [23.0, 260.0], [23.1, 260.0], [23.2, 262.0], [23.3, 262.0], [23.4, 262.0], [23.5, 262.0], [23.6, 262.0], [23.7, 262.0], [23.8, 262.0], [23.9, 262.0], [24.0, 266.0], [24.1, 266.0], [24.2, 266.0], [24.3, 266.0], [24.4, 269.0], [24.5, 269.0], [24.6, 269.0], [24.7, 269.0], [24.8, 270.0], [24.9, 270.0], [25.0, 270.0], [25.1, 270.0], [25.2, 273.0], [25.3, 273.0], [25.4, 273.0], [25.5, 273.0], [25.6, 276.0], [25.7, 276.0], [25.8, 276.0], [25.9, 276.0], [26.0, 277.0], [26.1, 277.0], [26.2, 277.0], [26.3, 277.0], [26.4, 283.0], [26.5, 283.0], [26.6, 283.0], [26.7, 283.0], [26.8, 283.0], [26.9, 283.0], [27.0, 283.0], [27.1, 283.0], [27.2, 289.0], [27.3, 289.0], [27.4, 289.0], [27.5, 289.0], [27.6, 291.0], [27.7, 291.0], [27.8, 291.0], [27.9, 291.0], [28.0, 294.0], [28.1, 294.0], [28.2, 294.0], [28.3, 294.0], [28.4, 298.0], [28.5, 298.0], [28.6, 298.0], [28.7, 298.0], [28.8, 302.0], [28.9, 302.0], [29.0, 302.0], [29.1, 302.0], [29.2, 303.0], [29.3, 303.0], [29.4, 303.0], [29.5, 303.0], [29.6, 307.0], [29.7, 307.0], [29.8, 307.0], [29.9, 307.0], [30.0, 308.0], [30.1, 308.0], [30.2, 308.0], [30.3, 308.0], [30.4, 309.0], [30.5, 309.0], [30.6, 309.0], [30.7, 309.0], [30.8, 319.0], [30.9, 319.0], [31.0, 319.0], [31.1, 319.0], [31.2, 334.0], [31.3, 334.0], [31.4, 334.0], [31.5, 334.0], [31.6, 334.0], [31.7, 334.0], [31.8, 334.0], [31.9, 334.0], [32.0, 334.0], [32.1, 334.0], [32.2, 334.0], [32.3, 334.0], [32.4, 335.0], [32.5, 335.0], [32.6, 335.0], [32.7, 335.0], [32.8, 342.0], [32.9, 342.0], [33.0, 342.0], [33.1, 342.0], [33.2, 343.0], [33.3, 343.0], [33.4, 343.0], [33.5, 343.0], [33.6, 344.0], [33.7, 344.0], [33.8, 344.0], [33.9, 344.0], [34.0, 349.0], [34.1, 349.0], [34.2, 349.0], [34.3, 349.0], [34.4, 350.0], [34.5, 350.0], [34.6, 350.0], [34.7, 350.0], [34.8, 357.0], [34.9, 357.0], [35.0, 357.0], [35.1, 357.0], [35.2, 358.0], [35.3, 358.0], [35.4, 358.0], [35.5, 358.0], [35.6, 359.0], [35.7, 359.0], [35.8, 359.0], [35.9, 359.0], [36.0, 363.0], [36.1, 363.0], [36.2, 363.0], [36.3, 363.0], [36.4, 365.0], [36.5, 365.0], [36.6, 365.0], [36.7, 365.0], [36.8, 369.0], [36.9, 369.0], [37.0, 369.0], [37.1, 369.0], [37.2, 373.0], [37.3, 373.0], [37.4, 373.0], [37.5, 373.0], [37.6, 378.0], [37.7, 378.0], [37.8, 378.0], [37.9, 378.0], [38.0, 378.0], [38.1, 378.0], [38.2, 378.0], [38.3, 378.0], [38.4, 380.0], [38.5, 380.0], [38.6, 380.0], [38.7, 380.0], [38.8, 383.0], [38.9, 383.0], [39.0, 383.0], [39.1, 383.0], [39.2, 388.0], [39.3, 388.0], [39.4, 388.0], [39.5, 388.0], [39.6, 406.0], [39.7, 406.0], [39.8, 406.0], [39.9, 406.0], [40.0, 408.0], [40.1, 408.0], [40.2, 408.0], [40.3, 408.0], [40.4, 418.0], [40.5, 418.0], [40.6, 418.0], [40.7, 418.0], [40.8, 422.0], [40.9, 422.0], [41.0, 422.0], [41.1, 422.0], [41.2, 422.0], [41.3, 422.0], [41.4, 422.0], [41.5, 422.0], [41.6, 424.0], [41.7, 424.0], [41.8, 424.0], [41.9, 424.0], [42.0, 428.0], [42.1, 428.0], [42.2, 428.0], [42.3, 428.0], [42.4, 434.0], [42.5, 434.0], [42.6, 434.0], [42.7, 434.0], [42.8, 441.0], [42.9, 441.0], [43.0, 441.0], [43.1, 441.0], [43.2, 443.0], [43.3, 443.0], [43.4, 443.0], [43.5, 443.0], [43.6, 444.0], [43.7, 444.0], [43.8, 444.0], [43.9, 444.0], [44.0, 455.0], [44.1, 455.0], [44.2, 455.0], [44.3, 455.0], [44.4, 464.0], [44.5, 464.0], [44.6, 464.0], [44.7, 464.0], [44.8, 466.0], [44.9, 466.0], [45.0, 466.0], [45.1, 466.0], [45.2, 469.0], [45.3, 469.0], [45.4, 469.0], [45.5, 469.0], [45.6, 471.0], [45.7, 471.0], [45.8, 471.0], [45.9, 471.0], [46.0, 476.0], [46.1, 476.0], [46.2, 476.0], [46.3, 476.0], [46.4, 483.0], [46.5, 483.0], [46.6, 483.0], [46.7, 483.0], [46.8, 483.0], [46.9, 483.0], [47.0, 483.0], [47.1, 483.0], [47.2, 504.0], [47.3, 504.0], [47.4, 504.0], [47.5, 504.0], [47.6, 509.0], [47.7, 509.0], [47.8, 509.0], [47.9, 509.0], [48.0, 519.0], [48.1, 519.0], [48.2, 519.0], [48.3, 519.0], [48.4, 522.0], [48.5, 522.0], [48.6, 522.0], [48.7, 522.0], [48.8, 525.0], [48.9, 525.0], [49.0, 525.0], [49.1, 525.0], [49.2, 526.0], [49.3, 526.0], [49.4, 526.0], [49.5, 526.0], [49.6, 529.0], [49.7, 529.0], [49.8, 529.0], [49.9, 529.0], [50.0, 535.0], [50.1, 535.0], [50.2, 535.0], [50.3, 535.0], [50.4, 537.0], [50.5, 537.0], [50.6, 537.0], [50.7, 537.0], [50.8, 551.0], [50.9, 551.0], [51.0, 551.0], [51.1, 551.0], [51.2, 552.0], [51.3, 552.0], [51.4, 552.0], [51.5, 552.0], [51.6, 558.0], [51.7, 558.0], [51.8, 558.0], [51.9, 558.0], [52.0, 564.0], [52.1, 564.0], [52.2, 564.0], [52.3, 564.0], [52.4, 571.0], [52.5, 571.0], [52.6, 571.0], [52.7, 571.0], [52.8, 573.0], [52.9, 573.0], [53.0, 573.0], [53.1, 573.0], [53.2, 599.0], [53.3, 599.0], [53.4, 599.0], [53.5, 599.0], [53.6, 601.0], [53.7, 601.0], [53.8, 601.0], [53.9, 601.0], [54.0, 608.0], [54.1, 608.0], [54.2, 608.0], [54.3, 608.0], [54.4, 616.0], [54.5, 616.0], [54.6, 616.0], [54.7, 616.0], [54.8, 624.0], [54.9, 624.0], [55.0, 624.0], [55.1, 624.0], [55.2, 626.0], [55.3, 626.0], [55.4, 626.0], [55.5, 626.0], [55.6, 632.0], [55.7, 632.0], [55.8, 632.0], [55.9, 632.0], [56.0, 632.0], [56.1, 632.0], [56.2, 632.0], [56.3, 632.0], [56.4, 640.0], [56.5, 640.0], [56.6, 640.0], [56.7, 640.0], [56.8, 644.0], [56.9, 644.0], [57.0, 644.0], [57.1, 644.0], [57.2, 647.0], [57.3, 647.0], [57.4, 647.0], [57.5, 647.0], [57.6, 656.0], [57.7, 656.0], [57.8, 656.0], [57.9, 656.0], [58.0, 657.0], [58.1, 657.0], [58.2, 657.0], [58.3, 657.0], [58.4, 659.0], [58.5, 659.0], [58.6, 659.0], [58.7, 659.0], [58.8, 665.0], [58.9, 665.0], [59.0, 665.0], [59.1, 665.0], [59.2, 666.0], [59.3, 666.0], [59.4, 666.0], [59.5, 666.0], [59.6, 669.0], [59.7, 669.0], [59.8, 669.0], [59.9, 669.0], [60.0, 671.0], [60.1, 671.0], [60.2, 671.0], [60.3, 671.0], [60.4, 674.0], [60.5, 674.0], [60.6, 674.0], [60.7, 674.0], [60.8, 681.0], [60.9, 681.0], [61.0, 681.0], [61.1, 681.0], [61.2, 686.0], [61.3, 686.0], [61.4, 686.0], [61.5, 686.0], [61.6, 687.0], [61.7, 687.0], [61.8, 687.0], [61.9, 687.0], [62.0, 692.0], [62.1, 692.0], [62.2, 692.0], [62.3, 692.0], [62.4, 694.0], [62.5, 694.0], [62.6, 694.0], [62.7, 694.0], [62.8, 698.0], [62.9, 698.0], [63.0, 698.0], [63.1, 698.0], [63.2, 699.0], [63.3, 699.0], [63.4, 699.0], [63.5, 699.0], [63.6, 703.0], [63.7, 703.0], [63.8, 703.0], [63.9, 703.0], [64.0, 704.0], [64.1, 704.0], [64.2, 704.0], [64.3, 704.0], [64.4, 704.0], [64.5, 704.0], [64.6, 704.0], [64.7, 704.0], [64.8, 706.0], [64.9, 706.0], [65.0, 706.0], [65.1, 706.0], [65.2, 708.0], [65.3, 708.0], [65.4, 708.0], [65.5, 708.0], [65.6, 708.0], [65.7, 708.0], [65.8, 708.0], [65.9, 708.0], [66.0, 710.0], [66.1, 710.0], [66.2, 710.0], [66.3, 710.0], [66.4, 712.0], [66.5, 712.0], [66.6, 712.0], [66.7, 712.0], [66.8, 715.0], [66.9, 715.0], [67.0, 715.0], [67.1, 715.0], [67.2, 753.0], [67.3, 753.0], [67.4, 753.0], [67.5, 753.0], [67.6, 765.0], [67.7, 765.0], [67.8, 765.0], [67.9, 765.0], [68.0, 768.0], [68.1, 768.0], [68.2, 768.0], [68.3, 768.0], [68.4, 773.0], [68.5, 773.0], [68.6, 773.0], [68.7, 773.0], [68.8, 773.0], [68.9, 773.0], [69.0, 773.0], [69.1, 773.0], [69.2, 798.0], [69.3, 798.0], [69.4, 798.0], [69.5, 798.0], [69.6, 806.0], [69.7, 806.0], [69.8, 806.0], [69.9, 806.0], [70.0, 809.0], [70.1, 809.0], [70.2, 809.0], [70.3, 809.0], [70.4, 822.0], [70.5, 822.0], [70.6, 822.0], [70.7, 822.0], [70.8, 825.0], [70.9, 825.0], [71.0, 825.0], [71.1, 825.0], [71.2, 826.0], [71.3, 826.0], [71.4, 826.0], [71.5, 826.0], [71.6, 826.0], [71.7, 826.0], [71.8, 826.0], [71.9, 826.0], [72.0, 830.0], [72.1, 830.0], [72.2, 830.0], [72.3, 830.0], [72.4, 832.0], [72.5, 832.0], [72.6, 832.0], [72.7, 832.0], [72.8, 835.0], [72.9, 835.0], [73.0, 835.0], [73.1, 835.0], [73.2, 835.0], [73.3, 835.0], [73.4, 835.0], [73.5, 835.0], [73.6, 838.0], [73.7, 838.0], [73.8, 838.0], [73.9, 838.0], [74.0, 848.0], [74.1, 848.0], [74.2, 848.0], [74.3, 848.0], [74.4, 856.0], [74.5, 856.0], [74.6, 856.0], [74.7, 856.0], [74.8, 864.0], [74.9, 864.0], [75.0, 864.0], [75.1, 864.0], [75.2, 871.0], [75.3, 871.0], [75.4, 871.0], [75.5, 871.0], [75.6, 872.0], [75.7, 872.0], [75.8, 872.0], [75.9, 872.0], [76.0, 873.0], [76.1, 873.0], [76.2, 873.0], [76.3, 873.0], [76.4, 879.0], [76.5, 879.0], [76.6, 879.0], [76.7, 879.0], [76.8, 882.0], [76.9, 882.0], [77.0, 882.0], [77.1, 882.0], [77.2, 891.0], [77.3, 891.0], [77.4, 891.0], [77.5, 891.0], [77.6, 891.0], [77.7, 891.0], [77.8, 891.0], [77.9, 891.0], [78.0, 897.0], [78.1, 897.0], [78.2, 897.0], [78.3, 897.0], [78.4, 903.0], [78.5, 903.0], [78.6, 903.0], [78.7, 903.0], [78.8, 906.0], [78.9, 906.0], [79.0, 906.0], [79.1, 906.0], [79.2, 918.0], [79.3, 918.0], [79.4, 918.0], [79.5, 918.0], [79.6, 919.0], [79.7, 919.0], [79.8, 919.0], [79.9, 919.0], [80.0, 920.0], [80.1, 920.0], [80.2, 920.0], [80.3, 920.0], [80.4, 921.0], [80.5, 921.0], [80.6, 921.0], [80.7, 921.0], [80.8, 921.0], [80.9, 927.0], [81.0, 927.0], [81.1, 927.0], [81.2, 927.0], [81.3, 928.0], [81.4, 928.0], [81.5, 928.0], [81.6, 928.0], [81.7, 928.0], [81.8, 928.0], [81.9, 928.0], [82.0, 928.0], [82.1, 940.0], [82.2, 940.0], [82.3, 940.0], [82.4, 940.0], [82.5, 945.0], [82.6, 945.0], [82.7, 945.0], [82.8, 945.0], [82.9, 948.0], [83.0, 948.0], [83.1, 948.0], [83.2, 948.0], [83.3, 971.0], [83.4, 971.0], [83.5, 971.0], [83.6, 971.0], [83.7, 975.0], [83.8, 975.0], [83.9, 975.0], [84.0, 975.0], [84.1, 983.0], [84.2, 983.0], [84.3, 983.0], [84.4, 983.0], [84.5, 991.0], [84.6, 991.0], [84.7, 991.0], [84.8, 991.0], [84.9, 1004.0], [85.0, 1004.0], [85.1, 1004.0], [85.2, 1004.0], [85.3, 1023.0], [85.4, 1023.0], [85.5, 1023.0], [85.6, 1023.0], [85.7, 1030.0], [85.8, 1030.0], [85.9, 1030.0], [86.0, 1030.0], [86.1, 1072.0], [86.2, 1072.0], [86.3, 1072.0], [86.4, 1072.0], [86.5, 1079.0], [86.6, 1079.0], [86.7, 1079.0], [86.8, 1079.0], [86.9, 1096.0], [87.0, 1096.0], [87.1, 1096.0], [87.2, 1096.0], [87.3, 1117.0], [87.4, 1117.0], [87.5, 1117.0], [87.6, 1117.0], [87.7, 1121.0], [87.8, 1121.0], [87.9, 1121.0], [88.0, 1121.0], [88.1, 1126.0], [88.2, 1126.0], [88.3, 1126.0], [88.4, 1126.0], [88.5, 1148.0], [88.6, 1148.0], [88.7, 1148.0], [88.8, 1148.0], [88.9, 1151.0], [89.0, 1151.0], [89.1, 1151.0], [89.2, 1151.0], [89.3, 1160.0], [89.4, 1160.0], [89.5, 1160.0], [89.6, 1160.0], [89.7, 1168.0], [89.8, 1168.0], [89.9, 1168.0], [90.0, 1168.0], [90.1, 1173.0], [90.2, 1173.0], [90.3, 1173.0], [90.4, 1173.0], [90.5, 1193.0], [90.6, 1193.0], [90.7, 1193.0], [90.8, 1193.0], [90.9, 1200.0], [91.0, 1200.0], [91.1, 1200.0], [91.2, 1200.0], [91.3, 1212.0], [91.4, 1212.0], [91.5, 1212.0], [91.6, 1212.0], [91.7, 1213.0], [91.8, 1213.0], [91.9, 1213.0], [92.0, 1213.0], [92.1, 1231.0], [92.2, 1231.0], [92.3, 1231.0], [92.4, 1231.0], [92.5, 1243.0], [92.6, 1243.0], [92.7, 1243.0], [92.8, 1243.0], [92.9, 1247.0], [93.0, 1247.0], [93.1, 1247.0], [93.2, 1247.0], [93.3, 1259.0], [93.4, 1259.0], [93.5, 1259.0], [93.6, 1259.0], [93.7, 1274.0], [93.8, 1274.0], [93.9, 1274.0], [94.0, 1274.0], [94.1, 1276.0], [94.2, 1276.0], [94.3, 1276.0], [94.4, 1276.0], [94.5, 1285.0], [94.6, 1285.0], [94.7, 1285.0], [94.8, 1285.0], [94.9, 1321.0], [95.0, 1321.0], [95.1, 1321.0], [95.2, 1321.0], [95.3, 1346.0], [95.4, 1346.0], [95.5, 1346.0], [95.6, 1346.0], [95.7, 1352.0], [95.8, 1352.0], [95.9, 1352.0], [96.0, 1352.0], [96.1, 1403.0], [96.2, 1403.0], [96.3, 1403.0], [96.4, 1403.0], [96.5, 1434.0], [96.6, 1434.0], [96.7, 1434.0], [96.8, 1434.0], [96.9, 1506.0], [97.0, 1506.0], [97.1, 1506.0], [97.2, 1506.0], [97.3, 1569.0], [97.4, 1569.0], [97.5, 1569.0], [97.6, 1569.0], [97.7, 1609.0], [97.8, 1609.0], [97.9, 1609.0], [98.0, 1609.0], [98.1, 1653.0], [98.2, 1653.0], [98.3, 1653.0], [98.4, 1653.0], [98.5, 1655.0], [98.6, 1655.0], [98.7, 1655.0], [98.8, 1655.0], [98.9, 1663.0], [99.0, 1663.0], [99.1, 1663.0], [99.2, 1663.0], [99.3, 1664.0], [99.4, 1664.0], [99.5, 1664.0], [99.6, 1664.0], [99.7, 1735.0], [99.8, 1735.0], [99.9, 1735.0], [100.0, 1735.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 135.0], [0.1, 135.0], [0.2, 135.0], [0.3, 135.0], [0.4, 138.0], [0.5, 138.0], [0.6, 138.0], [0.7, 138.0], [0.8, 143.0], [0.9, 143.0], [1.0, 143.0], [1.1, 143.0], [1.2, 143.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 148.0], [3.0, 148.0], [3.1, 148.0], [3.2, 148.0], [3.3, 148.0], [3.4, 148.0], [3.5, 148.0], [3.6, 148.0], [3.7, 149.0], [3.8, 149.0], [3.9, 149.0], [4.0, 149.0], [4.1, 151.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 153.0], [4.6, 153.0], [4.7, 153.0], [4.8, 153.0], [4.9, 155.0], [5.0, 155.0], [5.1, 155.0], [5.2, 155.0], [5.3, 155.0], [5.4, 155.0], [5.5, 155.0], [5.6, 155.0], [5.7, 155.0], [5.8, 155.0], [5.9, 155.0], [6.0, 155.0], [6.1, 156.0], [6.2, 156.0], [6.3, 156.0], [6.4, 156.0], [6.5, 159.0], [6.6, 159.0], [6.7, 159.0], [6.8, 159.0], [6.9, 160.0], [7.0, 160.0], [7.1, 160.0], [7.2, 160.0], [7.3, 161.0], [7.4, 161.0], [7.5, 161.0], [7.6, 161.0], [7.7, 162.0], [7.8, 162.0], [7.9, 162.0], [8.0, 162.0], [8.1, 163.0], [8.2, 163.0], [8.3, 163.0], [8.4, 163.0], [8.5, 164.0], [8.6, 164.0], [8.7, 164.0], [8.8, 164.0], [8.9, 169.0], [9.0, 169.0], [9.1, 169.0], [9.2, 169.0], [9.3, 170.0], [9.4, 170.0], [9.5, 170.0], [9.6, 170.0], [9.7, 170.0], [9.8, 170.0], [9.9, 170.0], [10.0, 170.0], [10.1, 179.0], [10.2, 179.0], [10.3, 179.0], [10.4, 179.0], [10.5, 181.0], [10.6, 181.0], [10.7, 181.0], [10.8, 181.0], [10.9, 184.0], [11.0, 184.0], [11.1, 184.0], [11.2, 184.0], [11.3, 187.0], [11.4, 187.0], [11.5, 187.0], [11.6, 187.0], [11.7, 188.0], [11.8, 188.0], [11.9, 188.0], [12.0, 188.0], [12.1, 189.0], [12.2, 189.0], [12.3, 189.0], [12.4, 189.0], [12.5, 190.0], [12.6, 190.0], [12.7, 190.0], [12.8, 190.0], [12.9, 192.0], [13.0, 192.0], [13.1, 192.0], [13.2, 192.0], [13.3, 193.0], [13.4, 193.0], [13.5, 193.0], [13.6, 193.0], [13.7, 195.0], [13.8, 195.0], [13.9, 195.0], [14.0, 195.0], [14.1, 196.0], [14.2, 196.0], [14.3, 196.0], [14.4, 196.0], [14.5, 206.0], [14.6, 206.0], [14.7, 206.0], [14.8, 206.0], [14.9, 209.0], [15.0, 209.0], [15.1, 209.0], [15.2, 209.0], [15.3, 213.0], [15.4, 213.0], [15.5, 213.0], [15.6, 213.0], [15.7, 215.0], [15.8, 215.0], [15.9, 215.0], [16.0, 215.0], [16.1, 218.0], [16.2, 218.0], [16.3, 218.0], [16.4, 218.0], [16.5, 219.0], [16.6, 219.0], [16.7, 219.0], [16.8, 219.0], [16.9, 219.0], [17.0, 219.0], [17.1, 219.0], [17.2, 219.0], [17.3, 224.0], [17.4, 224.0], [17.5, 224.0], [17.6, 224.0], [17.7, 225.0], [17.8, 225.0], [17.9, 225.0], [18.0, 225.0], [18.1, 226.0], [18.2, 226.0], [18.3, 226.0], [18.4, 226.0], [18.5, 227.0], [18.6, 227.0], [18.7, 227.0], [18.8, 227.0], [18.9, 230.0], [19.0, 230.0], [19.1, 230.0], [19.2, 230.0], [19.3, 231.0], [19.4, 231.0], [19.5, 231.0], [19.6, 232.0], [19.7, 232.0], [19.8, 232.0], [19.9, 232.0], [20.0, 233.0], [20.1, 233.0], [20.2, 233.0], [20.3, 233.0], [20.4, 236.0], [20.5, 236.0], [20.6, 236.0], [20.7, 236.0], [20.8, 238.0], [20.9, 238.0], [21.0, 238.0], [21.1, 238.0], [21.2, 244.0], [21.3, 244.0], [21.4, 244.0], [21.5, 244.0], [21.6, 245.0], [21.7, 245.0], [21.8, 245.0], [21.9, 245.0], [22.0, 251.0], [22.1, 251.0], [22.2, 251.0], [22.3, 251.0], [22.4, 252.0], [22.5, 252.0], [22.6, 252.0], [22.7, 252.0], [22.8, 253.0], [22.9, 253.0], [23.0, 253.0], [23.1, 253.0], [23.2, 254.0], [23.3, 254.0], [23.4, 254.0], [23.5, 254.0], [23.6, 260.0], [23.7, 260.0], [23.8, 260.0], [23.9, 260.0], [24.0, 260.0], [24.1, 260.0], [24.2, 260.0], [24.3, 260.0], [24.4, 262.0], [24.5, 262.0], [24.6, 262.0], [24.7, 262.0], [24.8, 264.0], [24.9, 264.0], [25.0, 264.0], [25.1, 264.0], [25.2, 265.0], [25.3, 265.0], [25.4, 265.0], [25.5, 265.0], [25.6, 267.0], [25.7, 267.0], [25.8, 267.0], [25.9, 267.0], [26.0, 272.0], [26.1, 272.0], [26.2, 272.0], [26.3, 272.0], [26.4, 272.0], [26.5, 272.0], [26.6, 272.0], [26.7, 272.0], [26.8, 272.0], [26.9, 272.0], [27.0, 272.0], [27.1, 272.0], [27.2, 272.0], [27.3, 272.0], [27.4, 272.0], [27.5, 272.0], [27.6, 275.0], [27.7, 275.0], [27.8, 275.0], [27.9, 275.0], [28.0, 283.0], [28.1, 283.0], [28.2, 283.0], [28.3, 283.0], [28.4, 301.0], [28.5, 301.0], [28.6, 301.0], [28.7, 301.0], [28.8, 308.0], [28.9, 308.0], [29.0, 308.0], [29.1, 308.0], [29.2, 309.0], [29.3, 309.0], [29.4, 309.0], [29.5, 309.0], [29.6, 314.0], [29.7, 314.0], [29.8, 314.0], [29.9, 314.0], [30.0, 315.0], [30.1, 315.0], [30.2, 315.0], [30.3, 315.0], [30.4, 315.0], [30.5, 315.0], [30.6, 315.0], [30.7, 315.0], [30.8, 318.0], [30.9, 318.0], [31.0, 318.0], [31.1, 318.0], [31.2, 320.0], [31.3, 320.0], [31.4, 320.0], [31.5, 320.0], [31.6, 321.0], [31.7, 321.0], [31.8, 321.0], [31.9, 321.0], [32.0, 327.0], [32.1, 327.0], [32.2, 327.0], [32.3, 327.0], [32.4, 330.0], [32.5, 330.0], [32.6, 330.0], [32.7, 330.0], [32.8, 335.0], [32.9, 335.0], [33.0, 335.0], [33.1, 335.0], [33.2, 335.0], [33.3, 335.0], [33.4, 335.0], [33.5, 335.0], [33.6, 336.0], [33.7, 336.0], [33.8, 336.0], [33.9, 336.0], [34.0, 336.0], [34.1, 336.0], [34.2, 336.0], [34.3, 336.0], [34.4, 336.0], [34.5, 336.0], [34.6, 336.0], [34.7, 336.0], [34.8, 341.0], [34.9, 341.0], [35.0, 341.0], [35.1, 341.0], [35.2, 343.0], [35.3, 343.0], [35.4, 343.0], [35.5, 343.0], [35.6, 346.0], [35.7, 346.0], [35.8, 346.0], [35.9, 346.0], [36.0, 351.0], [36.1, 351.0], [36.2, 351.0], [36.3, 351.0], [36.4, 363.0], [36.5, 363.0], [36.6, 363.0], [36.7, 363.0], [36.8, 368.0], [36.9, 368.0], [37.0, 368.0], [37.1, 368.0], [37.2, 368.0], [37.3, 368.0], [37.4, 368.0], [37.5, 368.0], [37.6, 370.0], [37.7, 370.0], [37.8, 370.0], [37.9, 370.0], [38.0, 375.0], [38.1, 375.0], [38.2, 375.0], [38.3, 375.0], [38.4, 379.0], [38.5, 379.0], [38.6, 379.0], [38.7, 379.0], [38.8, 387.0], [38.9, 387.0], [39.0, 387.0], [39.1, 387.0], [39.2, 388.0], [39.3, 388.0], [39.4, 388.0], [39.5, 388.0], [39.6, 389.0], [39.7, 389.0], [39.8, 389.0], [39.9, 389.0], [40.0, 393.0], [40.1, 393.0], [40.2, 393.0], [40.3, 393.0], [40.4, 399.0], [40.5, 399.0], [40.6, 399.0], [40.7, 399.0], [40.8, 402.0], [40.9, 402.0], [41.0, 402.0], [41.1, 402.0], [41.2, 408.0], [41.3, 408.0], [41.4, 408.0], [41.5, 408.0], [41.6, 408.0], [41.7, 408.0], [41.8, 408.0], [41.9, 408.0], [42.0, 417.0], [42.1, 417.0], [42.2, 417.0], [42.3, 417.0], [42.4, 418.0], [42.5, 418.0], [42.6, 418.0], [42.7, 418.0], [42.8, 418.0], [42.9, 418.0], [43.0, 418.0], [43.1, 418.0], [43.2, 423.0], [43.3, 423.0], [43.4, 423.0], [43.5, 423.0], [43.6, 424.0], [43.7, 424.0], [43.8, 424.0], [43.9, 424.0], [44.0, 425.0], [44.1, 425.0], [44.2, 425.0], [44.3, 425.0], [44.4, 427.0], [44.5, 427.0], [44.6, 427.0], [44.7, 427.0], [44.8, 428.0], [44.9, 428.0], [45.0, 428.0], [45.1, 428.0], [45.2, 430.0], [45.3, 430.0], [45.4, 430.0], [45.5, 430.0], [45.6, 437.0], [45.7, 437.0], [45.8, 437.0], [45.9, 437.0], [46.0, 441.0], [46.1, 441.0], [46.2, 441.0], [46.3, 441.0], [46.4, 441.0], [46.5, 441.0], [46.6, 441.0], [46.7, 441.0], [46.8, 453.0], [46.9, 453.0], [47.0, 453.0], [47.1, 453.0], [47.2, 456.0], [47.3, 456.0], [47.4, 456.0], [47.5, 456.0], [47.6, 460.0], [47.7, 460.0], [47.8, 460.0], [47.9, 460.0], [48.0, 465.0], [48.1, 465.0], [48.2, 465.0], [48.3, 465.0], [48.4, 465.0], [48.5, 465.0], [48.6, 465.0], [48.7, 465.0], [48.8, 470.0], [48.9, 470.0], [49.0, 470.0], [49.1, 470.0], [49.2, 475.0], [49.3, 475.0], [49.4, 475.0], [49.5, 475.0], [49.6, 476.0], [49.7, 476.0], [49.8, 476.0], [49.9, 476.0], [50.0, 485.0], [50.1, 485.0], [50.2, 485.0], [50.3, 485.0], [50.4, 488.0], [50.5, 488.0], [50.6, 488.0], [50.7, 488.0], [50.8, 501.0], [50.9, 501.0], [51.0, 501.0], [51.1, 501.0], [51.2, 505.0], [51.3, 505.0], [51.4, 505.0], [51.5, 505.0], [51.6, 510.0], [51.7, 510.0], [51.8, 510.0], [51.9, 510.0], [52.0, 510.0], [52.1, 510.0], [52.2, 510.0], [52.3, 510.0], [52.4, 513.0], [52.5, 513.0], [52.6, 513.0], [52.7, 513.0], [52.8, 516.0], [52.9, 516.0], [53.0, 516.0], [53.1, 516.0], [53.2, 522.0], [53.3, 522.0], [53.4, 522.0], [53.5, 522.0], [53.6, 522.0], [53.7, 522.0], [53.8, 522.0], [53.9, 522.0], [54.0, 528.0], [54.1, 528.0], [54.2, 528.0], [54.3, 528.0], [54.4, 534.0], [54.5, 534.0], [54.6, 534.0], [54.7, 534.0], [54.8, 544.0], [54.9, 544.0], [55.0, 544.0], [55.1, 544.0], [55.2, 544.0], [55.3, 544.0], [55.4, 544.0], [55.5, 544.0], [55.6, 545.0], [55.7, 545.0], [55.8, 545.0], [55.9, 545.0], [56.0, 546.0], [56.1, 546.0], [56.2, 546.0], [56.3, 546.0], [56.4, 546.0], [56.5, 546.0], [56.6, 546.0], [56.7, 546.0], [56.8, 553.0], [56.9, 553.0], [57.0, 553.0], [57.1, 553.0], [57.2, 555.0], [57.3, 555.0], [57.4, 555.0], [57.5, 555.0], [57.6, 558.0], [57.7, 558.0], [57.8, 558.0], [57.9, 558.0], [58.0, 566.0], [58.1, 566.0], [58.2, 566.0], [58.3, 566.0], [58.4, 575.0], [58.5, 575.0], [58.6, 575.0], [58.7, 575.0], [58.8, 576.0], [58.9, 576.0], [59.0, 576.0], [59.1, 576.0], [59.2, 582.0], [59.3, 582.0], [59.4, 582.0], [59.5, 582.0], [59.6, 591.0], [59.7, 591.0], [59.8, 591.0], [59.9, 591.0], [60.0, 595.0], [60.1, 595.0], [60.2, 595.0], [60.3, 595.0], [60.4, 606.0], [60.5, 606.0], [60.6, 606.0], [60.7, 606.0], [60.8, 608.0], [60.9, 608.0], [61.0, 608.0], [61.1, 608.0], [61.2, 619.0], [61.3, 619.0], [61.4, 619.0], [61.5, 619.0], [61.6, 621.0], [61.7, 621.0], [61.8, 621.0], [61.9, 621.0], [62.0, 622.0], [62.1, 622.0], [62.2, 622.0], [62.3, 622.0], [62.4, 634.0], [62.5, 634.0], [62.6, 634.0], [62.7, 634.0], [62.8, 640.0], [62.9, 640.0], [63.0, 640.0], [63.1, 640.0], [63.2, 648.0], [63.3, 648.0], [63.4, 648.0], [63.5, 648.0], [63.6, 655.0], [63.7, 655.0], [63.8, 655.0], [63.9, 655.0], [64.0, 656.0], [64.1, 656.0], [64.2, 656.0], [64.3, 656.0], [64.4, 662.0], [64.5, 662.0], [64.6, 662.0], [64.7, 662.0], [64.8, 671.0], [64.9, 671.0], [65.0, 671.0], [65.1, 671.0], [65.2, 678.0], [65.3, 678.0], [65.4, 678.0], [65.5, 678.0], [65.6, 690.0], [65.7, 690.0], [65.8, 690.0], [65.9, 690.0], [66.0, 692.0], [66.1, 692.0], [66.2, 692.0], [66.3, 692.0], [66.4, 699.0], [66.5, 699.0], [66.6, 699.0], [66.7, 699.0], [66.8, 716.0], [66.9, 716.0], [67.0, 716.0], [67.1, 716.0], [67.2, 726.0], [67.3, 726.0], [67.4, 726.0], [67.5, 726.0], [67.6, 740.0], [67.7, 740.0], [67.8, 740.0], [67.9, 740.0], [68.0, 749.0], [68.1, 749.0], [68.2, 749.0], [68.3, 749.0], [68.4, 762.0], [68.5, 762.0], [68.6, 762.0], [68.7, 762.0], [68.8, 772.0], [68.9, 772.0], [69.0, 772.0], [69.1, 772.0], [69.2, 772.0], [69.3, 772.0], [69.4, 772.0], [69.5, 772.0], [69.6, 773.0], [69.7, 773.0], [69.8, 773.0], [69.9, 773.0], [70.0, 775.0], [70.1, 775.0], [70.2, 775.0], [70.3, 775.0], [70.4, 780.0], [70.5, 780.0], [70.6, 780.0], [70.7, 780.0], [70.8, 781.0], [70.9, 781.0], [71.0, 781.0], [71.1, 781.0], [71.2, 799.0], [71.3, 799.0], [71.4, 799.0], [71.5, 799.0], [71.6, 812.0], [71.7, 812.0], [71.8, 812.0], [71.9, 812.0], [72.0, 812.0], [72.1, 812.0], [72.2, 812.0], [72.3, 812.0], [72.4, 823.0], [72.5, 823.0], [72.6, 823.0], [72.7, 823.0], [72.8, 836.0], [72.9, 836.0], [73.0, 836.0], [73.1, 836.0], [73.2, 837.0], [73.3, 837.0], [73.4, 837.0], [73.5, 837.0], [73.6, 838.0], [73.7, 838.0], [73.8, 838.0], [73.9, 838.0], [74.0, 842.0], [74.1, 842.0], [74.2, 842.0], [74.3, 842.0], [74.4, 844.0], [74.5, 844.0], [74.6, 844.0], [74.7, 844.0], [74.8, 846.0], [74.9, 846.0], [75.0, 846.0], [75.1, 846.0], [75.2, 858.0], [75.3, 858.0], [75.4, 858.0], [75.5, 858.0], [75.6, 859.0], [75.7, 859.0], [75.8, 859.0], [75.9, 859.0], [76.0, 860.0], [76.1, 860.0], [76.2, 860.0], [76.3, 860.0], [76.4, 866.0], [76.5, 866.0], [76.6, 866.0], [76.7, 866.0], [76.8, 866.0], [76.9, 867.0], [77.0, 867.0], [77.1, 867.0], [77.2, 867.0], [77.3, 877.0], [77.4, 877.0], [77.5, 877.0], [77.6, 877.0], [77.7, 889.0], [77.8, 889.0], [77.9, 889.0], [78.0, 889.0], [78.1, 889.0], [78.2, 889.0], [78.3, 889.0], [78.4, 889.0], [78.5, 890.0], [78.6, 890.0], [78.7, 890.0], [78.8, 890.0], [78.9, 909.0], [79.0, 909.0], [79.1, 909.0], [79.2, 909.0], [79.3, 920.0], [79.4, 920.0], [79.5, 920.0], [79.6, 920.0], [79.7, 922.0], [79.8, 922.0], [79.9, 922.0], [80.0, 922.0], [80.1, 922.0], [80.2, 922.0], [80.3, 922.0], [80.4, 922.0], [80.5, 927.0], [80.6, 927.0], [80.7, 927.0], [80.8, 927.0], [80.9, 931.0], [81.0, 931.0], [81.1, 931.0], [81.2, 931.0], [81.3, 933.0], [81.4, 933.0], [81.5, 933.0], [81.6, 933.0], [81.7, 948.0], [81.8, 948.0], [81.9, 948.0], [82.0, 948.0], [82.1, 950.0], [82.2, 950.0], [82.3, 950.0], [82.4, 950.0], [82.5, 952.0], [82.6, 952.0], [82.7, 952.0], [82.8, 952.0], [82.9, 953.0], [83.0, 953.0], [83.1, 953.0], [83.2, 953.0], [83.3, 954.0], [83.4, 954.0], [83.5, 954.0], [83.6, 954.0], [83.7, 967.0], [83.8, 967.0], [83.9, 967.0], [84.0, 967.0], [84.1, 967.0], [84.2, 967.0], [84.3, 967.0], [84.4, 967.0], [84.5, 978.0], [84.6, 978.0], [84.7, 978.0], [84.8, 978.0], [84.9, 983.0], [85.0, 983.0], [85.1, 983.0], [85.2, 983.0], [85.3, 992.0], [85.4, 992.0], [85.5, 992.0], [85.6, 992.0], [85.7, 1001.0], [85.8, 1001.0], [85.9, 1001.0], [86.0, 1001.0], [86.1, 1003.0], [86.2, 1003.0], [86.3, 1003.0], [86.4, 1003.0], [86.5, 1011.0], [86.6, 1011.0], [86.7, 1011.0], [86.8, 1011.0], [86.9, 1024.0], [87.0, 1024.0], [87.1, 1024.0], [87.2, 1024.0], [87.3, 1029.0], [87.4, 1029.0], [87.5, 1029.0], [87.6, 1029.0], [87.7, 1063.0], [87.8, 1063.0], [87.9, 1063.0], [88.0, 1063.0], [88.1, 1063.0], [88.2, 1063.0], [88.3, 1063.0], [88.4, 1063.0], [88.5, 1068.0], [88.6, 1068.0], [88.7, 1068.0], [88.8, 1068.0], [88.9, 1071.0], [89.0, 1071.0], [89.1, 1071.0], [89.2, 1071.0], [89.3, 1072.0], [89.4, 1072.0], [89.5, 1072.0], [89.6, 1072.0], [89.7, 1089.0], [89.8, 1089.0], [89.9, 1089.0], [90.0, 1089.0], [90.1, 1113.0], [90.2, 1113.0], [90.3, 1113.0], [90.4, 1113.0], [90.5, 1138.0], [90.6, 1138.0], [90.7, 1138.0], [90.8, 1138.0], [90.9, 1139.0], [91.0, 1139.0], [91.1, 1139.0], [91.2, 1139.0], [91.3, 1189.0], [91.4, 1189.0], [91.5, 1189.0], [91.6, 1189.0], [91.7, 1192.0], [91.8, 1192.0], [91.9, 1192.0], [92.0, 1192.0], [92.1, 1204.0], [92.2, 1204.0], [92.3, 1204.0], [92.4, 1204.0], [92.5, 1230.0], [92.6, 1230.0], [92.7, 1230.0], [92.8, 1230.0], [92.9, 1233.0], [93.0, 1233.0], [93.1, 1233.0], [93.2, 1233.0], [93.3, 1240.0], [93.4, 1240.0], [93.5, 1240.0], [93.6, 1240.0], [93.7, 1261.0], [93.8, 1261.0], [93.9, 1261.0], [94.0, 1261.0], [94.1, 1266.0], [94.2, 1266.0], [94.3, 1266.0], [94.4, 1266.0], [94.5, 1280.0], [94.6, 1280.0], [94.7, 1280.0], [94.8, 1280.0], [94.9, 1316.0], [95.0, 1316.0], [95.1, 1316.0], [95.2, 1316.0], [95.3, 1337.0], [95.4, 1337.0], [95.5, 1337.0], [95.6, 1337.0], [95.7, 1351.0], [95.8, 1351.0], [95.9, 1351.0], [96.0, 1351.0], [96.1, 1398.0], [96.2, 1398.0], [96.3, 1398.0], [96.4, 1398.0], [96.5, 1406.0], [96.6, 1406.0], [96.7, 1406.0], [96.8, 1406.0], [96.9, 1420.0], [97.0, 1420.0], [97.1, 1420.0], [97.2, 1420.0], [97.3, 1437.0], [97.4, 1437.0], [97.5, 1437.0], [97.6, 1437.0], [97.7, 1462.0], [97.8, 1462.0], [97.9, 1462.0], [98.0, 1462.0], [98.1, 1484.0], [98.2, 1484.0], [98.3, 1484.0], [98.4, 1484.0], [98.5, 1508.0], [98.6, 1508.0], [98.7, 1508.0], [98.8, 1508.0], [98.9, 1552.0], [99.0, 1552.0], [99.1, 1552.0], [99.2, 1552.0], [99.3, 1560.0], [99.4, 1560.0], [99.5, 1560.0], [99.6, 1560.0], [99.7, 1574.0], [99.8, 1574.0], [99.9, 1574.0], [100.0, 1574.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 44.0, "series": [{"data": [[600.0, 30.0], [700.0, 20.0], [800.0, 18.0], [200.0, 36.0], [900.0, 9.0], [1000.0, 7.0], [1100.0, 9.0], [300.0, 28.0], [1200.0, 10.0], [1300.0, 10.0], [1400.0, 6.0], [1500.0, 4.0], [400.0, 33.0], [100.0, 15.0], [1700.0, 2.0], [1800.0, 2.0], [500.0, 10.0], [2000.0, 1.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[600.0, 25.0], [700.0, 15.0], [200.0, 44.0], [800.0, 22.0], [900.0, 16.0], [1000.0, 6.0], [1100.0, 9.0], [300.0, 27.0], [1200.0, 10.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 2.0], [100.0, 28.0], [400.0, 19.0], [1600.0, 5.0], [1700.0, 1.0], [500.0, 16.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[600.0, 16.0], [700.0, 12.0], [200.0, 35.0], [800.0, 18.0], [900.0, 17.0], [1000.0, 11.0], [1100.0, 5.0], [300.0, 31.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 5.0], [1500.0, 4.0], [400.0, 25.0], [100.0, 36.0], [500.0, 24.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 373.0, "series": [{"data": [[0.0, 357.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 373.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 20.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.15600000000007, "minX": 1.72850976E12, "maxY": 43.15600000000007, "series": [{"data": [[1.72850976E12, 43.15600000000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72850976E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 138.0, "minX": 1.0, "maxY": 1664.0, "series": [{"data": [[32.0, 221.0], [33.0, 941.0], [35.0, 634.0], [36.0, 861.6], [37.0, 585.6], [38.0, 734.3333333333333], [39.0, 532.4], [41.0, 658.0], [40.0, 915.8333333333334], [43.0, 660.3571428571429], [42.0, 645.3333333333334], [44.0, 778.8333333333334], [45.0, 630.8095238095237], [46.0, 637.5757575757574], [47.0, 649.5172413793105], [48.0, 566.8571428571428], [49.0, 844.1764705882351], [50.0, 561.6], [51.0, 647.7], [52.0, 431.0], [13.0, 1404.0], [17.0, 1595.0], [18.0, 1291.0], [23.0, 515.5], [24.0, 626.0], [25.0, 812.0], [26.0, 407.0], [27.0, 226.0], [28.0, 178.0], [29.0, 849.25], [30.0, 871.0], [31.0, 355.5]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[43.63600000000001, 669.9520000000001]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[32.0, 170.0], [33.0, 191.0], [34.0, 444.0], [36.0, 706.5], [37.0, 236.0], [39.0, 527.75], [38.0, 434.0], [40.0, 458.0], [41.0, 383.75], [42.0, 535.4285714285714], [43.0, 624.5333333333334], [44.0, 509.56250000000006], [45.0, 577.4210526315791], [47.0, 640.0937499999998], [46.0, 529.25], [48.0, 735.7804878048781], [49.0, 646.4545454545455], [50.0, 818.3125], [51.0, 446.3333333333333], [52.0, 539.5], [4.0, 1171.0], [5.0, 647.0], [7.0, 357.0], [16.0, 826.0], [17.0, 260.0], [18.0, 887.6666666666666], [24.0, 205.0], [25.0, 213.0], [27.0, 1664.0], [28.0, 749.5], [29.0, 514.3333333333333], [30.0, 478.6666666666667]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[43.51999999999999, 609.1999999999995]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 233.0], [3.0, 196.0], [4.0, 546.0], [5.0, 368.0], [6.0, 773.0], [7.0, 772.0], [8.0, 393.0], [9.0, 662.0], [10.0, 1230.0], [11.0, 336.0], [12.0, 513.0], [13.0, 1138.0], [14.0, 219.0], [16.0, 707.0], [17.0, 545.0], [18.0, 1068.0], [19.0, 510.0], [20.0, 967.0], [21.0, 1316.0], [22.0, 161.0], [23.0, 909.0], [24.0, 1261.0], [25.0, 954.0], [26.0, 553.0], [27.0, 138.0], [28.0, 244.0], [29.0, 187.0], [30.0, 227.0], [31.0, 1552.0], [33.0, 430.0], [32.0, 1029.0], [35.0, 231.0], [34.0, 933.0], [37.0, 656.5], [36.0, 252.0], [39.0, 320.3333333333333], [38.0, 753.5], [41.0, 466.49999999999994], [40.0, 356.0], [42.0, 811.4], [43.0, 477.07142857142856], [44.0, 672.8235294117648], [45.0, 488.0588235294117], [47.0, 498.54838709677426], [46.0, 585.2962962962963], [48.0, 588.7666666666667], [49.0, 681.4090909090909], [51.0, 652.6000000000001], [50.0, 508.00000000000006], [52.0, 634.0], [1.0, 1484.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[42.31199999999998, 580.0720000000005]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 52.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5508.333333333333, "minX": 1.72850976E12, "maxY": 82833.33333333333, "series": [{"data": [[1.72850976E12, 82833.33333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72850976E12, 5508.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72850976E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 580.0720000000005, "minX": 1.72850976E12, "maxY": 669.9520000000001, "series": [{"data": [[1.72850976E12, 669.9520000000001]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72850976E12, 609.1999999999995]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72850976E12, 580.0720000000005]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72850976E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 579.3439999999996, "minX": 1.72850976E12, "maxY": 668.5200000000002, "series": [{"data": [[1.72850976E12, 668.5200000000002]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72850976E12, 608.1200000000007]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72850976E12, 579.3439999999996]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72850976E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72850976E12, "maxY": 54.304, "series": [{"data": [[1.72850976E12, 54.304]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72850976E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72850976E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72850976E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 134.0, "minX": 1.72850976E12, "maxY": 2006.0, "series": [{"data": [[1.72850976E12, 2006.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72850976E12, 1212.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72850976E12, 1663.49]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72850976E12, 1354.6999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72850976E12, 134.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72850976E12, 530.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72850976E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 369.0, "minX": 2.0, "maxY": 826.0, "series": [{"data": [[2.0, 515.5], [53.0, 726.0], [57.0, 369.0], [67.0, 538.0], [66.0, 468.5], [68.0, 614.0], [74.0, 565.5], [79.0, 428.0], [77.0, 519.0], [83.0, 562.0], [86.0, 582.5], [7.0, 546.0], [31.0, 826.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 369.0, "minX": 2.0, "maxY": 825.0, "series": [{"data": [[2.0, 511.5], [53.0, 726.0], [57.0, 369.0], [67.0, 537.0], [66.0, 467.5], [68.0, 613.0], [74.0, 564.5], [79.0, 428.0], [77.0, 519.0], [83.0, 562.0], [86.0, 582.0], [7.0, 546.0], [31.0, 825.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72850976E12, "maxY": 12.5, "series": [{"data": [[1.72850976E12, 12.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72850976E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72850976E12, "maxY": 12.5, "series": [{"data": [[1.72850976E12, 12.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72850976E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.72850976E12, "maxY": 4.166666666666667, "series": [{"data": [[1.72850976E12, 4.166666666666667]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.72850976E12, 4.166666666666667]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.72850976E12, 4.166666666666667]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72850976E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72850976E12, "maxY": 12.5, "series": [{"data": [[1.72850976E12, 12.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72850976E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

