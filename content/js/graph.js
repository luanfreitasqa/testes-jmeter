/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 129.0, "minX": 0.0, "maxY": 3455.0, "series": [{"data": [[0.0, 140.0], [0.1, 140.0], [0.2, 140.0], [0.3, 140.0], [0.4, 141.0], [0.5, 141.0], [0.6, 141.0], [0.7, 141.0], [0.8, 141.0], [0.9, 141.0], [1.0, 141.0], [1.1, 141.0], [1.2, 141.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 147.0], [1.7, 147.0], [1.8, 147.0], [1.9, 147.0], [2.0, 150.0], [2.1, 150.0], [2.2, 150.0], [2.3, 150.0], [2.4, 152.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 153.0], [2.9, 153.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 155.0], [3.7, 155.0], [3.8, 155.0], [3.9, 155.0], [4.0, 157.0], [4.1, 157.0], [4.2, 157.0], [4.3, 157.0], [4.4, 157.0], [4.5, 157.0], [4.6, 157.0], [4.7, 157.0], [4.8, 159.0], [4.9, 159.0], [5.0, 159.0], [5.1, 159.0], [5.2, 164.0], [5.3, 164.0], [5.4, 164.0], [5.5, 164.0], [5.6, 164.0], [5.7, 166.0], [5.8, 166.0], [5.9, 166.0], [6.0, 166.0], [6.1, 167.0], [6.2, 167.0], [6.3, 167.0], [6.4, 167.0], [6.5, 168.0], [6.6, 168.0], [6.7, 168.0], [6.8, 168.0], [6.9, 170.0], [7.0, 170.0], [7.1, 170.0], [7.2, 170.0], [7.3, 171.0], [7.4, 171.0], [7.5, 171.0], [7.6, 171.0], [7.7, 172.0], [7.8, 172.0], [7.9, 172.0], [8.0, 172.0], [8.1, 172.0], [8.2, 172.0], [8.3, 172.0], [8.4, 172.0], [8.5, 174.0], [8.6, 174.0], [8.7, 174.0], [8.8, 174.0], [8.9, 177.0], [9.0, 177.0], [9.1, 177.0], [9.2, 177.0], [9.3, 179.0], [9.4, 179.0], [9.5, 179.0], [9.6, 179.0], [9.7, 182.0], [9.8, 182.0], [9.9, 182.0], [10.0, 182.0], [10.1, 185.0], [10.2, 185.0], [10.3, 185.0], [10.4, 185.0], [10.5, 187.0], [10.6, 187.0], [10.7, 187.0], [10.8, 187.0], [10.9, 188.0], [11.0, 188.0], [11.1, 188.0], [11.2, 188.0], [11.3, 188.0], [11.4, 188.0], [11.5, 188.0], [11.6, 188.0], [11.7, 189.0], [11.8, 189.0], [11.9, 189.0], [12.0, 189.0], [12.1, 189.0], [12.2, 189.0], [12.3, 189.0], [12.4, 189.0], [12.5, 191.0], [12.6, 191.0], [12.7, 191.0], [12.8, 191.0], [12.9, 192.0], [13.0, 192.0], [13.1, 192.0], [13.2, 192.0], [13.3, 192.0], [13.4, 192.0], [13.5, 192.0], [13.6, 192.0], [13.7, 192.0], [13.8, 192.0], [13.9, 192.0], [14.0, 192.0], [14.1, 192.0], [14.2, 192.0], [14.3, 192.0], [14.4, 192.0], [14.5, 193.0], [14.6, 193.0], [14.7, 193.0], [14.8, 193.0], [14.9, 193.0], [15.0, 193.0], [15.1, 193.0], [15.2, 193.0], [15.3, 194.0], [15.4, 194.0], [15.5, 194.0], [15.6, 194.0], [15.7, 194.0], [15.8, 194.0], [15.9, 194.0], [16.0, 194.0], [16.1, 195.0], [16.2, 195.0], [16.3, 195.0], [16.4, 195.0], [16.5, 195.0], [16.6, 195.0], [16.7, 195.0], [16.8, 195.0], [16.9, 195.0], [17.0, 195.0], [17.1, 195.0], [17.2, 195.0], [17.3, 197.0], [17.4, 197.0], [17.5, 197.0], [17.6, 197.0], [17.7, 197.0], [17.8, 197.0], [17.9, 197.0], [18.0, 197.0], [18.1, 198.0], [18.2, 198.0], [18.3, 198.0], [18.4, 198.0], [18.5, 199.0], [18.6, 199.0], [18.7, 199.0], [18.8, 199.0], [18.9, 200.0], [19.0, 200.0], [19.1, 200.0], [19.2, 200.0], [19.3, 200.0], [19.4, 200.0], [19.5, 200.0], [19.6, 200.0], [19.7, 201.0], [19.8, 201.0], [19.9, 201.0], [20.0, 201.0], [20.1, 201.0], [20.2, 201.0], [20.3, 201.0], [20.4, 201.0], [20.5, 202.0], [20.6, 202.0], [20.7, 202.0], [20.8, 202.0], [20.9, 203.0], [21.0, 203.0], [21.1, 203.0], [21.2, 203.0], [21.3, 203.0], [21.4, 203.0], [21.5, 203.0], [21.6, 203.0], [21.7, 204.0], [21.8, 204.0], [21.9, 204.0], [22.0, 204.0], [22.1, 205.0], [22.2, 205.0], [22.3, 205.0], [22.4, 205.0], [22.5, 207.0], [22.6, 207.0], [22.7, 207.0], [22.8, 208.0], [22.9, 208.0], [23.0, 208.0], [23.1, 208.0], [23.2, 209.0], [23.3, 209.0], [23.4, 209.0], [23.5, 209.0], [23.6, 209.0], [23.7, 209.0], [23.8, 209.0], [23.9, 209.0], [24.0, 211.0], [24.1, 211.0], [24.2, 211.0], [24.3, 211.0], [24.4, 214.0], [24.5, 214.0], [24.6, 214.0], [24.7, 214.0], [24.8, 214.0], [24.9, 214.0], [25.0, 214.0], [25.1, 214.0], [25.2, 215.0], [25.3, 215.0], [25.4, 215.0], [25.5, 215.0], [25.6, 216.0], [25.7, 216.0], [25.8, 216.0], [25.9, 216.0], [26.0, 217.0], [26.1, 217.0], [26.2, 217.0], [26.3, 217.0], [26.4, 219.0], [26.5, 219.0], [26.6, 219.0], [26.7, 219.0], [26.8, 219.0], [26.9, 219.0], [27.0, 219.0], [27.1, 219.0], [27.2, 220.0], [27.3, 220.0], [27.4, 220.0], [27.5, 220.0], [27.6, 221.0], [27.7, 221.0], [27.8, 221.0], [27.9, 221.0], [28.0, 221.0], [28.1, 221.0], [28.2, 221.0], [28.3, 221.0], [28.4, 221.0], [28.5, 221.0], [28.6, 221.0], [28.7, 221.0], [28.8, 223.0], [28.9, 223.0], [29.0, 223.0], [29.1, 223.0], [29.2, 224.0], [29.3, 224.0], [29.4, 224.0], [29.5, 224.0], [29.6, 225.0], [29.7, 225.0], [29.8, 225.0], [29.9, 225.0], [30.0, 225.0], [30.1, 225.0], [30.2, 225.0], [30.3, 225.0], [30.4, 228.0], [30.5, 228.0], [30.6, 228.0], [30.7, 228.0], [30.8, 228.0], [30.9, 228.0], [31.0, 228.0], [31.1, 228.0], [31.2, 232.0], [31.3, 232.0], [31.4, 232.0], [31.5, 232.0], [31.6, 232.0], [31.7, 232.0], [31.8, 232.0], [31.9, 232.0], [32.0, 233.0], [32.1, 233.0], [32.2, 233.0], [32.3, 233.0], [32.4, 233.0], [32.5, 233.0], [32.6, 233.0], [32.7, 233.0], [32.8, 233.0], [32.9, 233.0], [33.0, 233.0], [33.1, 233.0], [33.2, 234.0], [33.3, 234.0], [33.4, 234.0], [33.5, 234.0], [33.6, 238.0], [33.7, 238.0], [33.8, 238.0], [33.9, 238.0], [34.0, 241.0], [34.1, 241.0], [34.2, 241.0], [34.3, 241.0], [34.4, 243.0], [34.5, 243.0], [34.6, 243.0], [34.7, 243.0], [34.8, 245.0], [34.9, 245.0], [35.0, 245.0], [35.1, 245.0], [35.2, 245.0], [35.3, 245.0], [35.4, 245.0], [35.5, 245.0], [35.6, 245.0], [35.7, 245.0], [35.8, 245.0], [35.9, 245.0], [36.0, 246.0], [36.1, 246.0], [36.2, 246.0], [36.3, 246.0], [36.4, 248.0], [36.5, 248.0], [36.6, 248.0], [36.7, 248.0], [36.8, 248.0], [36.9, 248.0], [37.0, 248.0], [37.1, 248.0], [37.2, 248.0], [37.3, 248.0], [37.4, 248.0], [37.5, 248.0], [37.6, 248.0], [37.7, 248.0], [37.8, 248.0], [37.9, 248.0], [38.0, 250.0], [38.1, 250.0], [38.2, 250.0], [38.3, 250.0], [38.4, 251.0], [38.5, 251.0], [38.6, 251.0], [38.7, 251.0], [38.8, 257.0], [38.9, 257.0], [39.0, 257.0], [39.1, 257.0], [39.2, 258.0], [39.3, 258.0], [39.4, 258.0], [39.5, 258.0], [39.6, 261.0], [39.7, 261.0], [39.8, 261.0], [39.9, 261.0], [40.0, 269.0], [40.1, 269.0], [40.2, 269.0], [40.3, 269.0], [40.4, 270.0], [40.5, 270.0], [40.6, 270.0], [40.7, 270.0], [40.8, 271.0], [40.9, 271.0], [41.0, 271.0], [41.1, 271.0], [41.2, 272.0], [41.3, 272.0], [41.4, 272.0], [41.5, 272.0], [41.6, 274.0], [41.7, 274.0], [41.8, 274.0], [41.9, 274.0], [42.0, 277.0], [42.1, 277.0], [42.2, 277.0], [42.3, 277.0], [42.4, 280.0], [42.5, 280.0], [42.6, 280.0], [42.7, 280.0], [42.8, 286.0], [42.9, 286.0], [43.0, 286.0], [43.1, 286.0], [43.2, 288.0], [43.3, 288.0], [43.4, 288.0], [43.5, 288.0], [43.6, 290.0], [43.7, 290.0], [43.8, 290.0], [43.9, 290.0], [44.0, 290.0], [44.1, 290.0], [44.2, 290.0], [44.3, 290.0], [44.4, 292.0], [44.5, 292.0], [44.6, 292.0], [44.7, 292.0], [44.8, 292.0], [44.9, 292.0], [45.0, 292.0], [45.1, 292.0], [45.2, 297.0], [45.3, 297.0], [45.4, 297.0], [45.5, 297.0], [45.6, 305.0], [45.7, 305.0], [45.8, 305.0], [45.9, 305.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 312.0], [46.4, 312.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 314.0], [46.9, 314.0], [47.0, 314.0], [47.1, 314.0], [47.2, 317.0], [47.3, 317.0], [47.4, 317.0], [47.5, 317.0], [47.6, 328.0], [47.7, 328.0], [47.8, 328.0], [47.9, 328.0], [48.0, 336.0], [48.1, 336.0], [48.2, 336.0], [48.3, 336.0], [48.4, 336.0], [48.5, 336.0], [48.6, 336.0], [48.7, 336.0], [48.8, 338.0], [48.9, 338.0], [49.0, 338.0], [49.1, 338.0], [49.2, 341.0], [49.3, 341.0], [49.4, 341.0], [49.5, 341.0], [49.6, 346.0], [49.7, 346.0], [49.8, 346.0], [49.9, 346.0], [50.0, 361.0], [50.1, 361.0], [50.2, 361.0], [50.3, 361.0], [50.4, 364.0], [50.5, 364.0], [50.6, 364.0], [50.7, 364.0], [50.8, 372.0], [50.9, 372.0], [51.0, 372.0], [51.1, 372.0], [51.2, 375.0], [51.3, 375.0], [51.4, 375.0], [51.5, 375.0], [51.6, 376.0], [51.7, 376.0], [51.8, 376.0], [51.9, 376.0], [52.0, 378.0], [52.1, 378.0], [52.2, 378.0], [52.3, 378.0], [52.4, 378.0], [52.5, 378.0], [52.6, 378.0], [52.7, 378.0], [52.8, 378.0], [52.9, 378.0], [53.0, 378.0], [53.1, 378.0], [53.2, 381.0], [53.3, 381.0], [53.4, 381.0], [53.5, 381.0], [53.6, 399.0], [53.7, 399.0], [53.8, 399.0], [53.9, 399.0], [54.0, 416.0], [54.1, 416.0], [54.2, 416.0], [54.3, 416.0], [54.4, 421.0], [54.5, 421.0], [54.6, 421.0], [54.7, 421.0], [54.8, 421.0], [54.9, 421.0], [55.0, 421.0], [55.1, 421.0], [55.2, 424.0], [55.3, 424.0], [55.4, 424.0], [55.5, 424.0], [55.6, 442.0], [55.7, 442.0], [55.8, 442.0], [55.9, 442.0], [56.0, 446.0], [56.1, 446.0], [56.2, 446.0], [56.3, 446.0], [56.4, 446.0], [56.5, 446.0], [56.6, 446.0], [56.7, 446.0], [56.8, 448.0], [56.9, 448.0], [57.0, 448.0], [57.1, 448.0], [57.2, 459.0], [57.3, 459.0], [57.4, 459.0], [57.5, 459.0], [57.6, 462.0], [57.7, 462.0], [57.8, 462.0], [57.9, 462.0], [58.0, 463.0], [58.1, 463.0], [58.2, 463.0], [58.3, 463.0], [58.4, 481.0], [58.5, 481.0], [58.6, 481.0], [58.7, 481.0], [58.8, 485.0], [58.9, 485.0], [59.0, 485.0], [59.1, 485.0], [59.2, 487.0], [59.3, 487.0], [59.4, 487.0], [59.5, 487.0], [59.6, 487.0], [59.7, 487.0], [59.8, 487.0], [59.9, 487.0], [60.0, 492.0], [60.1, 492.0], [60.2, 492.0], [60.3, 492.0], [60.4, 495.0], [60.5, 495.0], [60.6, 495.0], [60.7, 495.0], [60.8, 495.0], [60.9, 495.0], [61.0, 495.0], [61.1, 495.0], [61.2, 499.0], [61.3, 499.0], [61.4, 499.0], [61.5, 499.0], [61.6, 500.0], [61.7, 500.0], [61.8, 500.0], [61.9, 500.0], [62.0, 500.0], [62.1, 500.0], [62.2, 500.0], [62.3, 500.0], [62.4, 509.0], [62.5, 509.0], [62.6, 509.0], [62.7, 509.0], [62.8, 512.0], [62.9, 512.0], [63.0, 512.0], [63.1, 512.0], [63.2, 527.0], [63.3, 527.0], [63.4, 527.0], [63.5, 527.0], [63.6, 527.0], [63.7, 527.0], [63.8, 527.0], [63.9, 527.0], [64.0, 530.0], [64.1, 530.0], [64.2, 530.0], [64.3, 530.0], [64.4, 531.0], [64.5, 531.0], [64.6, 531.0], [64.7, 531.0], [64.8, 531.0], [64.9, 531.0], [65.0, 531.0], [65.1, 531.0], [65.2, 535.0], [65.3, 535.0], [65.4, 535.0], [65.5, 535.0], [65.6, 542.0], [65.7, 542.0], [65.8, 542.0], [65.9, 542.0], [66.0, 543.0], [66.1, 543.0], [66.2, 543.0], [66.3, 543.0], [66.4, 554.0], [66.5, 554.0], [66.6, 554.0], [66.7, 554.0], [66.8, 561.0], [66.9, 561.0], [67.0, 561.0], [67.1, 561.0], [67.2, 567.0], [67.3, 567.0], [67.4, 567.0], [67.5, 567.0], [67.6, 568.0], [67.7, 568.0], [67.8, 568.0], [67.9, 568.0], [68.0, 572.0], [68.1, 572.0], [68.2, 572.0], [68.3, 572.0], [68.4, 584.0], [68.5, 584.0], [68.6, 584.0], [68.7, 584.0], [68.8, 589.0], [68.9, 589.0], [69.0, 589.0], [69.1, 589.0], [69.2, 600.0], [69.3, 600.0], [69.4, 600.0], [69.5, 600.0], [69.6, 616.0], [69.7, 616.0], [69.8, 616.0], [69.9, 616.0], [70.0, 617.0], [70.1, 617.0], [70.2, 617.0], [70.3, 617.0], [70.4, 630.0], [70.5, 630.0], [70.6, 630.0], [70.7, 630.0], [70.8, 643.0], [70.9, 643.0], [71.0, 643.0], [71.1, 643.0], [71.2, 648.0], [71.3, 648.0], [71.4, 648.0], [71.5, 648.0], [71.6, 650.0], [71.7, 650.0], [71.8, 650.0], [71.9, 650.0], [72.0, 653.0], [72.1, 653.0], [72.2, 653.0], [72.3, 653.0], [72.4, 662.0], [72.5, 662.0], [72.6, 662.0], [72.7, 662.0], [72.8, 662.0], [72.9, 665.0], [73.0, 665.0], [73.1, 665.0], [73.2, 665.0], [73.3, 674.0], [73.4, 674.0], [73.5, 674.0], [73.6, 674.0], [73.7, 675.0], [73.8, 675.0], [73.9, 675.0], [74.0, 675.0], [74.1, 680.0], [74.2, 680.0], [74.3, 680.0], [74.4, 680.0], [74.5, 699.0], [74.6, 699.0], [74.7, 699.0], [74.8, 699.0], [74.9, 700.0], [75.0, 700.0], [75.1, 700.0], [75.2, 700.0], [75.3, 703.0], [75.4, 703.0], [75.5, 703.0], [75.6, 703.0], [75.7, 708.0], [75.8, 708.0], [75.9, 708.0], [76.0, 708.0], [76.1, 710.0], [76.2, 710.0], [76.3, 710.0], [76.4, 710.0], [76.5, 713.0], [76.6, 713.0], [76.7, 713.0], [76.8, 713.0], [76.9, 716.0], [77.0, 716.0], [77.1, 716.0], [77.2, 716.0], [77.3, 729.0], [77.4, 729.0], [77.5, 729.0], [77.6, 729.0], [77.7, 740.0], [77.8, 740.0], [77.9, 740.0], [78.0, 740.0], [78.1, 750.0], [78.2, 750.0], [78.3, 750.0], [78.4, 750.0], [78.5, 753.0], [78.6, 753.0], [78.7, 753.0], [78.8, 753.0], [78.9, 756.0], [79.0, 756.0], [79.1, 756.0], [79.2, 756.0], [79.3, 757.0], [79.4, 757.0], [79.5, 757.0], [79.6, 757.0], [79.7, 758.0], [79.8, 758.0], [79.9, 758.0], [80.0, 758.0], [80.1, 760.0], [80.2, 760.0], [80.3, 760.0], [80.4, 760.0], [80.5, 783.0], [80.6, 783.0], [80.7, 783.0], [80.8, 783.0], [80.9, 787.0], [81.0, 787.0], [81.1, 787.0], [81.2, 787.0], [81.3, 806.0], [81.4, 806.0], [81.5, 806.0], [81.6, 806.0], [81.7, 813.0], [81.8, 813.0], [81.9, 813.0], [82.0, 813.0], [82.1, 815.0], [82.2, 815.0], [82.3, 815.0], [82.4, 815.0], [82.5, 815.0], [82.6, 815.0], [82.7, 815.0], [82.8, 815.0], [82.9, 821.0], [83.0, 821.0], [83.1, 821.0], [83.2, 821.0], [83.3, 826.0], [83.4, 826.0], [83.5, 826.0], [83.6, 826.0], [83.7, 834.0], [83.8, 834.0], [83.9, 834.0], [84.0, 834.0], [84.1, 835.0], [84.2, 835.0], [84.3, 835.0], [84.4, 835.0], [84.5, 841.0], [84.6, 841.0], [84.7, 841.0], [84.8, 841.0], [84.9, 841.0], [85.0, 841.0], [85.1, 841.0], [85.2, 841.0], [85.3, 865.0], [85.4, 865.0], [85.5, 865.0], [85.6, 865.0], [85.7, 873.0], [85.8, 873.0], [85.9, 873.0], [86.0, 873.0], [86.1, 906.0], [86.2, 906.0], [86.3, 906.0], [86.4, 906.0], [86.5, 934.0], [86.6, 934.0], [86.7, 934.0], [86.8, 934.0], [86.9, 959.0], [87.0, 959.0], [87.1, 959.0], [87.2, 959.0], [87.3, 971.0], [87.4, 971.0], [87.5, 971.0], [87.6, 971.0], [87.7, 1007.0], [87.8, 1007.0], [87.9, 1007.0], [88.0, 1007.0], [88.1, 1056.0], [88.2, 1056.0], [88.3, 1056.0], [88.4, 1056.0], [88.5, 1070.0], [88.6, 1070.0], [88.7, 1070.0], [88.8, 1070.0], [88.9, 1093.0], [89.0, 1093.0], [89.1, 1093.0], [89.2, 1093.0], [89.3, 1124.0], [89.4, 1124.0], [89.5, 1124.0], [89.6, 1124.0], [89.7, 1153.0], [89.8, 1153.0], [89.9, 1153.0], [90.0, 1153.0], [90.1, 1159.0], [90.2, 1159.0], [90.3, 1159.0], [90.4, 1159.0], [90.5, 1163.0], [90.6, 1163.0], [90.7, 1163.0], [90.8, 1163.0], [90.9, 1178.0], [91.0, 1178.0], [91.1, 1178.0], [91.2, 1178.0], [91.3, 1185.0], [91.4, 1185.0], [91.5, 1185.0], [91.6, 1185.0], [91.7, 1227.0], [91.8, 1227.0], [91.9, 1227.0], [92.0, 1227.0], [92.1, 1268.0], [92.2, 1268.0], [92.3, 1268.0], [92.4, 1268.0], [92.5, 1292.0], [92.6, 1292.0], [92.7, 1292.0], [92.8, 1292.0], [92.9, 1403.0], [93.0, 1403.0], [93.1, 1403.0], [93.2, 1403.0], [93.3, 1409.0], [93.4, 1409.0], [93.5, 1409.0], [93.6, 1409.0], [93.7, 1430.0], [93.8, 1430.0], [93.9, 1430.0], [94.0, 1430.0], [94.1, 1543.0], [94.2, 1543.0], [94.3, 1543.0], [94.4, 1543.0], [94.5, 1552.0], [94.6, 1552.0], [94.7, 1552.0], [94.8, 1552.0], [94.9, 1584.0], [95.0, 1584.0], [95.1, 1584.0], [95.2, 1584.0], [95.3, 1589.0], [95.4, 1589.0], [95.5, 1589.0], [95.6, 1589.0], [95.7, 1642.0], [95.8, 1642.0], [95.9, 1642.0], [96.0, 1642.0], [96.1, 1642.0], [96.2, 1642.0], [96.3, 1642.0], [96.4, 1642.0], [96.5, 1650.0], [96.6, 1650.0], [96.7, 1650.0], [96.8, 1650.0], [96.9, 1652.0], [97.0, 1652.0], [97.1, 1652.0], [97.2, 1652.0], [97.3, 1806.0], [97.4, 1806.0], [97.5, 1806.0], [97.6, 1806.0], [97.7, 2199.0], [97.8, 2199.0], [97.9, 2199.0], [98.0, 2199.0], [98.1, 2237.0], [98.2, 2237.0], [98.3, 2237.0], [98.4, 2237.0], [98.5, 2409.0], [98.6, 2409.0], [98.7, 2409.0], [98.8, 2409.0], [98.9, 2495.0], [99.0, 2495.0], [99.1, 2495.0], [99.2, 2495.0], [99.3, 2687.0], [99.4, 2687.0], [99.5, 2687.0], [99.6, 2687.0], [99.7, 3212.0], [99.8, 3212.0], [99.9, 3212.0], [100.0, 3212.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 134.0], [0.1, 134.0], [0.2, 134.0], [0.3, 134.0], [0.4, 138.0], [0.5, 138.0], [0.6, 138.0], [0.7, 138.0], [0.8, 139.0], [0.9, 139.0], [1.0, 139.0], [1.1, 139.0], [1.2, 139.0], [1.3, 142.0], [1.4, 142.0], [1.5, 142.0], [1.6, 142.0], [1.7, 142.0], [1.8, 142.0], [1.9, 142.0], [2.0, 143.0], [2.1, 143.0], [2.2, 143.0], [2.3, 143.0], [2.4, 144.0], [2.5, 144.0], [2.6, 144.0], [2.7, 144.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 147.0], [3.6, 148.0], [3.7, 148.0], [3.8, 148.0], [3.9, 148.0], [4.0, 149.0], [4.1, 149.0], [4.2, 149.0], [4.3, 149.0], [4.4, 150.0], [4.5, 150.0], [4.6, 150.0], [4.7, 150.0], [4.8, 150.0], [4.9, 150.0], [5.0, 150.0], [5.1, 150.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 152.0], [5.7, 152.0], [5.8, 152.0], [5.9, 152.0], [6.0, 152.0], [6.1, 152.0], [6.2, 152.0], [6.3, 152.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 154.0], [6.8, 154.0], [6.9, 154.0], [7.0, 154.0], [7.1, 154.0], [7.2, 155.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 156.0], [8.1, 156.0], [8.2, 156.0], [8.3, 156.0], [8.4, 156.0], [8.5, 156.0], [8.6, 156.0], [8.7, 156.0], [8.8, 159.0], [8.9, 159.0], [9.0, 159.0], [9.1, 159.0], [9.2, 159.0], [9.3, 159.0], [9.4, 159.0], [9.5, 159.0], [9.6, 160.0], [9.7, 160.0], [9.8, 160.0], [9.9, 160.0], [10.0, 161.0], [10.1, 161.0], [10.2, 161.0], [10.3, 161.0], [10.4, 161.0], [10.5, 161.0], [10.6, 161.0], [10.7, 161.0], [10.8, 161.0], [10.9, 161.0], [11.0, 161.0], [11.1, 161.0], [11.2, 163.0], [11.3, 163.0], [11.4, 163.0], [11.5, 163.0], [11.6, 164.0], [11.7, 164.0], [11.8, 164.0], [11.9, 164.0], [12.0, 164.0], [12.1, 164.0], [12.2, 164.0], [12.3, 164.0], [12.4, 164.0], [12.5, 164.0], [12.6, 164.0], [12.7, 164.0], [12.8, 164.0], [12.9, 164.0], [13.0, 164.0], [13.1, 164.0], [13.2, 164.0], [13.3, 164.0], [13.4, 164.0], [13.5, 164.0], [13.6, 164.0], [13.7, 164.0], [13.8, 164.0], [13.9, 164.0], [14.0, 165.0], [14.1, 165.0], [14.2, 165.0], [14.3, 165.0], [14.4, 165.0], [14.5, 165.0], [14.6, 165.0], [14.7, 165.0], [14.8, 165.0], [14.9, 165.0], [15.0, 165.0], [15.1, 165.0], [15.2, 165.0], [15.3, 165.0], [15.4, 165.0], [15.5, 165.0], [15.6, 166.0], [15.7, 166.0], [15.8, 166.0], [15.9, 166.0], [16.0, 171.0], [16.1, 171.0], [16.2, 171.0], [16.3, 171.0], [16.4, 171.0], [16.5, 171.0], [16.6, 171.0], [16.7, 171.0], [16.8, 172.0], [16.9, 172.0], [17.0, 172.0], [17.1, 172.0], [17.2, 173.0], [17.3, 173.0], [17.4, 173.0], [17.5, 173.0], [17.6, 173.0], [17.7, 173.0], [17.8, 173.0], [17.9, 173.0], [18.0, 174.0], [18.1, 174.0], [18.2, 174.0], [18.3, 174.0], [18.4, 175.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 181.0], [18.9, 181.0], [19.0, 181.0], [19.1, 181.0], [19.2, 182.0], [19.3, 182.0], [19.4, 182.0], [19.5, 182.0], [19.6, 183.0], [19.7, 183.0], [19.8, 183.0], [19.9, 183.0], [20.0, 185.0], [20.1, 185.0], [20.2, 185.0], [20.3, 185.0], [20.4, 187.0], [20.5, 187.0], [20.6, 187.0], [20.7, 187.0], [20.8, 187.0], [20.9, 187.0], [21.0, 187.0], [21.1, 187.0], [21.2, 187.0], [21.3, 187.0], [21.4, 187.0], [21.5, 187.0], [21.6, 189.0], [21.7, 189.0], [21.8, 189.0], [21.9, 189.0], [22.0, 190.0], [22.1, 190.0], [22.2, 190.0], [22.3, 190.0], [22.4, 191.0], [22.5, 191.0], [22.6, 191.0], [22.7, 191.0], [22.8, 192.0], [22.9, 192.0], [23.0, 192.0], [23.1, 192.0], [23.2, 192.0], [23.3, 192.0], [23.4, 192.0], [23.5, 192.0], [23.6, 192.0], [23.7, 192.0], [23.8, 192.0], [23.9, 192.0], [24.0, 192.0], [24.1, 192.0], [24.2, 192.0], [24.3, 192.0], [24.4, 193.0], [24.5, 193.0], [24.6, 193.0], [24.7, 193.0], [24.8, 193.0], [24.9, 193.0], [25.0, 193.0], [25.1, 193.0], [25.2, 194.0], [25.3, 194.0], [25.4, 194.0], [25.5, 194.0], [25.6, 194.0], [25.7, 194.0], [25.8, 194.0], [25.9, 194.0], [26.0, 194.0], [26.1, 194.0], [26.2, 194.0], [26.3, 194.0], [26.4, 197.0], [26.5, 197.0], [26.6, 197.0], [26.7, 197.0], [26.8, 197.0], [26.9, 197.0], [27.0, 197.0], [27.1, 197.0], [27.2, 197.0], [27.3, 197.0], [27.4, 197.0], [27.5, 197.0], [27.6, 198.0], [27.7, 198.0], [27.8, 198.0], [27.9, 198.0], [28.0, 199.0], [28.1, 199.0], [28.2, 199.0], [28.3, 199.0], [28.4, 200.0], [28.5, 200.0], [28.6, 200.0], [28.7, 200.0], [28.8, 200.0], [28.9, 200.0], [29.0, 200.0], [29.1, 200.0], [29.2, 202.0], [29.3, 202.0], [29.4, 202.0], [29.5, 202.0], [29.6, 205.0], [29.7, 205.0], [29.8, 205.0], [29.9, 205.0], [30.0, 206.0], [30.1, 206.0], [30.2, 206.0], [30.3, 206.0], [30.4, 207.0], [30.5, 207.0], [30.6, 207.0], [30.7, 207.0], [30.8, 207.0], [30.9, 207.0], [31.0, 207.0], [31.1, 207.0], [31.2, 208.0], [31.3, 208.0], [31.4, 208.0], [31.5, 208.0], [31.6, 208.0], [31.7, 208.0], [31.8, 208.0], [31.9, 208.0], [32.0, 208.0], [32.1, 208.0], [32.2, 208.0], [32.3, 208.0], [32.4, 210.0], [32.5, 210.0], [32.6, 210.0], [32.7, 210.0], [32.8, 210.0], [32.9, 210.0], [33.0, 210.0], [33.1, 210.0], [33.2, 211.0], [33.3, 211.0], [33.4, 211.0], [33.5, 211.0], [33.6, 212.0], [33.7, 212.0], [33.8, 212.0], [33.9, 212.0], [34.0, 213.0], [34.1, 213.0], [34.2, 213.0], [34.3, 213.0], [34.4, 213.0], [34.5, 213.0], [34.6, 213.0], [34.7, 213.0], [34.8, 214.0], [34.9, 214.0], [35.0, 214.0], [35.1, 214.0], [35.2, 214.0], [35.3, 214.0], [35.4, 214.0], [35.5, 214.0], [35.6, 215.0], [35.7, 215.0], [35.8, 215.0], [35.9, 215.0], [36.0, 215.0], [36.1, 215.0], [36.2, 215.0], [36.3, 215.0], [36.4, 218.0], [36.5, 218.0], [36.6, 218.0], [36.7, 218.0], [36.8, 221.0], [36.9, 221.0], [37.0, 221.0], [37.1, 221.0], [37.2, 224.0], [37.3, 224.0], [37.4, 224.0], [37.5, 224.0], [37.6, 225.0], [37.7, 225.0], [37.8, 225.0], [37.9, 225.0], [38.0, 226.0], [38.1, 226.0], [38.2, 226.0], [38.3, 226.0], [38.4, 227.0], [38.5, 227.0], [38.6, 227.0], [38.7, 227.0], [38.8, 227.0], [38.9, 227.0], [39.0, 227.0], [39.1, 227.0], [39.2, 228.0], [39.3, 228.0], [39.4, 228.0], [39.5, 228.0], [39.6, 228.0], [39.7, 228.0], [39.8, 228.0], [39.9, 228.0], [40.0, 229.0], [40.1, 229.0], [40.2, 229.0], [40.3, 229.0], [40.4, 230.0], [40.5, 230.0], [40.6, 230.0], [40.7, 230.0], [40.8, 234.0], [40.9, 234.0], [41.0, 234.0], [41.1, 234.0], [41.2, 234.0], [41.3, 234.0], [41.4, 234.0], [41.5, 234.0], [41.6, 238.0], [41.7, 238.0], [41.8, 238.0], [41.9, 238.0], [42.0, 239.0], [42.1, 239.0], [42.2, 239.0], [42.3, 239.0], [42.4, 240.0], [42.5, 240.0], [42.6, 240.0], [42.7, 240.0], [42.8, 240.0], [42.9, 240.0], [43.0, 240.0], [43.1, 240.0], [43.2, 244.0], [43.3, 244.0], [43.4, 244.0], [43.5, 244.0], [43.6, 245.0], [43.7, 245.0], [43.8, 245.0], [43.9, 245.0], [44.0, 245.0], [44.1, 245.0], [44.2, 245.0], [44.3, 245.0], [44.4, 246.0], [44.5, 246.0], [44.6, 246.0], [44.7, 246.0], [44.8, 248.0], [44.9, 248.0], [45.0, 248.0], [45.1, 248.0], [45.2, 255.0], [45.3, 255.0], [45.4, 255.0], [45.5, 255.0], [45.6, 258.0], [45.7, 258.0], [45.8, 258.0], [45.9, 258.0], [46.0, 264.0], [46.1, 264.0], [46.2, 264.0], [46.3, 264.0], [46.4, 265.0], [46.5, 265.0], [46.6, 265.0], [46.7, 265.0], [46.8, 266.0], [46.9, 266.0], [47.0, 266.0], [47.1, 266.0], [47.2, 272.0], [47.3, 272.0], [47.4, 272.0], [47.5, 272.0], [47.6, 278.0], [47.7, 278.0], [47.8, 278.0], [47.9, 278.0], [48.0, 281.0], [48.1, 281.0], [48.2, 281.0], [48.3, 281.0], [48.4, 282.0], [48.5, 282.0], [48.6, 282.0], [48.7, 282.0], [48.8, 285.0], [48.9, 285.0], [49.0, 285.0], [49.1, 285.0], [49.2, 286.0], [49.3, 286.0], [49.4, 286.0], [49.5, 286.0], [49.6, 292.0], [49.7, 292.0], [49.8, 292.0], [49.9, 292.0], [50.0, 303.0], [50.1, 303.0], [50.2, 303.0], [50.3, 303.0], [50.4, 309.0], [50.5, 309.0], [50.6, 309.0], [50.7, 309.0], [50.8, 316.0], [50.9, 316.0], [51.0, 316.0], [51.1, 316.0], [51.2, 317.0], [51.3, 317.0], [51.4, 317.0], [51.5, 317.0], [51.6, 321.0], [51.7, 321.0], [51.8, 321.0], [51.9, 321.0], [52.0, 322.0], [52.1, 322.0], [52.2, 322.0], [52.3, 322.0], [52.4, 332.0], [52.5, 332.0], [52.6, 332.0], [52.7, 332.0], [52.8, 343.0], [52.9, 343.0], [53.0, 343.0], [53.1, 343.0], [53.2, 348.0], [53.3, 348.0], [53.4, 348.0], [53.5, 348.0], [53.6, 361.0], [53.7, 361.0], [53.8, 361.0], [53.9, 361.0], [54.0, 364.0], [54.1, 364.0], [54.2, 364.0], [54.3, 364.0], [54.4, 369.0], [54.5, 369.0], [54.6, 369.0], [54.7, 369.0], [54.8, 369.0], [54.9, 369.0], [55.0, 369.0], [55.1, 369.0], [55.2, 371.0], [55.3, 371.0], [55.4, 371.0], [55.5, 371.0], [55.6, 376.0], [55.7, 376.0], [55.8, 376.0], [55.9, 376.0], [56.0, 384.0], [56.1, 384.0], [56.2, 384.0], [56.3, 384.0], [56.4, 384.0], [56.5, 384.0], [56.6, 384.0], [56.7, 384.0], [56.8, 390.0], [56.9, 390.0], [57.0, 390.0], [57.1, 390.0], [57.2, 390.0], [57.3, 390.0], [57.4, 390.0], [57.5, 390.0], [57.6, 392.0], [57.7, 392.0], [57.8, 392.0], [57.9, 392.0], [58.0, 394.0], [58.1, 394.0], [58.2, 394.0], [58.3, 394.0], [58.4, 399.0], [58.5, 399.0], [58.6, 399.0], [58.7, 399.0], [58.8, 401.0], [58.9, 401.0], [59.0, 401.0], [59.1, 401.0], [59.2, 414.0], [59.3, 414.0], [59.4, 414.0], [59.5, 414.0], [59.6, 430.0], [59.7, 430.0], [59.8, 430.0], [59.9, 430.0], [60.0, 433.0], [60.1, 433.0], [60.2, 433.0], [60.3, 433.0], [60.4, 435.0], [60.5, 435.0], [60.6, 435.0], [60.7, 435.0], [60.8, 436.0], [60.9, 436.0], [61.0, 436.0], [61.1, 436.0], [61.2, 437.0], [61.3, 437.0], [61.4, 437.0], [61.5, 437.0], [61.6, 446.0], [61.7, 446.0], [61.8, 446.0], [61.9, 446.0], [62.0, 446.0], [62.1, 446.0], [62.2, 446.0], [62.3, 446.0], [62.4, 447.0], [62.5, 447.0], [62.6, 447.0], [62.7, 447.0], [62.8, 450.0], [62.9, 450.0], [63.0, 450.0], [63.1, 450.0], [63.2, 461.0], [63.3, 461.0], [63.4, 461.0], [63.5, 461.0], [63.6, 462.0], [63.7, 462.0], [63.8, 462.0], [63.9, 462.0], [64.0, 465.0], [64.1, 465.0], [64.2, 465.0], [64.3, 465.0], [64.4, 465.0], [64.5, 465.0], [64.6, 465.0], [64.7, 465.0], [64.8, 467.0], [64.9, 467.0], [65.0, 467.0], [65.1, 467.0], [65.2, 468.0], [65.3, 468.0], [65.4, 468.0], [65.5, 468.0], [65.6, 469.0], [65.7, 469.0], [65.8, 469.0], [65.9, 469.0], [66.0, 469.0], [66.1, 469.0], [66.2, 469.0], [66.3, 469.0], [66.4, 473.0], [66.5, 473.0], [66.6, 473.0], [66.7, 473.0], [66.8, 477.0], [66.9, 477.0], [67.0, 477.0], [67.1, 477.0], [67.2, 478.0], [67.3, 478.0], [67.4, 478.0], [67.5, 478.0], [67.6, 482.0], [67.7, 482.0], [67.8, 482.0], [67.9, 482.0], [68.0, 491.0], [68.1, 491.0], [68.2, 491.0], [68.3, 491.0], [68.4, 492.0], [68.5, 492.0], [68.6, 492.0], [68.7, 492.0], [68.8, 492.0], [68.9, 492.0], [69.0, 492.0], [69.1, 492.0], [69.2, 496.0], [69.3, 496.0], [69.4, 496.0], [69.5, 496.0], [69.6, 496.0], [69.7, 496.0], [69.8, 496.0], [69.9, 496.0], [70.0, 497.0], [70.1, 497.0], [70.2, 497.0], [70.3, 497.0], [70.4, 508.0], [70.5, 508.0], [70.6, 508.0], [70.7, 508.0], [70.8, 519.0], [70.9, 519.0], [71.0, 519.0], [71.1, 519.0], [71.2, 523.0], [71.3, 523.0], [71.4, 523.0], [71.5, 523.0], [71.6, 524.0], [71.7, 524.0], [71.8, 524.0], [71.9, 524.0], [72.0, 530.0], [72.1, 530.0], [72.2, 530.0], [72.3, 530.0], [72.4, 532.0], [72.5, 532.0], [72.6, 532.0], [72.7, 532.0], [72.8, 534.0], [72.9, 534.0], [73.0, 534.0], [73.1, 534.0], [73.2, 534.0], [73.3, 534.0], [73.4, 534.0], [73.5, 534.0], [73.6, 540.0], [73.7, 540.0], [73.8, 540.0], [73.9, 540.0], [74.0, 551.0], [74.1, 551.0], [74.2, 551.0], [74.3, 551.0], [74.4, 560.0], [74.5, 560.0], [74.6, 560.0], [74.7, 560.0], [74.8, 565.0], [74.9, 565.0], [75.0, 565.0], [75.1, 565.0], [75.2, 589.0], [75.3, 589.0], [75.4, 589.0], [75.5, 589.0], [75.6, 593.0], [75.7, 593.0], [75.8, 593.0], [75.9, 593.0], [76.0, 609.0], [76.1, 609.0], [76.2, 609.0], [76.3, 609.0], [76.4, 613.0], [76.5, 613.0], [76.6, 613.0], [76.7, 613.0], [76.8, 626.0], [76.9, 626.0], [77.0, 626.0], [77.1, 626.0], [77.2, 626.0], [77.3, 626.0], [77.4, 626.0], [77.5, 626.0], [77.6, 652.0], [77.7, 652.0], [77.8, 652.0], [77.9, 652.0], [78.0, 670.0], [78.1, 670.0], [78.2, 670.0], [78.3, 670.0], [78.4, 678.0], [78.5, 678.0], [78.6, 678.0], [78.7, 678.0], [78.8, 685.0], [78.9, 685.0], [79.0, 685.0], [79.1, 685.0], [79.2, 687.0], [79.3, 687.0], [79.4, 687.0], [79.5, 687.0], [79.6, 687.0], [79.7, 728.0], [79.8, 728.0], [79.9, 728.0], [80.0, 728.0], [80.1, 750.0], [80.2, 750.0], [80.3, 750.0], [80.4, 750.0], [80.5, 756.0], [80.6, 756.0], [80.7, 756.0], [80.8, 756.0], [80.9, 784.0], [81.0, 784.0], [81.1, 784.0], [81.2, 784.0], [81.3, 793.0], [81.4, 793.0], [81.5, 793.0], [81.6, 793.0], [81.7, 798.0], [81.8, 798.0], [81.9, 798.0], [82.0, 798.0], [82.1, 805.0], [82.2, 805.0], [82.3, 805.0], [82.4, 805.0], [82.5, 845.0], [82.6, 845.0], [82.7, 845.0], [82.8, 845.0], [82.9, 848.0], [83.0, 848.0], [83.1, 848.0], [83.2, 848.0], [83.3, 856.0], [83.4, 856.0], [83.5, 856.0], [83.6, 856.0], [83.7, 867.0], [83.8, 867.0], [83.9, 867.0], [84.0, 867.0], [84.1, 870.0], [84.2, 870.0], [84.3, 870.0], [84.4, 870.0], [84.5, 877.0], [84.6, 877.0], [84.7, 877.0], [84.8, 877.0], [84.9, 909.0], [85.0, 909.0], [85.1, 909.0], [85.2, 909.0], [85.3, 914.0], [85.4, 914.0], [85.5, 914.0], [85.6, 914.0], [85.7, 925.0], [85.8, 925.0], [85.9, 925.0], [86.0, 925.0], [86.1, 934.0], [86.2, 934.0], [86.3, 934.0], [86.4, 934.0], [86.5, 965.0], [86.6, 965.0], [86.7, 965.0], [86.8, 965.0], [86.9, 1073.0], [87.0, 1073.0], [87.1, 1073.0], [87.2, 1073.0], [87.3, 1074.0], [87.4, 1074.0], [87.5, 1074.0], [87.6, 1074.0], [87.7, 1075.0], [87.8, 1075.0], [87.9, 1075.0], [88.0, 1075.0], [88.1, 1106.0], [88.2, 1106.0], [88.3, 1106.0], [88.4, 1106.0], [88.5, 1125.0], [88.6, 1125.0], [88.7, 1125.0], [88.8, 1125.0], [88.9, 1129.0], [89.0, 1129.0], [89.1, 1129.0], [89.2, 1129.0], [89.3, 1194.0], [89.4, 1194.0], [89.5, 1194.0], [89.6, 1194.0], [89.7, 1351.0], [89.8, 1351.0], [89.9, 1351.0], [90.0, 1351.0], [90.1, 1381.0], [90.2, 1381.0], [90.3, 1381.0], [90.4, 1381.0], [90.5, 1472.0], [90.6, 1472.0], [90.7, 1472.0], [90.8, 1472.0], [90.9, 1483.0], [91.0, 1483.0], [91.1, 1483.0], [91.2, 1483.0], [91.3, 1487.0], [91.4, 1487.0], [91.5, 1487.0], [91.6, 1487.0], [91.7, 1507.0], [91.8, 1507.0], [91.9, 1507.0], [92.0, 1507.0], [92.1, 1545.0], [92.2, 1545.0], [92.3, 1545.0], [92.4, 1545.0], [92.5, 1552.0], [92.6, 1552.0], [92.7, 1552.0], [92.8, 1552.0], [92.9, 1558.0], [93.0, 1558.0], [93.1, 1558.0], [93.2, 1558.0], [93.3, 1569.0], [93.4, 1569.0], [93.5, 1569.0], [93.6, 1569.0], [93.7, 2337.0], [93.8, 2337.0], [93.9, 2337.0], [94.0, 2337.0], [94.1, 2584.0], [94.2, 2584.0], [94.3, 2584.0], [94.4, 2584.0], [94.5, 2713.0], [94.6, 2713.0], [94.7, 2713.0], [94.8, 2713.0], [94.9, 3045.0], [95.0, 3045.0], [95.1, 3045.0], [95.2, 3045.0], [95.3, 3081.0], [95.4, 3081.0], [95.5, 3081.0], [95.6, 3081.0], [95.7, 3087.0], [95.8, 3087.0], [95.9, 3087.0], [96.0, 3087.0], [96.1, 3098.0], [96.2, 3098.0], [96.3, 3098.0], [96.4, 3098.0], [96.5, 3127.0], [96.6, 3127.0], [96.7, 3127.0], [96.8, 3127.0], [96.9, 3154.0], [97.0, 3154.0], [97.1, 3154.0], [97.2, 3154.0], [97.3, 3159.0], [97.4, 3159.0], [97.5, 3159.0], [97.6, 3159.0], [97.7, 3176.0], [97.8, 3176.0], [97.9, 3176.0], [98.0, 3176.0], [98.1, 3180.0], [98.2, 3180.0], [98.3, 3180.0], [98.4, 3180.0], [98.5, 3278.0], [98.6, 3278.0], [98.7, 3278.0], [98.8, 3278.0], [98.9, 3289.0], [99.0, 3289.0], [99.1, 3289.0], [99.2, 3289.0], [99.3, 3344.0], [99.4, 3344.0], [99.5, 3344.0], [99.6, 3344.0], [99.7, 3455.0], [99.8, 3455.0], [99.9, 3455.0], [100.0, 3455.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 129.0], [0.1, 129.0], [0.2, 129.0], [0.3, 129.0], [0.4, 135.0], [0.5, 135.0], [0.6, 135.0], [0.7, 135.0], [0.8, 142.0], [0.9, 142.0], [1.0, 142.0], [1.1, 142.0], [1.2, 142.0], [1.3, 143.0], [1.4, 143.0], [1.5, 143.0], [1.6, 144.0], [1.7, 144.0], [1.8, 144.0], [1.9, 144.0], [2.0, 146.0], [2.1, 146.0], [2.2, 146.0], [2.3, 146.0], [2.4, 146.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 147.0], [3.6, 149.0], [3.7, 149.0], [3.8, 149.0], [3.9, 149.0], [4.0, 149.0], [4.1, 149.0], [4.2, 149.0], [4.3, 149.0], [4.4, 149.0], [4.5, 149.0], [4.6, 149.0], [4.7, 149.0], [4.8, 149.0], [4.9, 149.0], [5.0, 149.0], [5.1, 149.0], [5.2, 150.0], [5.3, 150.0], [5.4, 150.0], [5.5, 150.0], [5.6, 150.0], [5.7, 150.0], [5.8, 150.0], [5.9, 150.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 151.0], [6.5, 151.0], [6.6, 151.0], [6.7, 151.0], [6.8, 152.0], [6.9, 152.0], [7.0, 152.0], [7.1, 152.0], [7.2, 152.0], [7.3, 152.0], [7.4, 152.0], [7.5, 152.0], [7.6, 153.0], [7.7, 153.0], [7.8, 153.0], [7.9, 153.0], [8.0, 153.0], [8.1, 153.0], [8.2, 153.0], [8.3, 153.0], [8.4, 153.0], [8.5, 153.0], [8.6, 153.0], [8.7, 153.0], [8.8, 154.0], [8.9, 154.0], [9.0, 154.0], [9.1, 154.0], [9.2, 154.0], [9.3, 154.0], [9.4, 154.0], [9.5, 154.0], [9.6, 155.0], [9.7, 155.0], [9.8, 155.0], [9.9, 155.0], [10.0, 155.0], [10.1, 155.0], [10.2, 155.0], [10.3, 155.0], [10.4, 156.0], [10.5, 156.0], [10.6, 156.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 156.0], [11.1, 156.0], [11.2, 156.0], [11.3, 157.0], [11.4, 157.0], [11.5, 157.0], [11.6, 157.0], [11.7, 157.0], [11.8, 157.0], [11.9, 157.0], [12.0, 157.0], [12.1, 158.0], [12.2, 158.0], [12.3, 158.0], [12.4, 158.0], [12.5, 158.0], [12.6, 158.0], [12.7, 158.0], [12.8, 158.0], [12.9, 159.0], [13.0, 159.0], [13.1, 159.0], [13.2, 159.0], [13.3, 159.0], [13.4, 159.0], [13.5, 159.0], [13.6, 159.0], [13.7, 160.0], [13.8, 160.0], [13.9, 160.0], [14.0, 160.0], [14.1, 160.0], [14.2, 160.0], [14.3, 160.0], [14.4, 160.0], [14.5, 161.0], [14.6, 161.0], [14.7, 161.0], [14.8, 161.0], [14.9, 162.0], [15.0, 162.0], [15.1, 162.0], [15.2, 162.0], [15.3, 162.0], [15.4, 162.0], [15.5, 162.0], [15.6, 162.0], [15.7, 163.0], [15.8, 163.0], [15.9, 163.0], [16.0, 163.0], [16.1, 163.0], [16.2, 163.0], [16.3, 163.0], [16.4, 163.0], [16.5, 163.0], [16.6, 163.0], [16.7, 163.0], [16.8, 163.0], [16.9, 164.0], [17.0, 164.0], [17.1, 164.0], [17.2, 164.0], [17.3, 164.0], [17.4, 164.0], [17.5, 164.0], [17.6, 164.0], [17.7, 164.0], [17.8, 164.0], [17.9, 164.0], [18.0, 164.0], [18.1, 165.0], [18.2, 165.0], [18.3, 165.0], [18.4, 165.0], [18.5, 165.0], [18.6, 165.0], [18.7, 165.0], [18.8, 165.0], [18.9, 167.0], [19.0, 167.0], [19.1, 167.0], [19.2, 167.0], [19.3, 168.0], [19.4, 168.0], [19.5, 168.0], [19.6, 169.0], [19.7, 169.0], [19.8, 169.0], [19.9, 169.0], [20.0, 171.0], [20.1, 171.0], [20.2, 171.0], [20.3, 171.0], [20.4, 171.0], [20.5, 171.0], [20.6, 171.0], [20.7, 171.0], [20.8, 171.0], [20.9, 171.0], [21.0, 171.0], [21.1, 171.0], [21.2, 172.0], [21.3, 172.0], [21.4, 172.0], [21.5, 172.0], [21.6, 174.0], [21.7, 174.0], [21.8, 174.0], [21.9, 174.0], [22.0, 174.0], [22.1, 174.0], [22.2, 174.0], [22.3, 174.0], [22.4, 175.0], [22.5, 175.0], [22.6, 175.0], [22.7, 175.0], [22.8, 176.0], [22.9, 176.0], [23.0, 176.0], [23.1, 176.0], [23.2, 178.0], [23.3, 178.0], [23.4, 178.0], [23.5, 178.0], [23.6, 178.0], [23.7, 178.0], [23.8, 178.0], [23.9, 178.0], [24.0, 178.0], [24.1, 178.0], [24.2, 178.0], [24.3, 178.0], [24.4, 180.0], [24.5, 180.0], [24.6, 180.0], [24.7, 180.0], [24.8, 182.0], [24.9, 182.0], [25.0, 182.0], [25.1, 182.0], [25.2, 182.0], [25.3, 182.0], [25.4, 182.0], [25.5, 182.0], [25.6, 183.0], [25.7, 183.0], [25.8, 183.0], [25.9, 183.0], [26.0, 183.0], [26.1, 183.0], [26.2, 183.0], [26.3, 183.0], [26.4, 183.0], [26.5, 183.0], [26.6, 183.0], [26.7, 183.0], [26.8, 184.0], [26.9, 184.0], [27.0, 184.0], [27.1, 184.0], [27.2, 185.0], [27.3, 185.0], [27.4, 185.0], [27.5, 185.0], [27.6, 186.0], [27.7, 186.0], [27.8, 186.0], [27.9, 186.0], [28.0, 186.0], [28.1, 186.0], [28.2, 186.0], [28.3, 186.0], [28.4, 186.0], [28.5, 186.0], [28.6, 186.0], [28.7, 186.0], [28.8, 186.0], [28.9, 186.0], [29.0, 186.0], [29.1, 186.0], [29.2, 187.0], [29.3, 187.0], [29.4, 187.0], [29.5, 187.0], [29.6, 188.0], [29.7, 188.0], [29.8, 188.0], [29.9, 188.0], [30.0, 190.0], [30.1, 190.0], [30.2, 190.0], [30.3, 190.0], [30.4, 192.0], [30.5, 192.0], [30.6, 192.0], [30.7, 192.0], [30.8, 193.0], [30.9, 193.0], [31.0, 193.0], [31.1, 193.0], [31.2, 193.0], [31.3, 193.0], [31.4, 193.0], [31.5, 193.0], [31.6, 194.0], [31.7, 194.0], [31.8, 194.0], [31.9, 194.0], [32.0, 196.0], [32.1, 196.0], [32.2, 196.0], [32.3, 196.0], [32.4, 197.0], [32.5, 197.0], [32.6, 197.0], [32.7, 197.0], [32.8, 200.0], [32.9, 200.0], [33.0, 200.0], [33.1, 200.0], [33.2, 201.0], [33.3, 201.0], [33.4, 201.0], [33.5, 201.0], [33.6, 202.0], [33.7, 202.0], [33.8, 202.0], [33.9, 202.0], [34.0, 203.0], [34.1, 203.0], [34.2, 203.0], [34.3, 203.0], [34.4, 204.0], [34.5, 204.0], [34.6, 204.0], [34.7, 204.0], [34.8, 205.0], [34.9, 205.0], [35.0, 205.0], [35.1, 205.0], [35.2, 206.0], [35.3, 206.0], [35.4, 206.0], [35.5, 206.0], [35.6, 206.0], [35.7, 206.0], [35.8, 206.0], [35.9, 206.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 211.0], [36.5, 211.0], [36.6, 211.0], [36.7, 211.0], [36.8, 212.0], [36.9, 212.0], [37.0, 212.0], [37.1, 212.0], [37.2, 212.0], [37.3, 212.0], [37.4, 212.0], [37.5, 212.0], [37.6, 213.0], [37.7, 213.0], [37.8, 213.0], [37.9, 213.0], [38.0, 218.0], [38.1, 218.0], [38.2, 218.0], [38.3, 218.0], [38.4, 221.0], [38.5, 221.0], [38.6, 221.0], [38.7, 221.0], [38.8, 222.0], [38.9, 222.0], [39.0, 222.0], [39.1, 222.0], [39.2, 223.0], [39.3, 223.0], [39.4, 223.0], [39.5, 223.0], [39.6, 228.0], [39.7, 228.0], [39.8, 228.0], [39.9, 228.0], [40.0, 228.0], [40.1, 228.0], [40.2, 228.0], [40.3, 228.0], [40.4, 229.0], [40.5, 229.0], [40.6, 229.0], [40.7, 229.0], [40.8, 229.0], [40.9, 229.0], [41.0, 229.0], [41.1, 229.0], [41.2, 229.0], [41.3, 229.0], [41.4, 229.0], [41.5, 229.0], [41.6, 230.0], [41.7, 230.0], [41.8, 230.0], [41.9, 230.0], [42.0, 233.0], [42.1, 233.0], [42.2, 233.0], [42.3, 233.0], [42.4, 235.0], [42.5, 235.0], [42.6, 235.0], [42.7, 235.0], [42.8, 239.0], [42.9, 239.0], [43.0, 239.0], [43.1, 239.0], [43.2, 243.0], [43.3, 243.0], [43.4, 243.0], [43.5, 243.0], [43.6, 245.0], [43.7, 245.0], [43.8, 245.0], [43.9, 245.0], [44.0, 252.0], [44.1, 252.0], [44.2, 252.0], [44.3, 252.0], [44.4, 253.0], [44.5, 253.0], [44.6, 253.0], [44.7, 253.0], [44.8, 254.0], [44.9, 254.0], [45.0, 254.0], [45.1, 254.0], [45.2, 256.0], [45.3, 256.0], [45.4, 256.0], [45.5, 256.0], [45.6, 259.0], [45.7, 259.0], [45.8, 259.0], [45.9, 259.0], [46.0, 260.0], [46.1, 260.0], [46.2, 260.0], [46.3, 260.0], [46.4, 262.0], [46.5, 262.0], [46.6, 262.0], [46.7, 262.0], [46.8, 271.0], [46.9, 271.0], [47.0, 271.0], [47.1, 271.0], [47.2, 271.0], [47.3, 271.0], [47.4, 271.0], [47.5, 271.0], [47.6, 280.0], [47.7, 280.0], [47.8, 280.0], [47.9, 280.0], [48.0, 285.0], [48.1, 285.0], [48.2, 285.0], [48.3, 285.0], [48.4, 287.0], [48.5, 287.0], [48.6, 287.0], [48.7, 287.0], [48.8, 292.0], [48.9, 292.0], [49.0, 292.0], [49.1, 292.0], [49.2, 299.0], [49.3, 299.0], [49.4, 299.0], [49.5, 299.0], [49.6, 303.0], [49.7, 303.0], [49.8, 303.0], [49.9, 303.0], [50.0, 304.0], [50.1, 304.0], [50.2, 304.0], [50.3, 304.0], [50.4, 315.0], [50.5, 315.0], [50.6, 315.0], [50.7, 315.0], [50.8, 316.0], [50.9, 316.0], [51.0, 316.0], [51.1, 316.0], [51.2, 323.0], [51.3, 323.0], [51.4, 323.0], [51.5, 323.0], [51.6, 340.0], [51.7, 340.0], [51.8, 340.0], [51.9, 340.0], [52.0, 342.0], [52.1, 342.0], [52.2, 342.0], [52.3, 342.0], [52.4, 343.0], [52.5, 343.0], [52.6, 343.0], [52.7, 343.0], [52.8, 359.0], [52.9, 359.0], [53.0, 359.0], [53.1, 359.0], [53.2, 360.0], [53.3, 360.0], [53.4, 360.0], [53.5, 360.0], [53.6, 361.0], [53.7, 361.0], [53.8, 361.0], [53.9, 361.0], [54.0, 362.0], [54.1, 362.0], [54.2, 362.0], [54.3, 362.0], [54.4, 364.0], [54.5, 364.0], [54.6, 364.0], [54.7, 364.0], [54.8, 366.0], [54.9, 366.0], [55.0, 366.0], [55.1, 366.0], [55.2, 370.0], [55.3, 370.0], [55.4, 370.0], [55.5, 370.0], [55.6, 372.0], [55.7, 372.0], [55.8, 372.0], [55.9, 372.0], [56.0, 379.0], [56.1, 379.0], [56.2, 379.0], [56.3, 379.0], [56.4, 385.0], [56.5, 385.0], [56.6, 385.0], [56.7, 385.0], [56.8, 397.0], [56.9, 397.0], [57.0, 397.0], [57.1, 397.0], [57.2, 402.0], [57.3, 402.0], [57.4, 402.0], [57.5, 402.0], [57.6, 404.0], [57.7, 404.0], [57.8, 404.0], [57.9, 404.0], [58.0, 406.0], [58.1, 406.0], [58.2, 406.0], [58.3, 406.0], [58.4, 409.0], [58.5, 409.0], [58.6, 409.0], [58.7, 409.0], [58.8, 420.0], [58.9, 420.0], [59.0, 420.0], [59.1, 420.0], [59.2, 425.0], [59.3, 425.0], [59.4, 425.0], [59.5, 425.0], [59.6, 437.0], [59.7, 437.0], [59.8, 437.0], [59.9, 437.0], [60.0, 439.0], [60.1, 439.0], [60.2, 439.0], [60.3, 439.0], [60.4, 443.0], [60.5, 443.0], [60.6, 443.0], [60.7, 443.0], [60.8, 444.0], [60.9, 444.0], [61.0, 444.0], [61.1, 444.0], [61.2, 445.0], [61.3, 445.0], [61.4, 445.0], [61.5, 445.0], [61.6, 453.0], [61.7, 453.0], [61.8, 453.0], [61.9, 453.0], [62.0, 455.0], [62.1, 455.0], [62.2, 455.0], [62.3, 455.0], [62.4, 456.0], [62.5, 456.0], [62.6, 456.0], [62.7, 456.0], [62.8, 458.0], [62.9, 458.0], [63.0, 458.0], [63.1, 458.0], [63.2, 459.0], [63.3, 459.0], [63.4, 459.0], [63.5, 459.0], [63.6, 477.0], [63.7, 477.0], [63.8, 477.0], [63.9, 477.0], [64.0, 487.0], [64.1, 487.0], [64.2, 487.0], [64.3, 487.0], [64.4, 495.0], [64.5, 495.0], [64.6, 495.0], [64.7, 495.0], [64.8, 503.0], [64.9, 503.0], [65.0, 503.0], [65.1, 503.0], [65.2, 506.0], [65.3, 506.0], [65.4, 506.0], [65.5, 506.0], [65.6, 513.0], [65.7, 513.0], [65.8, 513.0], [65.9, 513.0], [66.0, 528.0], [66.1, 528.0], [66.2, 528.0], [66.3, 528.0], [66.4, 534.0], [66.5, 534.0], [66.6, 534.0], [66.7, 534.0], [66.8, 536.0], [66.9, 536.0], [67.0, 536.0], [67.1, 536.0], [67.2, 541.0], [67.3, 541.0], [67.4, 541.0], [67.5, 541.0], [67.6, 553.0], [67.7, 553.0], [67.8, 553.0], [67.9, 553.0], [68.0, 553.0], [68.1, 553.0], [68.2, 553.0], [68.3, 553.0], [68.4, 574.0], [68.5, 574.0], [68.6, 574.0], [68.7, 574.0], [68.8, 580.0], [68.9, 580.0], [69.0, 580.0], [69.1, 580.0], [69.2, 582.0], [69.3, 582.0], [69.4, 582.0], [69.5, 582.0], [69.6, 591.0], [69.7, 591.0], [69.8, 591.0], [69.9, 591.0], [70.0, 594.0], [70.1, 594.0], [70.2, 594.0], [70.3, 594.0], [70.4, 608.0], [70.5, 608.0], [70.6, 608.0], [70.7, 608.0], [70.8, 614.0], [70.9, 614.0], [71.0, 614.0], [71.1, 614.0], [71.2, 625.0], [71.3, 625.0], [71.4, 625.0], [71.5, 625.0], [71.6, 626.0], [71.7, 626.0], [71.8, 626.0], [71.9, 626.0], [72.0, 632.0], [72.1, 632.0], [72.2, 632.0], [72.3, 632.0], [72.4, 634.0], [72.5, 634.0], [72.6, 634.0], [72.7, 634.0], [72.8, 638.0], [72.9, 638.0], [73.0, 638.0], [73.1, 638.0], [73.2, 640.0], [73.3, 640.0], [73.4, 640.0], [73.5, 640.0], [73.6, 645.0], [73.7, 645.0], [73.8, 645.0], [73.9, 645.0], [74.0, 656.0], [74.1, 656.0], [74.2, 656.0], [74.3, 656.0], [74.4, 656.0], [74.5, 656.0], [74.6, 656.0], [74.7, 656.0], [74.8, 664.0], [74.9, 664.0], [75.0, 664.0], [75.1, 664.0], [75.2, 678.0], [75.3, 678.0], [75.4, 678.0], [75.5, 678.0], [75.6, 678.0], [75.7, 681.0], [75.8, 681.0], [75.9, 681.0], [76.0, 681.0], [76.1, 688.0], [76.2, 688.0], [76.3, 688.0], [76.4, 688.0], [76.5, 694.0], [76.6, 694.0], [76.7, 694.0], [76.8, 694.0], [76.9, 709.0], [77.0, 709.0], [77.1, 709.0], [77.2, 709.0], [77.3, 713.0], [77.4, 713.0], [77.5, 713.0], [77.6, 713.0], [77.7, 718.0], [77.8, 718.0], [77.9, 718.0], [78.0, 718.0], [78.1, 722.0], [78.2, 722.0], [78.3, 722.0], [78.4, 722.0], [78.5, 732.0], [78.6, 732.0], [78.7, 732.0], [78.8, 732.0], [78.9, 735.0], [79.0, 735.0], [79.1, 735.0], [79.2, 735.0], [79.3, 736.0], [79.4, 736.0], [79.5, 736.0], [79.6, 736.0], [79.7, 744.0], [79.8, 744.0], [79.9, 744.0], [80.0, 744.0], [80.1, 755.0], [80.2, 755.0], [80.3, 755.0], [80.4, 755.0], [80.5, 770.0], [80.6, 770.0], [80.7, 770.0], [80.8, 770.0], [80.9, 778.0], [81.0, 778.0], [81.1, 778.0], [81.2, 778.0], [81.3, 778.0], [81.4, 778.0], [81.5, 778.0], [81.6, 778.0], [81.7, 782.0], [81.8, 782.0], [81.9, 782.0], [82.0, 782.0], [82.1, 785.0], [82.2, 785.0], [82.3, 785.0], [82.4, 785.0], [82.5, 797.0], [82.6, 797.0], [82.7, 797.0], [82.8, 797.0], [82.9, 810.0], [83.0, 810.0], [83.1, 810.0], [83.2, 810.0], [83.3, 814.0], [83.4, 814.0], [83.5, 814.0], [83.6, 814.0], [83.7, 825.0], [83.8, 825.0], [83.9, 825.0], [84.0, 825.0], [84.1, 827.0], [84.2, 827.0], [84.3, 827.0], [84.4, 827.0], [84.5, 838.0], [84.6, 838.0], [84.7, 838.0], [84.8, 838.0], [84.9, 845.0], [85.0, 845.0], [85.1, 845.0], [85.2, 845.0], [85.3, 862.0], [85.4, 862.0], [85.5, 862.0], [85.6, 862.0], [85.7, 906.0], [85.8, 906.0], [85.9, 906.0], [86.0, 906.0], [86.1, 922.0], [86.2, 922.0], [86.3, 922.0], [86.4, 922.0], [86.5, 928.0], [86.6, 928.0], [86.7, 928.0], [86.8, 928.0], [86.9, 948.0], [87.0, 948.0], [87.1, 948.0], [87.2, 948.0], [87.3, 951.0], [87.4, 951.0], [87.5, 951.0], [87.6, 951.0], [87.7, 970.0], [87.8, 970.0], [87.9, 970.0], [88.0, 970.0], [88.1, 985.0], [88.2, 985.0], [88.3, 985.0], [88.4, 985.0], [88.5, 1026.0], [88.6, 1026.0], [88.7, 1026.0], [88.8, 1026.0], [88.9, 1102.0], [89.0, 1102.0], [89.1, 1102.0], [89.2, 1102.0], [89.3, 1122.0], [89.4, 1122.0], [89.5, 1122.0], [89.6, 1122.0], [89.7, 1130.0], [89.8, 1130.0], [89.9, 1130.0], [90.0, 1130.0], [90.1, 1159.0], [90.2, 1159.0], [90.3, 1159.0], [90.4, 1159.0], [90.5, 1173.0], [90.6, 1173.0], [90.7, 1173.0], [90.8, 1173.0], [90.9, 1188.0], [91.0, 1188.0], [91.1, 1188.0], [91.2, 1188.0], [91.3, 1205.0], [91.4, 1205.0], [91.5, 1205.0], [91.6, 1205.0], [91.7, 1243.0], [91.8, 1243.0], [91.9, 1243.0], [92.0, 1243.0], [92.1, 1271.0], [92.2, 1271.0], [92.3, 1271.0], [92.4, 1271.0], [92.5, 1311.0], [92.6, 1311.0], [92.7, 1311.0], [92.8, 1311.0], [92.9, 1359.0], [93.0, 1359.0], [93.1, 1359.0], [93.2, 1359.0], [93.3, 1413.0], [93.4, 1413.0], [93.5, 1413.0], [93.6, 1413.0], [93.7, 1477.0], [93.8, 1477.0], [93.9, 1477.0], [94.0, 1477.0], [94.1, 1514.0], [94.2, 1514.0], [94.3, 1514.0], [94.4, 1514.0], [94.5, 1554.0], [94.6, 1554.0], [94.7, 1554.0], [94.8, 1554.0], [94.9, 1852.0], [95.0, 1852.0], [95.1, 1852.0], [95.2, 1852.0], [95.3, 2225.0], [95.4, 2225.0], [95.5, 2225.0], [95.6, 2225.0], [95.7, 2706.0], [95.8, 2706.0], [95.9, 2706.0], [96.0, 2706.0], [96.1, 2856.0], [96.2, 2856.0], [96.3, 2856.0], [96.4, 2856.0], [96.5, 3102.0], [96.6, 3102.0], [96.7, 3102.0], [96.8, 3102.0], [96.9, 3118.0], [97.0, 3118.0], [97.1, 3118.0], [97.2, 3118.0], [97.3, 3125.0], [97.4, 3125.0], [97.5, 3125.0], [97.6, 3125.0], [97.7, 3128.0], [97.8, 3128.0], [97.9, 3128.0], [98.0, 3128.0], [98.1, 3128.0], [98.2, 3128.0], [98.3, 3128.0], [98.4, 3128.0], [98.5, 3235.0], [98.6, 3235.0], [98.7, 3235.0], [98.8, 3235.0], [98.9, 3276.0], [99.0, 3276.0], [99.1, 3276.0], [99.2, 3276.0], [99.3, 3279.0], [99.4, 3279.0], [99.5, 3279.0], [99.6, 3279.0], [99.7, 3455.0], [99.8, 3455.0], [99.9, 3455.0], [100.0, 3455.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 82.0, "series": [{"data": [[2100.0, 1.0], [2200.0, 1.0], [600.0, 14.0], [2400.0, 2.0], [2600.0, 1.0], [700.0, 16.0], [200.0, 67.0], [800.0, 12.0], [3200.0, 1.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 6.0], [300.0, 21.0], [1200.0, 3.0], [1400.0, 3.0], [1500.0, 4.0], [400.0, 19.0], [100.0, 47.0], [1600.0, 4.0], [1800.0, 1.0], [500.0, 19.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[2300.0, 1.0], [600.0, 9.0], [2500.0, 1.0], [700.0, 6.0], [2700.0, 1.0], [3000.0, 4.0], [3100.0, 5.0], [200.0, 54.0], [800.0, 7.0], [3200.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [900.0, 5.0], [1000.0, 3.0], [1100.0, 4.0], [300.0, 22.0], [1300.0, 2.0], [1400.0, 3.0], [1500.0, 5.0], [100.0, 71.0], [400.0, 29.0], [500.0, 14.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 16.0], [700.0, 15.0], [2800.0, 1.0], [2700.0, 1.0], [3100.0, 5.0], [200.0, 42.0], [800.0, 7.0], [3200.0, 3.0], [3400.0, 1.0], [900.0, 7.0], [1000.0, 1.0], [1100.0, 6.0], [300.0, 19.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 2.0], [400.0, 19.0], [100.0, 82.0], [1800.0, 1.0], [500.0, 14.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 494.0, "series": [{"data": [[0.0, 494.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 205.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 51.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.3813333333333, "minX": 1.72793484E12, "maxY": 39.3813333333333, "series": [{"data": [[1.72793484E12, 39.3813333333333]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793484E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 135.0, "minX": 1.0, "maxY": 3154.0, "series": [{"data": [[32.0, 400.0], [33.0, 417.3333333333333], [34.0, 550.6], [35.0, 454.6666666666667], [36.0, 479.5], [37.0, 365.0], [38.0, 737.7777777777778], [39.0, 274.0], [41.0, 492.0], [40.0, 598.6923076923077], [42.0, 524.5714285714286], [43.0, 511.92307692307685], [44.0, 487.5], [45.0, 519.4399999999999], [46.0, 486.79999999999984], [47.0, 503.3846153846153], [48.0, 650.8275862068966], [49.0, 338.64285714285717], [50.0, 906.0], [4.0, 2199.0], [5.0, 2237.0], [6.0, 2687.0], [19.0, 1642.0], [21.0, 538.75], [23.0, 613.6666666666666], [24.0, 688.6666666666666], [25.0, 557.1428571428571], [26.0, 202.5], [27.0, 572.0], [28.0, 357.7272727272727], [30.0, 550.5], [31.0, 434.14285714285717]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[39.67600000000002, 537.524]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[32.0, 240.25], [33.0, 648.0], [34.0, 656.1818181818181], [35.0, 202.33333333333334], [37.0, 375.0], [36.0, 407.5], [38.0, 1158.75], [39.0, 828.2222222222222], [40.0, 901.5294117647057], [41.0, 434.8461538461538], [42.0, 447.66666666666663], [43.0, 482.85714285714283], [44.0, 483.9375], [45.0, 568.4736842105264], [46.0, 676.9499999999999], [47.0, 409.65], [48.0, 679.68], [49.0, 290.1818181818182], [3.0, 581.0], [50.0, 267.5], [51.0, 1405.0], [4.0, 462.0], [10.0, 1813.5], [11.0, 478.0], [14.0, 3154.0], [19.0, 1836.5], [24.0, 239.0], [25.0, 164.0], [26.0, 333.0], [27.0, 768.3333333333334], [28.0, 476.2], [29.0, 240.36363636363632], [30.0, 478.5], [31.0, 342.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[39.732, 585.0920000000002]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 143.0], [3.0, 1359.0], [4.0, 259.0], [5.0, 2225.0], [6.0, 1554.0], [7.0, 2706.0], [8.0, 1514.0], [9.0, 160.0], [10.0, 253.0], [11.0, 2856.0], [12.0, 439.0], [13.0, 252.0], [14.0, 778.0], [15.0, 151.0], [16.0, 285.0], [17.0, 287.0], [18.0, 455.0], [19.0, 186.0], [20.0, 156.0], [21.0, 304.0], [22.0, 171.0], [23.0, 409.0], [24.0, 150.0], [25.0, 135.0], [26.0, 172.0], [27.0, 264.0], [28.0, 381.5], [29.0, 770.8571428571429], [30.0, 351.2857142857143], [31.0, 334.6666666666667], [33.0, 299.0], [32.0, 261.8], [34.0, 344.7142857142857], [35.0, 371.5], [36.0, 539.0], [37.0, 540.1666666666666], [38.0, 650.0], [39.0, 511.14285714285717], [41.0, 542.5714285714286], [40.0, 435.3636363636364], [42.0, 805.1818181818182], [43.0, 442.29999999999995], [45.0, 450.33333333333337], [44.0, 434.63636363636357], [46.0, 653.4375], [47.0, 733.7222222222222], [48.0, 669.6071428571429], [49.0, 559.5], [51.0, 235.0], [50.0, 346.0], [52.0, 149.0], [1.0, 797.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[38.73600000000002, 556.2599999999998]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 52.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5508.333333333333, "minX": 1.72793484E12, "maxY": 82833.33333333333, "series": [{"data": [[1.72793484E12, 82833.33333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72793484E12, 5508.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793484E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 537.524, "minX": 1.72793484E12, "maxY": 585.0920000000002, "series": [{"data": [[1.72793484E12, 537.524]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793484E12, 585.0920000000002]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793484E12, 556.2599999999998]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793484E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 536.0720000000001, "minX": 1.72793484E12, "maxY": 583.8880000000004, "series": [{"data": [[1.72793484E12, 536.0720000000001]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793484E12, 583.8880000000004]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793484E12, 555.376]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793484E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72793484E12, "maxY": 45.547999999999995, "series": [{"data": [[1.72793484E12, 45.547999999999995]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793484E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793484E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793484E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 129.0, "minX": 1.72793484E12, "maxY": 3455.0, "series": [{"data": [[1.72793484E12, 3455.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72793484E12, 1162.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72793484E12, 3255.09]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72793484E12, 1650.8999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72793484E12, 129.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72793484E12, 317.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793484E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 232.0, "minX": 1.0, "maxY": 1514.0, "series": [{"data": [[14.0, 527.0], [15.0, 1514.0], [62.0, 283.5], [63.0, 414.0], [66.0, 287.5], [1.0, 797.0], [68.0, 453.5], [72.0, 268.0], [75.0, 232.0], [73.0, 348.0], [77.0, 233.0], [91.0, 269.0], [7.0, 462.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 229.0, "minX": 1.0, "maxY": 1513.0, "series": [{"data": [[14.0, 526.0], [15.0, 1513.0], [62.0, 282.5], [63.0, 412.0], [66.0, 285.5], [1.0, 796.0], [68.0, 453.0], [72.0, 267.0], [75.0, 229.0], [73.0, 346.0], [77.0, 232.0], [91.0, 269.0], [7.0, 461.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 91.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793484E12, "maxY": 12.5, "series": [{"data": [[1.72793484E12, 12.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793484E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793484E12, "maxY": 12.5, "series": [{"data": [[1.72793484E12, 12.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793484E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.72793484E12, "maxY": 4.166666666666667, "series": [{"data": [[1.72793484E12, 4.166666666666667]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.72793484E12, 4.166666666666667]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.72793484E12, 4.166666666666667]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793484E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793484E12, "maxY": 12.5, "series": [{"data": [[1.72793484E12, 12.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793484E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

