/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 135.0, "minX": 0.0, "maxY": 3235.0, "series": [{"data": [[0.0, 151.0], [0.1, 151.0], [0.2, 151.0], [0.3, 151.0], [0.4, 152.0], [0.5, 152.0], [0.6, 152.0], [0.7, 152.0], [0.8, 153.0], [0.9, 153.0], [1.0, 153.0], [1.1, 153.0], [1.2, 153.0], [1.3, 156.0], [1.4, 156.0], [1.5, 156.0], [1.6, 158.0], [1.7, 158.0], [1.8, 158.0], [1.9, 158.0], [2.0, 158.0], [2.1, 158.0], [2.2, 158.0], [2.3, 158.0], [2.4, 158.0], [2.5, 158.0], [2.6, 158.0], [2.7, 158.0], [2.8, 161.0], [2.9, 161.0], [3.0, 161.0], [3.1, 161.0], [3.2, 161.0], [3.3, 161.0], [3.4, 161.0], [3.5, 161.0], [3.6, 163.0], [3.7, 163.0], [3.8, 163.0], [3.9, 163.0], [4.0, 165.0], [4.1, 165.0], [4.2, 165.0], [4.3, 165.0], [4.4, 165.0], [4.5, 165.0], [4.6, 165.0], [4.7, 165.0], [4.8, 166.0], [4.9, 166.0], [5.0, 166.0], [5.1, 166.0], [5.2, 166.0], [5.3, 166.0], [5.4, 166.0], [5.5, 166.0], [5.6, 166.0], [5.7, 166.0], [5.8, 166.0], [5.9, 166.0], [6.0, 167.0], [6.1, 167.0], [6.2, 167.0], [6.3, 167.0], [6.4, 167.0], [6.5, 167.0], [6.6, 167.0], [6.7, 167.0], [6.8, 168.0], [6.9, 168.0], [7.0, 168.0], [7.1, 168.0], [7.2, 169.0], [7.3, 169.0], [7.4, 169.0], [7.5, 169.0], [7.6, 169.0], [7.7, 169.0], [7.8, 169.0], [7.9, 169.0], [8.0, 170.0], [8.1, 170.0], [8.2, 170.0], [8.3, 170.0], [8.4, 171.0], [8.5, 171.0], [8.6, 171.0], [8.7, 171.0], [8.8, 171.0], [8.9, 171.0], [9.0, 171.0], [9.1, 171.0], [9.2, 171.0], [9.3, 172.0], [9.4, 172.0], [9.5, 172.0], [9.6, 172.0], [9.7, 176.0], [9.8, 176.0], [9.9, 176.0], [10.0, 176.0], [10.1, 179.0], [10.2, 179.0], [10.3, 179.0], [10.4, 179.0], [10.5, 181.0], [10.6, 181.0], [10.7, 181.0], [10.8, 181.0], [10.9, 183.0], [11.0, 183.0], [11.1, 183.0], [11.2, 183.0], [11.3, 183.0], [11.4, 183.0], [11.5, 183.0], [11.6, 183.0], [11.7, 184.0], [11.8, 184.0], [11.9, 184.0], [12.0, 184.0], [12.1, 185.0], [12.2, 185.0], [12.3, 185.0], [12.4, 185.0], [12.5, 185.0], [12.6, 185.0], [12.7, 185.0], [12.8, 185.0], [12.9, 193.0], [13.0, 193.0], [13.1, 193.0], [13.2, 193.0], [13.3, 195.0], [13.4, 195.0], [13.5, 195.0], [13.6, 195.0], [13.7, 196.0], [13.8, 196.0], [13.9, 196.0], [14.0, 196.0], [14.1, 197.0], [14.2, 197.0], [14.3, 197.0], [14.4, 197.0], [14.5, 197.0], [14.6, 197.0], [14.7, 197.0], [14.8, 197.0], [14.9, 198.0], [15.0, 198.0], [15.1, 198.0], [15.2, 198.0], [15.3, 202.0], [15.4, 202.0], [15.5, 202.0], [15.6, 202.0], [15.7, 204.0], [15.8, 204.0], [15.9, 204.0], [16.0, 204.0], [16.1, 205.0], [16.2, 205.0], [16.3, 205.0], [16.4, 205.0], [16.5, 207.0], [16.6, 207.0], [16.7, 207.0], [16.8, 207.0], [16.9, 214.0], [17.0, 214.0], [17.1, 214.0], [17.2, 214.0], [17.3, 215.0], [17.4, 215.0], [17.5, 215.0], [17.6, 217.0], [17.7, 217.0], [17.8, 217.0], [17.9, 217.0], [18.0, 217.0], [18.1, 217.0], [18.2, 217.0], [18.3, 217.0], [18.4, 217.0], [18.5, 219.0], [18.6, 219.0], [18.7, 219.0], [18.8, 223.0], [18.9, 223.0], [19.0, 223.0], [19.1, 223.0], [19.2, 226.0], [19.3, 226.0], [19.4, 226.0], [19.5, 226.0], [19.6, 226.0], [19.7, 226.0], [19.8, 226.0], [19.9, 226.0], [20.0, 228.0], [20.1, 228.0], [20.2, 228.0], [20.3, 228.0], [20.4, 229.0], [20.5, 229.0], [20.6, 229.0], [20.7, 229.0], [20.8, 231.0], [20.9, 231.0], [21.0, 231.0], [21.1, 231.0], [21.2, 233.0], [21.3, 233.0], [21.4, 233.0], [21.5, 233.0], [21.6, 235.0], [21.7, 235.0], [21.8, 235.0], [21.9, 235.0], [22.0, 235.0], [22.1, 235.0], [22.2, 235.0], [22.3, 235.0], [22.4, 236.0], [22.5, 236.0], [22.6, 236.0], [22.7, 236.0], [22.8, 239.0], [22.9, 239.0], [23.0, 239.0], [23.1, 239.0], [23.2, 240.0], [23.3, 240.0], [23.4, 240.0], [23.5, 240.0], [23.6, 240.0], [23.7, 240.0], [23.8, 240.0], [23.9, 240.0], [24.0, 250.0], [24.1, 250.0], [24.2, 250.0], [24.3, 250.0], [24.4, 255.0], [24.5, 255.0], [24.6, 255.0], [24.7, 255.0], [24.8, 256.0], [24.9, 256.0], [25.0, 256.0], [25.1, 256.0], [25.2, 256.0], [25.3, 256.0], [25.4, 256.0], [25.5, 256.0], [25.6, 257.0], [25.7, 257.0], [25.8, 257.0], [25.9, 257.0], [26.0, 260.0], [26.1, 260.0], [26.2, 260.0], [26.3, 260.0], [26.4, 263.0], [26.5, 263.0], [26.6, 263.0], [26.7, 263.0], [26.8, 267.0], [26.9, 267.0], [27.0, 267.0], [27.1, 267.0], [27.2, 269.0], [27.3, 269.0], [27.4, 269.0], [27.5, 269.0], [27.6, 275.0], [27.7, 275.0], [27.8, 275.0], [27.9, 275.0], [28.0, 280.0], [28.1, 280.0], [28.2, 280.0], [28.3, 280.0], [28.4, 285.0], [28.5, 285.0], [28.6, 285.0], [28.7, 285.0], [28.8, 285.0], [28.9, 285.0], [29.0, 285.0], [29.1, 285.0], [29.2, 290.0], [29.3, 290.0], [29.4, 290.0], [29.5, 290.0], [29.6, 291.0], [29.7, 291.0], [29.8, 291.0], [29.9, 291.0], [30.0, 294.0], [30.1, 294.0], [30.2, 294.0], [30.3, 294.0], [30.4, 306.0], [30.5, 306.0], [30.6, 306.0], [30.7, 306.0], [30.8, 309.0], [30.9, 309.0], [31.0, 309.0], [31.1, 309.0], [31.2, 313.0], [31.3, 313.0], [31.4, 313.0], [31.5, 313.0], [31.6, 314.0], [31.7, 314.0], [31.8, 314.0], [31.9, 314.0], [32.0, 319.0], [32.1, 319.0], [32.2, 319.0], [32.3, 319.0], [32.4, 321.0], [32.5, 321.0], [32.6, 321.0], [32.7, 321.0], [32.8, 323.0], [32.9, 323.0], [33.0, 323.0], [33.1, 323.0], [33.2, 325.0], [33.3, 325.0], [33.4, 325.0], [33.5, 325.0], [33.6, 334.0], [33.7, 334.0], [33.8, 334.0], [33.9, 334.0], [34.0, 338.0], [34.1, 338.0], [34.2, 338.0], [34.3, 338.0], [34.4, 339.0], [34.5, 339.0], [34.6, 339.0], [34.7, 339.0], [34.8, 343.0], [34.9, 343.0], [35.0, 343.0], [35.1, 343.0], [35.2, 344.0], [35.3, 344.0], [35.4, 344.0], [35.5, 344.0], [35.6, 347.0], [35.7, 347.0], [35.8, 347.0], [35.9, 347.0], [36.0, 348.0], [36.1, 348.0], [36.2, 348.0], [36.3, 348.0], [36.4, 358.0], [36.5, 358.0], [36.6, 358.0], [36.7, 358.0], [36.8, 371.0], [36.9, 371.0], [37.0, 371.0], [37.1, 371.0], [37.2, 372.0], [37.3, 372.0], [37.4, 372.0], [37.5, 372.0], [37.6, 378.0], [37.7, 378.0], [37.8, 378.0], [37.9, 378.0], [38.0, 383.0], [38.1, 383.0], [38.2, 383.0], [38.3, 383.0], [38.4, 392.0], [38.5, 392.0], [38.6, 392.0], [38.7, 392.0], [38.8, 397.0], [38.9, 397.0], [39.0, 397.0], [39.1, 397.0], [39.2, 399.0], [39.3, 399.0], [39.4, 399.0], [39.5, 399.0], [39.6, 399.0], [39.7, 399.0], [39.8, 399.0], [39.9, 399.0], [40.0, 400.0], [40.1, 400.0], [40.2, 400.0], [40.3, 400.0], [40.4, 414.0], [40.5, 414.0], [40.6, 414.0], [40.7, 414.0], [40.8, 421.0], [40.9, 421.0], [41.0, 421.0], [41.1, 421.0], [41.2, 437.0], [41.3, 437.0], [41.4, 437.0], [41.5, 437.0], [41.6, 442.0], [41.7, 442.0], [41.8, 442.0], [41.9, 442.0], [42.0, 456.0], [42.1, 456.0], [42.2, 456.0], [42.3, 456.0], [42.4, 467.0], [42.5, 467.0], [42.6, 467.0], [42.7, 467.0], [42.8, 475.0], [42.9, 475.0], [43.0, 475.0], [43.1, 475.0], [43.2, 477.0], [43.3, 477.0], [43.4, 477.0], [43.5, 477.0], [43.6, 479.0], [43.7, 479.0], [43.8, 479.0], [43.9, 479.0], [44.0, 485.0], [44.1, 485.0], [44.2, 485.0], [44.3, 485.0], [44.4, 489.0], [44.5, 489.0], [44.6, 489.0], [44.7, 489.0], [44.8, 497.0], [44.9, 497.0], [45.0, 497.0], [45.1, 497.0], [45.2, 508.0], [45.3, 508.0], [45.4, 508.0], [45.5, 508.0], [45.6, 509.0], [45.7, 509.0], [45.8, 509.0], [45.9, 509.0], [46.0, 509.0], [46.1, 509.0], [46.2, 509.0], [46.3, 509.0], [46.4, 521.0], [46.5, 521.0], [46.6, 521.0], [46.7, 521.0], [46.8, 531.0], [46.9, 531.0], [47.0, 531.0], [47.1, 531.0], [47.2, 551.0], [47.3, 551.0], [47.4, 551.0], [47.5, 551.0], [47.6, 553.0], [47.7, 553.0], [47.8, 553.0], [47.9, 553.0], [48.0, 594.0], [48.1, 594.0], [48.2, 594.0], [48.3, 594.0], [48.4, 594.0], [48.5, 594.0], [48.6, 594.0], [48.7, 594.0], [48.8, 596.0], [48.9, 596.0], [49.0, 596.0], [49.1, 596.0], [49.2, 602.0], [49.3, 602.0], [49.4, 602.0], [49.5, 602.0], [49.6, 606.0], [49.7, 606.0], [49.8, 606.0], [49.9, 606.0], [50.0, 606.0], [50.1, 606.0], [50.2, 606.0], [50.3, 606.0], [50.4, 609.0], [50.5, 609.0], [50.6, 609.0], [50.7, 609.0], [50.8, 612.0], [50.9, 612.0], [51.0, 612.0], [51.1, 612.0], [51.2, 613.0], [51.3, 613.0], [51.4, 613.0], [51.5, 613.0], [51.6, 617.0], [51.7, 617.0], [51.8, 617.0], [51.9, 617.0], [52.0, 623.0], [52.1, 623.0], [52.2, 623.0], [52.3, 623.0], [52.4, 623.0], [52.5, 623.0], [52.6, 623.0], [52.7, 623.0], [52.8, 624.0], [52.9, 624.0], [53.0, 624.0], [53.1, 624.0], [53.2, 638.0], [53.3, 638.0], [53.4, 638.0], [53.5, 638.0], [53.6, 658.0], [53.7, 658.0], [53.8, 658.0], [53.9, 658.0], [54.0, 665.0], [54.1, 665.0], [54.2, 665.0], [54.3, 665.0], [54.4, 670.0], [54.5, 670.0], [54.6, 670.0], [54.7, 670.0], [54.8, 672.0], [54.9, 672.0], [55.0, 672.0], [55.1, 672.0], [55.2, 674.0], [55.3, 674.0], [55.4, 674.0], [55.5, 674.0], [55.6, 674.0], [55.7, 674.0], [55.8, 674.0], [55.9, 674.0], [56.0, 687.0], [56.1, 687.0], [56.2, 687.0], [56.3, 687.0], [56.4, 689.0], [56.5, 689.0], [56.6, 689.0], [56.7, 689.0], [56.8, 691.0], [56.9, 691.0], [57.0, 691.0], [57.1, 691.0], [57.2, 697.0], [57.3, 697.0], [57.4, 697.0], [57.5, 697.0], [57.6, 700.0], [57.7, 700.0], [57.8, 700.0], [57.9, 700.0], [58.0, 703.0], [58.1, 703.0], [58.2, 703.0], [58.3, 703.0], [58.4, 706.0], [58.5, 706.0], [58.6, 706.0], [58.7, 706.0], [58.8, 707.0], [58.9, 707.0], [59.0, 707.0], [59.1, 707.0], [59.2, 714.0], [59.3, 714.0], [59.4, 714.0], [59.5, 714.0], [59.6, 732.0], [59.7, 732.0], [59.8, 732.0], [59.9, 732.0], [60.0, 735.0], [60.1, 735.0], [60.2, 735.0], [60.3, 735.0], [60.4, 746.0], [60.5, 746.0], [60.6, 746.0], [60.7, 746.0], [60.8, 780.0], [60.9, 780.0], [61.0, 780.0], [61.1, 780.0], [61.2, 785.0], [61.3, 785.0], [61.4, 785.0], [61.5, 785.0], [61.6, 800.0], [61.7, 800.0], [61.8, 800.0], [61.9, 800.0], [62.0, 823.0], [62.1, 823.0], [62.2, 823.0], [62.3, 823.0], [62.4, 830.0], [62.5, 830.0], [62.6, 830.0], [62.7, 830.0], [62.8, 834.0], [62.9, 834.0], [63.0, 834.0], [63.1, 834.0], [63.2, 858.0], [63.3, 858.0], [63.4, 858.0], [63.5, 858.0], [63.6, 860.0], [63.7, 860.0], [63.8, 860.0], [63.9, 860.0], [64.0, 872.0], [64.1, 872.0], [64.2, 872.0], [64.3, 872.0], [64.4, 876.0], [64.5, 876.0], [64.6, 876.0], [64.7, 876.0], [64.8, 895.0], [64.9, 895.0], [65.0, 895.0], [65.1, 895.0], [65.2, 902.0], [65.3, 902.0], [65.4, 902.0], [65.5, 902.0], [65.6, 905.0], [65.7, 905.0], [65.8, 905.0], [65.9, 905.0], [66.0, 908.0], [66.1, 908.0], [66.2, 908.0], [66.3, 908.0], [66.4, 912.0], [66.5, 912.0], [66.6, 912.0], [66.7, 912.0], [66.8, 924.0], [66.9, 924.0], [67.0, 924.0], [67.1, 924.0], [67.2, 932.0], [67.3, 932.0], [67.4, 932.0], [67.5, 932.0], [67.6, 936.0], [67.7, 936.0], [67.8, 936.0], [67.9, 936.0], [68.0, 949.0], [68.1, 949.0], [68.2, 949.0], [68.3, 949.0], [68.4, 957.0], [68.5, 957.0], [68.6, 957.0], [68.7, 957.0], [68.8, 966.0], [68.9, 966.0], [69.0, 966.0], [69.1, 966.0], [69.2, 966.0], [69.3, 966.0], [69.4, 966.0], [69.5, 966.0], [69.6, 973.0], [69.7, 973.0], [69.8, 973.0], [69.9, 973.0], [70.0, 981.0], [70.1, 981.0], [70.2, 981.0], [70.3, 981.0], [70.4, 1025.0], [70.5, 1025.0], [70.6, 1025.0], [70.7, 1025.0], [70.8, 1031.0], [70.9, 1031.0], [71.0, 1031.0], [71.1, 1031.0], [71.2, 1044.0], [71.3, 1044.0], [71.4, 1044.0], [71.5, 1044.0], [71.6, 1063.0], [71.7, 1063.0], [71.8, 1063.0], [71.9, 1063.0], [72.0, 1082.0], [72.1, 1082.0], [72.2, 1082.0], [72.3, 1082.0], [72.4, 1101.0], [72.5, 1101.0], [72.6, 1101.0], [72.7, 1101.0], [72.8, 1103.0], [72.9, 1103.0], [73.0, 1103.0], [73.1, 1103.0], [73.2, 1111.0], [73.3, 1111.0], [73.4, 1111.0], [73.5, 1111.0], [73.6, 1133.0], [73.7, 1133.0], [73.8, 1133.0], [73.9, 1133.0], [74.0, 1156.0], [74.1, 1156.0], [74.2, 1156.0], [74.3, 1156.0], [74.4, 1171.0], [74.5, 1171.0], [74.6, 1171.0], [74.7, 1171.0], [74.8, 1176.0], [74.9, 1176.0], [75.0, 1176.0], [75.1, 1176.0], [75.2, 1208.0], [75.3, 1208.0], [75.4, 1208.0], [75.5, 1208.0], [75.6, 1208.0], [75.7, 1227.0], [75.8, 1227.0], [75.9, 1227.0], [76.0, 1227.0], [76.1, 1272.0], [76.2, 1272.0], [76.3, 1272.0], [76.4, 1272.0], [76.5, 1319.0], [76.6, 1319.0], [76.7, 1319.0], [76.8, 1319.0], [76.9, 1353.0], [77.0, 1353.0], [77.1, 1353.0], [77.2, 1353.0], [77.3, 1369.0], [77.4, 1369.0], [77.5, 1369.0], [77.6, 1369.0], [77.7, 1385.0], [77.8, 1385.0], [77.9, 1385.0], [78.0, 1385.0], [78.1, 1386.0], [78.2, 1386.0], [78.3, 1386.0], [78.4, 1386.0], [78.5, 1393.0], [78.6, 1393.0], [78.7, 1393.0], [78.8, 1393.0], [78.9, 1400.0], [79.0, 1400.0], [79.1, 1400.0], [79.2, 1400.0], [79.3, 1427.0], [79.4, 1427.0], [79.5, 1427.0], [79.6, 1427.0], [79.7, 1461.0], [79.8, 1461.0], [79.9, 1461.0], [80.0, 1461.0], [80.1, 1466.0], [80.2, 1466.0], [80.3, 1466.0], [80.4, 1466.0], [80.5, 1482.0], [80.6, 1482.0], [80.7, 1482.0], [80.8, 1482.0], [80.9, 1482.0], [81.0, 1482.0], [81.1, 1482.0], [81.2, 1482.0], [81.3, 1536.0], [81.4, 1536.0], [81.5, 1536.0], [81.6, 1536.0], [81.7, 1598.0], [81.8, 1598.0], [81.9, 1598.0], [82.0, 1598.0], [82.1, 1602.0], [82.2, 1602.0], [82.3, 1602.0], [82.4, 1602.0], [82.5, 1625.0], [82.6, 1625.0], [82.7, 1625.0], [82.8, 1625.0], [82.9, 1626.0], [83.0, 1626.0], [83.1, 1626.0], [83.2, 1626.0], [83.3, 1629.0], [83.4, 1629.0], [83.5, 1629.0], [83.6, 1629.0], [83.7, 1643.0], [83.8, 1643.0], [83.9, 1643.0], [84.0, 1643.0], [84.1, 1678.0], [84.2, 1678.0], [84.3, 1678.0], [84.4, 1678.0], [84.5, 1690.0], [84.6, 1690.0], [84.7, 1690.0], [84.8, 1690.0], [84.9, 1714.0], [85.0, 1714.0], [85.1, 1714.0], [85.2, 1714.0], [85.3, 1739.0], [85.4, 1739.0], [85.5, 1739.0], [85.6, 1739.0], [85.7, 1753.0], [85.8, 1753.0], [85.9, 1753.0], [86.0, 1753.0], [86.1, 1762.0], [86.2, 1762.0], [86.3, 1762.0], [86.4, 1762.0], [86.5, 1776.0], [86.6, 1776.0], [86.7, 1776.0], [86.8, 1776.0], [86.9, 1782.0], [87.0, 1782.0], [87.1, 1782.0], [87.2, 1782.0], [87.3, 1799.0], [87.4, 1799.0], [87.5, 1799.0], [87.6, 1799.0], [87.7, 1873.0], [87.8, 1873.0], [87.9, 1873.0], [88.0, 1873.0], [88.1, 1924.0], [88.2, 1924.0], [88.3, 1924.0], [88.4, 1924.0], [88.5, 1962.0], [88.6, 1962.0], [88.7, 1962.0], [88.8, 1962.0], [88.9, 1973.0], [89.0, 1973.0], [89.1, 1973.0], [89.2, 1973.0], [89.3, 1994.0], [89.4, 1994.0], [89.5, 1994.0], [89.6, 1994.0], [89.7, 1996.0], [89.8, 1996.0], [89.9, 1996.0], [90.0, 1996.0], [90.1, 2005.0], [90.2, 2005.0], [90.3, 2005.0], [90.4, 2005.0], [90.5, 2008.0], [90.6, 2008.0], [90.7, 2008.0], [90.8, 2008.0], [90.9, 2012.0], [91.0, 2012.0], [91.1, 2012.0], [91.2, 2012.0], [91.3, 2030.0], [91.4, 2030.0], [91.5, 2030.0], [91.6, 2030.0], [91.7, 2040.0], [91.8, 2040.0], [91.9, 2040.0], [92.0, 2040.0], [92.1, 2043.0], [92.2, 2043.0], [92.3, 2043.0], [92.4, 2043.0], [92.5, 2140.0], [92.6, 2140.0], [92.7, 2140.0], [92.8, 2140.0], [92.9, 2182.0], [93.0, 2182.0], [93.1, 2182.0], [93.2, 2182.0], [93.3, 2205.0], [93.4, 2205.0], [93.5, 2205.0], [93.6, 2205.0], [93.7, 2216.0], [93.8, 2216.0], [93.9, 2216.0], [94.0, 2216.0], [94.1, 2298.0], [94.2, 2298.0], [94.3, 2298.0], [94.4, 2298.0], [94.5, 2309.0], [94.6, 2309.0], [94.7, 2309.0], [94.8, 2309.0], [94.9, 2324.0], [95.0, 2324.0], [95.1, 2324.0], [95.2, 2324.0], [95.3, 2334.0], [95.4, 2334.0], [95.5, 2334.0], [95.6, 2334.0], [95.7, 2347.0], [95.8, 2347.0], [95.9, 2347.0], [96.0, 2347.0], [96.1, 2395.0], [96.2, 2395.0], [96.3, 2395.0], [96.4, 2395.0], [96.5, 2447.0], [96.6, 2447.0], [96.7, 2447.0], [96.8, 2447.0], [96.9, 2463.0], [97.0, 2463.0], [97.1, 2463.0], [97.2, 2463.0], [97.3, 2472.0], [97.4, 2472.0], [97.5, 2472.0], [97.6, 2472.0], [97.7, 2479.0], [97.8, 2479.0], [97.9, 2479.0], [98.0, 2479.0], [98.1, 2482.0], [98.2, 2482.0], [98.3, 2482.0], [98.4, 2482.0], [98.5, 2521.0], [98.6, 2521.0], [98.7, 2521.0], [98.8, 2521.0], [98.9, 2557.0], [99.0, 2557.0], [99.1, 2557.0], [99.2, 2557.0], [99.3, 2751.0], [99.4, 2751.0], [99.5, 2751.0], [99.6, 2751.0], [99.7, 3235.0], [99.8, 3235.0], [99.9, 3235.0], [100.0, 3235.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 135.0], [0.1, 135.0], [0.2, 135.0], [0.3, 135.0], [0.4, 139.0], [0.5, 139.0], [0.6, 139.0], [0.7, 139.0], [0.8, 144.0], [0.9, 144.0], [1.0, 144.0], [1.1, 144.0], [1.2, 144.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 147.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 147.0], [2.6, 147.0], [2.7, 147.0], [2.8, 148.0], [2.9, 148.0], [3.0, 148.0], [3.1, 148.0], [3.2, 148.0], [3.3, 148.0], [3.4, 148.0], [3.5, 148.0], [3.6, 149.0], [3.7, 149.0], [3.8, 149.0], [3.9, 149.0], [4.0, 149.0], [4.1, 149.0], [4.2, 149.0], [4.3, 149.0], [4.4, 149.0], [4.5, 149.0], [4.6, 149.0], [4.7, 149.0], [4.8, 150.0], [4.9, 150.0], [5.0, 150.0], [5.1, 150.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 151.0], [5.7, 151.0], [5.8, 151.0], [5.9, 151.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 151.0], [6.5, 151.0], [6.6, 151.0], [6.7, 151.0], [6.8, 151.0], [6.9, 151.0], [7.0, 151.0], [7.1, 151.0], [7.2, 152.0], [7.3, 152.0], [7.4, 152.0], [7.5, 152.0], [7.6, 152.0], [7.7, 152.0], [7.8, 152.0], [7.9, 152.0], [8.0, 153.0], [8.1, 153.0], [8.2, 153.0], [8.3, 153.0], [8.4, 154.0], [8.5, 154.0], [8.6, 154.0], [8.7, 154.0], [8.8, 154.0], [8.9, 154.0], [9.0, 154.0], [9.1, 154.0], [9.2, 154.0], [9.3, 154.0], [9.4, 154.0], [9.5, 154.0], [9.6, 157.0], [9.7, 157.0], [9.8, 157.0], [9.9, 157.0], [10.0, 157.0], [10.1, 157.0], [10.2, 157.0], [10.3, 157.0], [10.4, 161.0], [10.5, 161.0], [10.6, 161.0], [10.7, 161.0], [10.8, 162.0], [10.9, 162.0], [11.0, 162.0], [11.1, 162.0], [11.2, 162.0], [11.3, 162.0], [11.4, 162.0], [11.5, 162.0], [11.6, 162.0], [11.7, 163.0], [11.8, 163.0], [11.9, 163.0], [12.0, 163.0], [12.1, 163.0], [12.2, 163.0], [12.3, 163.0], [12.4, 163.0], [12.5, 166.0], [12.6, 166.0], [12.7, 166.0], [12.8, 166.0], [12.9, 167.0], [13.0, 167.0], [13.1, 167.0], [13.2, 167.0], [13.3, 174.0], [13.4, 174.0], [13.5, 174.0], [13.6, 174.0], [13.7, 175.0], [13.8, 175.0], [13.9, 175.0], [14.0, 175.0], [14.1, 177.0], [14.2, 177.0], [14.3, 177.0], [14.4, 177.0], [14.5, 177.0], [14.6, 177.0], [14.7, 177.0], [14.8, 177.0], [14.9, 184.0], [15.0, 184.0], [15.1, 184.0], [15.2, 184.0], [15.3, 185.0], [15.4, 185.0], [15.5, 185.0], [15.6, 185.0], [15.7, 186.0], [15.8, 186.0], [15.9, 186.0], [16.0, 186.0], [16.1, 188.0], [16.2, 188.0], [16.3, 188.0], [16.4, 188.0], [16.5, 189.0], [16.6, 189.0], [16.7, 189.0], [16.8, 189.0], [16.9, 189.0], [17.0, 189.0], [17.1, 189.0], [17.2, 189.0], [17.3, 193.0], [17.4, 193.0], [17.5, 193.0], [17.6, 195.0], [17.7, 195.0], [17.8, 195.0], [17.9, 195.0], [18.0, 195.0], [18.1, 195.0], [18.2, 195.0], [18.3, 195.0], [18.4, 195.0], [18.5, 196.0], [18.6, 196.0], [18.7, 196.0], [18.8, 197.0], [18.9, 197.0], [19.0, 197.0], [19.1, 197.0], [19.2, 197.0], [19.3, 197.0], [19.4, 197.0], [19.5, 197.0], [19.6, 198.0], [19.7, 198.0], [19.8, 198.0], [19.9, 198.0], [20.0, 198.0], [20.1, 198.0], [20.2, 198.0], [20.3, 198.0], [20.4, 198.0], [20.5, 200.0], [20.6, 200.0], [20.7, 200.0], [20.8, 203.0], [20.9, 203.0], [21.0, 203.0], [21.1, 203.0], [21.2, 203.0], [21.3, 203.0], [21.4, 203.0], [21.5, 203.0], [21.6, 204.0], [21.7, 204.0], [21.8, 204.0], [21.9, 204.0], [22.0, 204.0], [22.1, 204.0], [22.2, 204.0], [22.3, 204.0], [22.4, 204.0], [22.5, 205.0], [22.6, 205.0], [22.7, 205.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 208.0], [23.3, 208.0], [23.4, 208.0], [23.5, 208.0], [23.6, 211.0], [23.7, 211.0], [23.8, 211.0], [23.9, 211.0], [24.0, 213.0], [24.1, 213.0], [24.2, 213.0], [24.3, 213.0], [24.4, 213.0], [24.5, 213.0], [24.6, 213.0], [24.7, 213.0], [24.8, 215.0], [24.9, 215.0], [25.0, 215.0], [25.1, 215.0], [25.2, 216.0], [25.3, 216.0], [25.4, 216.0], [25.5, 216.0], [25.6, 217.0], [25.7, 217.0], [25.8, 217.0], [25.9, 217.0], [26.0, 219.0], [26.1, 219.0], [26.2, 219.0], [26.3, 219.0], [26.4, 220.0], [26.5, 220.0], [26.6, 220.0], [26.7, 220.0], [26.8, 225.0], [26.9, 225.0], [27.0, 225.0], [27.1, 225.0], [27.2, 231.0], [27.3, 231.0], [27.4, 231.0], [27.5, 231.0], [27.6, 232.0], [27.7, 232.0], [27.8, 232.0], [27.9, 232.0], [28.0, 233.0], [28.1, 233.0], [28.2, 233.0], [28.3, 233.0], [28.4, 236.0], [28.5, 236.0], [28.6, 236.0], [28.7, 236.0], [28.8, 239.0], [28.9, 239.0], [29.0, 239.0], [29.1, 239.0], [29.2, 240.0], [29.3, 240.0], [29.4, 240.0], [29.5, 240.0], [29.6, 250.0], [29.7, 250.0], [29.8, 250.0], [29.9, 250.0], [30.0, 251.0], [30.1, 251.0], [30.2, 251.0], [30.3, 251.0], [30.4, 255.0], [30.5, 255.0], [30.6, 255.0], [30.7, 255.0], [30.8, 263.0], [30.9, 263.0], [31.0, 263.0], [31.1, 263.0], [31.2, 264.0], [31.3, 264.0], [31.4, 264.0], [31.5, 264.0], [31.6, 272.0], [31.7, 272.0], [31.8, 272.0], [31.9, 272.0], [32.0, 273.0], [32.1, 273.0], [32.2, 273.0], [32.3, 273.0], [32.4, 273.0], [32.5, 273.0], [32.6, 273.0], [32.7, 273.0], [32.8, 274.0], [32.9, 274.0], [33.0, 274.0], [33.1, 274.0], [33.2, 275.0], [33.3, 275.0], [33.4, 275.0], [33.5, 275.0], [33.6, 277.0], [33.7, 277.0], [33.8, 277.0], [33.9, 277.0], [34.0, 277.0], [34.1, 277.0], [34.2, 277.0], [34.3, 277.0], [34.4, 283.0], [34.5, 283.0], [34.6, 283.0], [34.7, 283.0], [34.8, 284.0], [34.9, 284.0], [35.0, 284.0], [35.1, 284.0], [35.2, 285.0], [35.3, 285.0], [35.4, 285.0], [35.5, 285.0], [35.6, 293.0], [35.7, 293.0], [35.8, 293.0], [35.9, 293.0], [36.0, 296.0], [36.1, 296.0], [36.2, 296.0], [36.3, 296.0], [36.4, 298.0], [36.5, 298.0], [36.6, 298.0], [36.7, 298.0], [36.8, 300.0], [36.9, 300.0], [37.0, 300.0], [37.1, 300.0], [37.2, 302.0], [37.3, 302.0], [37.4, 302.0], [37.5, 302.0], [37.6, 302.0], [37.7, 302.0], [37.8, 302.0], [37.9, 302.0], [38.0, 304.0], [38.1, 304.0], [38.2, 304.0], [38.3, 304.0], [38.4, 304.0], [38.5, 304.0], [38.6, 304.0], [38.7, 304.0], [38.8, 305.0], [38.9, 305.0], [39.0, 305.0], [39.1, 305.0], [39.2, 308.0], [39.3, 308.0], [39.4, 308.0], [39.5, 308.0], [39.6, 311.0], [39.7, 311.0], [39.8, 311.0], [39.9, 311.0], [40.0, 311.0], [40.1, 311.0], [40.2, 311.0], [40.3, 311.0], [40.4, 314.0], [40.5, 314.0], [40.6, 314.0], [40.7, 314.0], [40.8, 315.0], [40.9, 315.0], [41.0, 315.0], [41.1, 315.0], [41.2, 315.0], [41.3, 315.0], [41.4, 315.0], [41.5, 315.0], [41.6, 318.0], [41.7, 318.0], [41.8, 318.0], [41.9, 318.0], [42.0, 320.0], [42.1, 320.0], [42.2, 320.0], [42.3, 320.0], [42.4, 325.0], [42.5, 325.0], [42.6, 325.0], [42.7, 325.0], [42.8, 330.0], [42.9, 330.0], [43.0, 330.0], [43.1, 330.0], [43.2, 332.0], [43.3, 332.0], [43.4, 332.0], [43.5, 332.0], [43.6, 338.0], [43.7, 338.0], [43.8, 338.0], [43.9, 338.0], [44.0, 338.0], [44.1, 338.0], [44.2, 338.0], [44.3, 338.0], [44.4, 342.0], [44.5, 342.0], [44.6, 342.0], [44.7, 342.0], [44.8, 342.0], [44.9, 342.0], [45.0, 342.0], [45.1, 342.0], [45.2, 346.0], [45.3, 346.0], [45.4, 346.0], [45.5, 346.0], [45.6, 354.0], [45.7, 354.0], [45.8, 354.0], [45.9, 354.0], [46.0, 359.0], [46.1, 359.0], [46.2, 359.0], [46.3, 359.0], [46.4, 363.0], [46.5, 363.0], [46.6, 363.0], [46.7, 363.0], [46.8, 363.0], [46.9, 363.0], [47.0, 363.0], [47.1, 363.0], [47.2, 364.0], [47.3, 364.0], [47.4, 364.0], [47.5, 364.0], [47.6, 368.0], [47.7, 368.0], [47.8, 368.0], [47.9, 368.0], [48.0, 373.0], [48.1, 373.0], [48.2, 373.0], [48.3, 373.0], [48.4, 374.0], [48.5, 374.0], [48.6, 374.0], [48.7, 374.0], [48.8, 376.0], [48.9, 376.0], [49.0, 376.0], [49.1, 376.0], [49.2, 380.0], [49.3, 380.0], [49.4, 380.0], [49.5, 380.0], [49.6, 384.0], [49.7, 384.0], [49.8, 384.0], [49.9, 384.0], [50.0, 390.0], [50.1, 390.0], [50.2, 390.0], [50.3, 390.0], [50.4, 393.0], [50.5, 393.0], [50.6, 393.0], [50.7, 393.0], [50.8, 394.0], [50.9, 394.0], [51.0, 394.0], [51.1, 394.0], [51.2, 399.0], [51.3, 399.0], [51.4, 399.0], [51.5, 399.0], [51.6, 407.0], [51.7, 407.0], [51.8, 407.0], [51.9, 407.0], [52.0, 410.0], [52.1, 410.0], [52.2, 410.0], [52.3, 410.0], [52.4, 410.0], [52.5, 410.0], [52.6, 410.0], [52.7, 410.0], [52.8, 414.0], [52.9, 414.0], [53.0, 414.0], [53.1, 414.0], [53.2, 415.0], [53.3, 415.0], [53.4, 415.0], [53.5, 415.0], [53.6, 432.0], [53.7, 432.0], [53.8, 432.0], [53.9, 432.0], [54.0, 433.0], [54.1, 433.0], [54.2, 433.0], [54.3, 433.0], [54.4, 434.0], [54.5, 434.0], [54.6, 434.0], [54.7, 434.0], [54.8, 438.0], [54.9, 438.0], [55.0, 438.0], [55.1, 438.0], [55.2, 441.0], [55.3, 441.0], [55.4, 441.0], [55.5, 441.0], [55.6, 447.0], [55.7, 447.0], [55.8, 447.0], [55.9, 447.0], [56.0, 449.0], [56.1, 449.0], [56.2, 449.0], [56.3, 449.0], [56.4, 465.0], [56.5, 465.0], [56.6, 465.0], [56.7, 465.0], [56.8, 465.0], [56.9, 465.0], [57.0, 465.0], [57.1, 465.0], [57.2, 466.0], [57.3, 466.0], [57.4, 466.0], [57.5, 466.0], [57.6, 484.0], [57.7, 484.0], [57.8, 484.0], [57.9, 484.0], [58.0, 486.0], [58.1, 486.0], [58.2, 486.0], [58.3, 486.0], [58.4, 490.0], [58.5, 490.0], [58.6, 490.0], [58.7, 490.0], [58.8, 493.0], [58.9, 493.0], [59.0, 493.0], [59.1, 493.0], [59.2, 498.0], [59.3, 498.0], [59.4, 498.0], [59.5, 498.0], [59.6, 500.0], [59.7, 500.0], [59.8, 500.0], [59.9, 500.0], [60.0, 507.0], [60.1, 507.0], [60.2, 507.0], [60.3, 507.0], [60.4, 511.0], [60.5, 511.0], [60.6, 511.0], [60.7, 511.0], [60.8, 531.0], [60.9, 531.0], [61.0, 531.0], [61.1, 531.0], [61.2, 531.0], [61.3, 531.0], [61.4, 531.0], [61.5, 531.0], [61.6, 549.0], [61.7, 549.0], [61.8, 549.0], [61.9, 549.0], [62.0, 552.0], [62.1, 552.0], [62.2, 552.0], [62.3, 552.0], [62.4, 552.0], [62.5, 552.0], [62.6, 552.0], [62.7, 552.0], [62.8, 562.0], [62.9, 562.0], [63.0, 562.0], [63.1, 562.0], [63.2, 567.0], [63.3, 567.0], [63.4, 567.0], [63.5, 567.0], [63.6, 572.0], [63.7, 572.0], [63.8, 572.0], [63.9, 572.0], [64.0, 576.0], [64.1, 576.0], [64.2, 576.0], [64.3, 576.0], [64.4, 578.0], [64.5, 578.0], [64.6, 578.0], [64.7, 578.0], [64.8, 581.0], [64.9, 581.0], [65.0, 581.0], [65.1, 581.0], [65.2, 582.0], [65.3, 582.0], [65.4, 582.0], [65.5, 582.0], [65.6, 583.0], [65.7, 583.0], [65.8, 583.0], [65.9, 583.0], [66.0, 589.0], [66.1, 589.0], [66.2, 589.0], [66.3, 589.0], [66.4, 600.0], [66.5, 600.0], [66.6, 600.0], [66.7, 600.0], [66.8, 612.0], [66.9, 612.0], [67.0, 612.0], [67.1, 612.0], [67.2, 613.0], [67.3, 613.0], [67.4, 613.0], [67.5, 613.0], [67.6, 621.0], [67.7, 621.0], [67.8, 621.0], [67.9, 621.0], [68.0, 646.0], [68.1, 646.0], [68.2, 646.0], [68.3, 646.0], [68.4, 656.0], [68.5, 656.0], [68.6, 656.0], [68.7, 656.0], [68.8, 667.0], [68.9, 667.0], [69.0, 667.0], [69.1, 667.0], [69.2, 667.0], [69.3, 667.0], [69.4, 667.0], [69.5, 667.0], [69.6, 670.0], [69.7, 670.0], [69.8, 670.0], [69.9, 670.0], [70.0, 671.0], [70.1, 671.0], [70.2, 671.0], [70.3, 671.0], [70.4, 677.0], [70.5, 677.0], [70.6, 677.0], [70.7, 677.0], [70.8, 686.0], [70.9, 686.0], [71.0, 686.0], [71.1, 686.0], [71.2, 692.0], [71.3, 692.0], [71.4, 692.0], [71.5, 692.0], [71.6, 693.0], [71.7, 693.0], [71.8, 693.0], [71.9, 693.0], [72.0, 695.0], [72.1, 695.0], [72.2, 695.0], [72.3, 695.0], [72.4, 708.0], [72.5, 708.0], [72.6, 708.0], [72.7, 708.0], [72.8, 713.0], [72.9, 713.0], [73.0, 713.0], [73.1, 713.0], [73.2, 723.0], [73.3, 723.0], [73.4, 723.0], [73.5, 723.0], [73.6, 724.0], [73.7, 724.0], [73.8, 724.0], [73.9, 724.0], [74.0, 724.0], [74.1, 724.0], [74.2, 724.0], [74.3, 724.0], [74.4, 731.0], [74.5, 731.0], [74.6, 731.0], [74.7, 731.0], [74.8, 738.0], [74.9, 738.0], [75.0, 738.0], [75.1, 738.0], [75.2, 749.0], [75.3, 749.0], [75.4, 749.0], [75.5, 749.0], [75.6, 774.0], [75.7, 774.0], [75.8, 774.0], [75.9, 774.0], [76.0, 778.0], [76.1, 778.0], [76.2, 778.0], [76.3, 778.0], [76.4, 817.0], [76.5, 817.0], [76.6, 817.0], [76.7, 817.0], [76.8, 817.0], [76.9, 820.0], [77.0, 820.0], [77.1, 820.0], [77.2, 820.0], [77.3, 830.0], [77.4, 830.0], [77.5, 830.0], [77.6, 830.0], [77.7, 831.0], [77.8, 831.0], [77.9, 831.0], [78.0, 831.0], [78.1, 834.0], [78.2, 834.0], [78.3, 834.0], [78.4, 834.0], [78.5, 854.0], [78.6, 854.0], [78.7, 854.0], [78.8, 854.0], [78.9, 867.0], [79.0, 867.0], [79.1, 867.0], [79.2, 867.0], [79.3, 923.0], [79.4, 923.0], [79.5, 923.0], [79.6, 923.0], [79.7, 923.0], [79.8, 923.0], [79.9, 923.0], [80.0, 923.0], [80.1, 928.0], [80.2, 928.0], [80.3, 928.0], [80.4, 928.0], [80.5, 933.0], [80.6, 933.0], [80.7, 933.0], [80.8, 933.0], [80.9, 953.0], [81.0, 953.0], [81.1, 953.0], [81.2, 953.0], [81.3, 958.0], [81.4, 958.0], [81.5, 958.0], [81.6, 958.0], [81.7, 967.0], [81.8, 967.0], [81.9, 967.0], [82.0, 967.0], [82.1, 983.0], [82.2, 983.0], [82.3, 983.0], [82.4, 983.0], [82.5, 987.0], [82.6, 987.0], [82.7, 987.0], [82.8, 987.0], [82.9, 989.0], [83.0, 989.0], [83.1, 989.0], [83.2, 989.0], [83.3, 997.0], [83.4, 997.0], [83.5, 997.0], [83.6, 997.0], [83.7, 999.0], [83.8, 999.0], [83.9, 999.0], [84.0, 999.0], [84.1, 1011.0], [84.2, 1011.0], [84.3, 1011.0], [84.4, 1011.0], [84.5, 1020.0], [84.6, 1020.0], [84.7, 1020.0], [84.8, 1020.0], [84.9, 1021.0], [85.0, 1021.0], [85.1, 1021.0], [85.2, 1021.0], [85.3, 1037.0], [85.4, 1037.0], [85.5, 1037.0], [85.6, 1037.0], [85.7, 1058.0], [85.8, 1058.0], [85.9, 1058.0], [86.0, 1058.0], [86.1, 1075.0], [86.2, 1075.0], [86.3, 1075.0], [86.4, 1075.0], [86.5, 1077.0], [86.6, 1077.0], [86.7, 1077.0], [86.8, 1077.0], [86.9, 1078.0], [87.0, 1078.0], [87.1, 1078.0], [87.2, 1078.0], [87.3, 1080.0], [87.4, 1080.0], [87.5, 1080.0], [87.6, 1080.0], [87.7, 1092.0], [87.8, 1092.0], [87.9, 1092.0], [88.0, 1092.0], [88.1, 1106.0], [88.2, 1106.0], [88.3, 1106.0], [88.4, 1106.0], [88.5, 1137.0], [88.6, 1137.0], [88.7, 1137.0], [88.8, 1137.0], [88.9, 1166.0], [89.0, 1166.0], [89.1, 1166.0], [89.2, 1166.0], [89.3, 1194.0], [89.4, 1194.0], [89.5, 1194.0], [89.6, 1194.0], [89.7, 1226.0], [89.8, 1226.0], [89.9, 1226.0], [90.0, 1226.0], [90.1, 1236.0], [90.2, 1236.0], [90.3, 1236.0], [90.4, 1236.0], [90.5, 1310.0], [90.6, 1310.0], [90.7, 1310.0], [90.8, 1310.0], [90.9, 1344.0], [91.0, 1344.0], [91.1, 1344.0], [91.2, 1344.0], [91.3, 1410.0], [91.4, 1410.0], [91.5, 1410.0], [91.6, 1410.0], [91.7, 1482.0], [91.8, 1482.0], [91.9, 1482.0], [92.0, 1482.0], [92.1, 1555.0], [92.2, 1555.0], [92.3, 1555.0], [92.4, 1555.0], [92.5, 1564.0], [92.6, 1564.0], [92.7, 1564.0], [92.8, 1564.0], [92.9, 1576.0], [93.0, 1576.0], [93.1, 1576.0], [93.2, 1576.0], [93.3, 1627.0], [93.4, 1627.0], [93.5, 1627.0], [93.6, 1627.0], [93.7, 1627.0], [93.8, 1627.0], [93.9, 1627.0], [94.0, 1627.0], [94.1, 1759.0], [94.2, 1759.0], [94.3, 1759.0], [94.4, 1759.0], [94.5, 1835.0], [94.6, 1835.0], [94.7, 1835.0], [94.8, 1835.0], [94.9, 1839.0], [95.0, 1839.0], [95.1, 1839.0], [95.2, 1839.0], [95.3, 1860.0], [95.4, 1860.0], [95.5, 1860.0], [95.6, 1860.0], [95.7, 1928.0], [95.8, 1928.0], [95.9, 1928.0], [96.0, 1928.0], [96.1, 1940.0], [96.2, 1940.0], [96.3, 1940.0], [96.4, 1940.0], [96.5, 1973.0], [96.6, 1973.0], [96.7, 1973.0], [96.8, 1973.0], [96.9, 1974.0], [97.0, 1974.0], [97.1, 1974.0], [97.2, 1974.0], [97.3, 1989.0], [97.4, 1989.0], [97.5, 1989.0], [97.6, 1989.0], [97.7, 2057.0], [97.8, 2057.0], [97.9, 2057.0], [98.0, 2057.0], [98.1, 2059.0], [98.2, 2059.0], [98.3, 2059.0], [98.4, 2059.0], [98.5, 2082.0], [98.6, 2082.0], [98.7, 2082.0], [98.8, 2082.0], [98.9, 2146.0], [99.0, 2146.0], [99.1, 2146.0], [99.2, 2146.0], [99.3, 2245.0], [99.4, 2245.0], [99.5, 2245.0], [99.6, 2245.0], [99.7, 2477.0], [99.8, 2477.0], [99.9, 2477.0], [100.0, 2477.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 136.0], [0.1, 136.0], [0.2, 136.0], [0.3, 136.0], [0.4, 137.0], [0.5, 137.0], [0.6, 137.0], [0.7, 137.0], [0.8, 139.0], [0.9, 139.0], [1.0, 139.0], [1.1, 139.0], [1.2, 139.0], [1.3, 139.0], [1.4, 139.0], [1.5, 139.0], [1.6, 140.0], [1.7, 140.0], [1.8, 140.0], [1.9, 140.0], [2.0, 141.0], [2.1, 141.0], [2.2, 141.0], [2.3, 141.0], [2.4, 141.0], [2.5, 141.0], [2.6, 141.0], [2.7, 141.0], [2.8, 143.0], [2.9, 143.0], [3.0, 143.0], [3.1, 143.0], [3.2, 143.0], [3.3, 143.0], [3.4, 143.0], [3.5, 143.0], [3.6, 144.0], [3.7, 144.0], [3.8, 144.0], [3.9, 144.0], [4.0, 144.0], [4.1, 144.0], [4.2, 144.0], [4.3, 144.0], [4.4, 145.0], [4.5, 145.0], [4.6, 145.0], [4.7, 145.0], [4.8, 146.0], [4.9, 146.0], [5.0, 146.0], [5.1, 146.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 148.0], [5.8, 148.0], [5.9, 148.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 148.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 149.0], [7.4, 149.0], [7.5, 149.0], [7.6, 149.0], [7.7, 151.0], [7.8, 151.0], [7.9, 151.0], [8.0, 151.0], [8.1, 154.0], [8.2, 154.0], [8.3, 154.0], [8.4, 154.0], [8.5, 155.0], [8.6, 155.0], [8.7, 155.0], [8.8, 155.0], [8.9, 155.0], [9.0, 155.0], [9.1, 155.0], [9.2, 155.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 156.0], [10.2, 156.0], [10.3, 156.0], [10.4, 156.0], [10.5, 157.0], [10.6, 157.0], [10.7, 157.0], [10.8, 157.0], [10.9, 157.0], [11.0, 157.0], [11.1, 157.0], [11.2, 157.0], [11.3, 158.0], [11.4, 158.0], [11.5, 158.0], [11.6, 158.0], [11.7, 158.0], [11.8, 158.0], [11.9, 158.0], [12.0, 158.0], [12.1, 158.0], [12.2, 158.0], [12.3, 158.0], [12.4, 158.0], [12.5, 159.0], [12.6, 159.0], [12.7, 159.0], [12.8, 159.0], [12.9, 159.0], [13.0, 159.0], [13.1, 159.0], [13.2, 159.0], [13.3, 160.0], [13.4, 160.0], [13.5, 160.0], [13.6, 160.0], [13.7, 160.0], [13.8, 160.0], [13.9, 160.0], [14.0, 160.0], [14.1, 161.0], [14.2, 161.0], [14.3, 161.0], [14.4, 161.0], [14.5, 162.0], [14.6, 162.0], [14.7, 162.0], [14.8, 162.0], [14.9, 164.0], [15.0, 164.0], [15.1, 164.0], [15.2, 164.0], [15.3, 167.0], [15.4, 167.0], [15.5, 167.0], [15.6, 167.0], [15.7, 167.0], [15.8, 167.0], [15.9, 167.0], [16.0, 167.0], [16.1, 167.0], [16.2, 167.0], [16.3, 167.0], [16.4, 167.0], [16.5, 168.0], [16.6, 168.0], [16.7, 168.0], [16.8, 168.0], [16.9, 169.0], [17.0, 169.0], [17.1, 169.0], [17.2, 169.0], [17.3, 170.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 170.0], [18.1, 170.0], [18.2, 170.0], [18.3, 170.0], [18.4, 170.0], [18.5, 171.0], [18.6, 171.0], [18.7, 171.0], [18.8, 172.0], [18.9, 172.0], [19.0, 172.0], [19.1, 172.0], [19.2, 174.0], [19.3, 174.0], [19.4, 174.0], [19.5, 174.0], [19.6, 174.0], [19.7, 174.0], [19.8, 174.0], [19.9, 174.0], [20.0, 175.0], [20.1, 175.0], [20.2, 175.0], [20.3, 175.0], [20.4, 177.0], [20.5, 177.0], [20.6, 177.0], [20.7, 177.0], [20.8, 178.0], [20.9, 178.0], [21.0, 178.0], [21.1, 178.0], [21.2, 181.0], [21.3, 181.0], [21.4, 181.0], [21.5, 181.0], [21.6, 181.0], [21.7, 181.0], [21.8, 181.0], [21.9, 181.0], [22.0, 182.0], [22.1, 182.0], [22.2, 182.0], [22.3, 182.0], [22.4, 185.0], [22.5, 185.0], [22.6, 185.0], [22.7, 185.0], [22.8, 185.0], [22.9, 185.0], [23.0, 185.0], [23.1, 185.0], [23.2, 186.0], [23.3, 186.0], [23.4, 186.0], [23.5, 186.0], [23.6, 188.0], [23.7, 188.0], [23.8, 188.0], [23.9, 188.0], [24.0, 190.0], [24.1, 190.0], [24.2, 190.0], [24.3, 190.0], [24.4, 190.0], [24.5, 190.0], [24.6, 190.0], [24.7, 190.0], [24.8, 192.0], [24.9, 192.0], [25.0, 192.0], [25.1, 192.0], [25.2, 193.0], [25.3, 193.0], [25.4, 193.0], [25.5, 193.0], [25.6, 194.0], [25.7, 194.0], [25.8, 194.0], [25.9, 194.0], [26.0, 194.0], [26.1, 194.0], [26.2, 194.0], [26.3, 194.0], [26.4, 195.0], [26.5, 195.0], [26.6, 195.0], [26.7, 195.0], [26.8, 195.0], [26.9, 195.0], [27.0, 195.0], [27.1, 195.0], [27.2, 196.0], [27.3, 196.0], [27.4, 196.0], [27.5, 196.0], [27.6, 196.0], [27.7, 196.0], [27.8, 196.0], [27.9, 196.0], [28.0, 196.0], [28.1, 196.0], [28.2, 196.0], [28.3, 196.0], [28.4, 196.0], [28.5, 196.0], [28.6, 196.0], [28.7, 196.0], [28.8, 200.0], [28.9, 200.0], [29.0, 200.0], [29.1, 200.0], [29.2, 202.0], [29.3, 202.0], [29.4, 202.0], [29.5, 202.0], [29.6, 202.0], [29.7, 202.0], [29.8, 202.0], [29.9, 202.0], [30.0, 202.0], [30.1, 202.0], [30.2, 202.0], [30.3, 202.0], [30.4, 204.0], [30.5, 204.0], [30.6, 204.0], [30.7, 204.0], [30.8, 205.0], [30.9, 205.0], [31.0, 205.0], [31.1, 205.0], [31.2, 207.0], [31.3, 207.0], [31.4, 207.0], [31.5, 207.0], [31.6, 208.0], [31.7, 208.0], [31.8, 208.0], [31.9, 208.0], [32.0, 211.0], [32.1, 211.0], [32.2, 211.0], [32.3, 211.0], [32.4, 212.0], [32.5, 212.0], [32.6, 212.0], [32.7, 212.0], [32.8, 212.0], [32.9, 212.0], [33.0, 212.0], [33.1, 212.0], [33.2, 212.0], [33.3, 212.0], [33.4, 212.0], [33.5, 212.0], [33.6, 213.0], [33.7, 213.0], [33.8, 213.0], [33.9, 213.0], [34.0, 216.0], [34.1, 216.0], [34.2, 216.0], [34.3, 216.0], [34.4, 216.0], [34.5, 216.0], [34.6, 216.0], [34.7, 216.0], [34.8, 221.0], [34.9, 221.0], [35.0, 221.0], [35.1, 221.0], [35.2, 222.0], [35.3, 222.0], [35.4, 222.0], [35.5, 222.0], [35.6, 223.0], [35.7, 223.0], [35.8, 223.0], [35.9, 223.0], [36.0, 223.0], [36.1, 223.0], [36.2, 223.0], [36.3, 223.0], [36.4, 225.0], [36.5, 225.0], [36.6, 225.0], [36.7, 225.0], [36.8, 229.0], [36.9, 229.0], [37.0, 229.0], [37.1, 229.0], [37.2, 230.0], [37.3, 230.0], [37.4, 230.0], [37.5, 230.0], [37.6, 236.0], [37.7, 236.0], [37.8, 236.0], [37.9, 236.0], [38.0, 239.0], [38.1, 239.0], [38.2, 239.0], [38.3, 239.0], [38.4, 244.0], [38.5, 244.0], [38.6, 244.0], [38.7, 244.0], [38.8, 245.0], [38.9, 245.0], [39.0, 245.0], [39.1, 245.0], [39.2, 247.0], [39.3, 247.0], [39.4, 247.0], [39.5, 247.0], [39.6, 249.0], [39.7, 249.0], [39.8, 249.0], [39.9, 249.0], [40.0, 250.0], [40.1, 250.0], [40.2, 250.0], [40.3, 250.0], [40.4, 252.0], [40.5, 252.0], [40.6, 252.0], [40.7, 252.0], [40.8, 253.0], [40.9, 253.0], [41.0, 253.0], [41.1, 253.0], [41.2, 253.0], [41.3, 253.0], [41.4, 253.0], [41.5, 253.0], [41.6, 255.0], [41.7, 255.0], [41.8, 255.0], [41.9, 255.0], [42.0, 259.0], [42.1, 259.0], [42.2, 259.0], [42.3, 259.0], [42.4, 261.0], [42.5, 261.0], [42.6, 261.0], [42.7, 261.0], [42.8, 262.0], [42.9, 262.0], [43.0, 262.0], [43.1, 262.0], [43.2, 264.0], [43.3, 264.0], [43.4, 264.0], [43.5, 264.0], [43.6, 265.0], [43.7, 265.0], [43.8, 265.0], [43.9, 265.0], [44.0, 269.0], [44.1, 269.0], [44.2, 269.0], [44.3, 269.0], [44.4, 269.0], [44.5, 269.0], [44.6, 269.0], [44.7, 269.0], [44.8, 275.0], [44.9, 275.0], [45.0, 275.0], [45.1, 275.0], [45.2, 276.0], [45.3, 276.0], [45.4, 276.0], [45.5, 276.0], [45.6, 283.0], [45.7, 283.0], [45.8, 283.0], [45.9, 283.0], [46.0, 283.0], [46.1, 283.0], [46.2, 283.0], [46.3, 283.0], [46.4, 290.0], [46.5, 290.0], [46.6, 290.0], [46.7, 290.0], [46.8, 295.0], [46.9, 295.0], [47.0, 295.0], [47.1, 295.0], [47.2, 298.0], [47.3, 298.0], [47.4, 298.0], [47.5, 298.0], [47.6, 299.0], [47.7, 299.0], [47.8, 299.0], [47.9, 299.0], [48.0, 306.0], [48.1, 306.0], [48.2, 306.0], [48.3, 306.0], [48.4, 306.0], [48.5, 306.0], [48.6, 306.0], [48.7, 306.0], [48.8, 319.0], [48.9, 319.0], [49.0, 319.0], [49.1, 319.0], [49.2, 326.0], [49.3, 326.0], [49.4, 326.0], [49.5, 326.0], [49.6, 337.0], [49.7, 337.0], [49.8, 337.0], [49.9, 337.0], [50.0, 341.0], [50.1, 341.0], [50.2, 341.0], [50.3, 341.0], [50.4, 352.0], [50.5, 352.0], [50.6, 352.0], [50.7, 352.0], [50.8, 355.0], [50.9, 355.0], [51.0, 355.0], [51.1, 355.0], [51.2, 355.0], [51.3, 355.0], [51.4, 355.0], [51.5, 355.0], [51.6, 355.0], [51.7, 355.0], [51.8, 355.0], [51.9, 355.0], [52.0, 357.0], [52.1, 357.0], [52.2, 357.0], [52.3, 357.0], [52.4, 359.0], [52.5, 359.0], [52.6, 359.0], [52.7, 359.0], [52.8, 372.0], [52.9, 372.0], [53.0, 372.0], [53.1, 372.0], [53.2, 378.0], [53.3, 378.0], [53.4, 378.0], [53.5, 378.0], [53.6, 381.0], [53.7, 381.0], [53.8, 381.0], [53.9, 381.0], [54.0, 384.0], [54.1, 384.0], [54.2, 384.0], [54.3, 384.0], [54.4, 386.0], [54.5, 386.0], [54.6, 386.0], [54.7, 386.0], [54.8, 389.0], [54.9, 389.0], [55.0, 389.0], [55.1, 389.0], [55.2, 393.0], [55.3, 393.0], [55.4, 393.0], [55.5, 393.0], [55.6, 397.0], [55.7, 397.0], [55.8, 397.0], [55.9, 397.0], [56.0, 399.0], [56.1, 399.0], [56.2, 399.0], [56.3, 399.0], [56.4, 412.0], [56.5, 412.0], [56.6, 412.0], [56.7, 412.0], [56.8, 426.0], [56.9, 426.0], [57.0, 426.0], [57.1, 426.0], [57.2, 432.0], [57.3, 432.0], [57.4, 432.0], [57.5, 432.0], [57.6, 433.0], [57.7, 433.0], [57.8, 433.0], [57.9, 433.0], [58.0, 434.0], [58.1, 434.0], [58.2, 434.0], [58.3, 434.0], [58.4, 435.0], [58.5, 435.0], [58.6, 435.0], [58.7, 435.0], [58.8, 441.0], [58.9, 441.0], [59.0, 441.0], [59.1, 441.0], [59.2, 445.0], [59.3, 445.0], [59.4, 445.0], [59.5, 445.0], [59.6, 448.0], [59.7, 448.0], [59.8, 448.0], [59.9, 448.0], [60.0, 450.0], [60.1, 450.0], [60.2, 450.0], [60.3, 450.0], [60.4, 450.0], [60.5, 450.0], [60.6, 450.0], [60.7, 450.0], [60.8, 451.0], [60.9, 451.0], [61.0, 451.0], [61.1, 451.0], [61.2, 457.0], [61.3, 457.0], [61.4, 457.0], [61.5, 457.0], [61.6, 463.0], [61.7, 463.0], [61.8, 463.0], [61.9, 463.0], [62.0, 478.0], [62.1, 478.0], [62.2, 478.0], [62.3, 478.0], [62.4, 481.0], [62.5, 481.0], [62.6, 481.0], [62.7, 481.0], [62.8, 481.0], [62.9, 481.0], [63.0, 481.0], [63.1, 481.0], [63.2, 486.0], [63.3, 486.0], [63.4, 486.0], [63.5, 486.0], [63.6, 489.0], [63.7, 489.0], [63.8, 489.0], [63.9, 489.0], [64.0, 490.0], [64.1, 490.0], [64.2, 490.0], [64.3, 490.0], [64.4, 493.0], [64.5, 493.0], [64.6, 493.0], [64.7, 493.0], [64.8, 504.0], [64.9, 504.0], [65.0, 504.0], [65.1, 504.0], [65.2, 507.0], [65.3, 507.0], [65.4, 507.0], [65.5, 507.0], [65.6, 508.0], [65.7, 508.0], [65.8, 508.0], [65.9, 508.0], [66.0, 509.0], [66.1, 509.0], [66.2, 509.0], [66.3, 509.0], [66.4, 549.0], [66.5, 549.0], [66.6, 549.0], [66.7, 549.0], [66.8, 558.0], [66.9, 558.0], [67.0, 558.0], [67.1, 558.0], [67.2, 572.0], [67.3, 572.0], [67.4, 572.0], [67.5, 572.0], [67.6, 620.0], [67.7, 620.0], [67.8, 620.0], [67.9, 620.0], [68.0, 620.0], [68.1, 620.0], [68.2, 620.0], [68.3, 620.0], [68.4, 621.0], [68.5, 621.0], [68.6, 621.0], [68.7, 621.0], [68.8, 648.0], [68.9, 648.0], [69.0, 648.0], [69.1, 648.0], [69.2, 650.0], [69.3, 650.0], [69.4, 650.0], [69.5, 650.0], [69.6, 694.0], [69.7, 694.0], [69.8, 694.0], [69.9, 694.0], [70.0, 699.0], [70.1, 699.0], [70.2, 699.0], [70.3, 699.0], [70.4, 701.0], [70.5, 701.0], [70.6, 701.0], [70.7, 701.0], [70.8, 702.0], [70.9, 702.0], [71.0, 702.0], [71.1, 702.0], [71.2, 706.0], [71.3, 706.0], [71.4, 706.0], [71.5, 706.0], [71.6, 730.0], [71.7, 730.0], [71.8, 730.0], [71.9, 730.0], [72.0, 737.0], [72.1, 737.0], [72.2, 737.0], [72.3, 737.0], [72.4, 737.0], [72.5, 737.0], [72.6, 737.0], [72.7, 737.0], [72.8, 743.0], [72.9, 743.0], [73.0, 743.0], [73.1, 743.0], [73.2, 773.0], [73.3, 773.0], [73.4, 773.0], [73.5, 773.0], [73.6, 779.0], [73.7, 779.0], [73.8, 779.0], [73.9, 779.0], [74.0, 787.0], [74.1, 787.0], [74.2, 787.0], [74.3, 787.0], [74.4, 816.0], [74.5, 816.0], [74.6, 816.0], [74.7, 816.0], [74.8, 816.0], [74.9, 822.0], [75.0, 822.0], [75.1, 822.0], [75.2, 822.0], [75.3, 825.0], [75.4, 825.0], [75.5, 825.0], [75.6, 825.0], [75.7, 841.0], [75.8, 841.0], [75.9, 841.0], [76.0, 841.0], [76.1, 845.0], [76.2, 845.0], [76.3, 845.0], [76.4, 845.0], [76.5, 848.0], [76.6, 848.0], [76.7, 848.0], [76.8, 848.0], [76.9, 872.0], [77.0, 872.0], [77.1, 872.0], [77.2, 872.0], [77.3, 881.0], [77.4, 881.0], [77.5, 881.0], [77.6, 881.0], [77.7, 891.0], [77.8, 891.0], [77.9, 891.0], [78.0, 891.0], [78.1, 907.0], [78.2, 907.0], [78.3, 907.0], [78.4, 907.0], [78.5, 917.0], [78.6, 917.0], [78.7, 917.0], [78.8, 917.0], [78.9, 923.0], [79.0, 923.0], [79.1, 923.0], [79.2, 923.0], [79.3, 926.0], [79.4, 926.0], [79.5, 926.0], [79.6, 926.0], [79.7, 931.0], [79.8, 931.0], [79.9, 931.0], [80.0, 931.0], [80.1, 937.0], [80.2, 937.0], [80.3, 937.0], [80.4, 937.0], [80.5, 938.0], [80.6, 938.0], [80.7, 938.0], [80.8, 938.0], [80.9, 944.0], [81.0, 944.0], [81.1, 944.0], [81.2, 944.0], [81.3, 946.0], [81.4, 946.0], [81.5, 946.0], [81.6, 946.0], [81.7, 949.0], [81.8, 949.0], [81.9, 949.0], [82.0, 949.0], [82.1, 949.0], [82.2, 949.0], [82.3, 949.0], [82.4, 949.0], [82.5, 965.0], [82.6, 965.0], [82.7, 965.0], [82.8, 965.0], [82.9, 973.0], [83.0, 973.0], [83.1, 973.0], [83.2, 973.0], [83.3, 988.0], [83.4, 988.0], [83.5, 988.0], [83.6, 988.0], [83.7, 994.0], [83.8, 994.0], [83.9, 994.0], [84.0, 994.0], [84.1, 997.0], [84.2, 997.0], [84.3, 997.0], [84.4, 997.0], [84.5, 1001.0], [84.6, 1001.0], [84.7, 1001.0], [84.8, 1001.0], [84.9, 1046.0], [85.0, 1046.0], [85.1, 1046.0], [85.2, 1046.0], [85.3, 1098.0], [85.4, 1098.0], [85.5, 1098.0], [85.6, 1098.0], [85.7, 1111.0], [85.8, 1111.0], [85.9, 1111.0], [86.0, 1111.0], [86.1, 1150.0], [86.2, 1150.0], [86.3, 1150.0], [86.4, 1150.0], [86.5, 1180.0], [86.6, 1180.0], [86.7, 1180.0], [86.8, 1180.0], [86.9, 1189.0], [87.0, 1189.0], [87.1, 1189.0], [87.2, 1189.0], [87.3, 1269.0], [87.4, 1269.0], [87.5, 1269.0], [87.6, 1269.0], [87.7, 1273.0], [87.8, 1273.0], [87.9, 1273.0], [88.0, 1273.0], [88.1, 1314.0], [88.2, 1314.0], [88.3, 1314.0], [88.4, 1314.0], [88.5, 1323.0], [88.6, 1323.0], [88.7, 1323.0], [88.8, 1323.0], [88.9, 1408.0], [89.0, 1408.0], [89.1, 1408.0], [89.2, 1408.0], [89.3, 1421.0], [89.4, 1421.0], [89.5, 1421.0], [89.6, 1421.0], [89.7, 1422.0], [89.8, 1422.0], [89.9, 1422.0], [90.0, 1422.0], [90.1, 1466.0], [90.2, 1466.0], [90.3, 1466.0], [90.4, 1466.0], [90.5, 1473.0], [90.6, 1473.0], [90.7, 1473.0], [90.8, 1473.0], [90.9, 1503.0], [91.0, 1503.0], [91.1, 1503.0], [91.2, 1503.0], [91.3, 1510.0], [91.4, 1510.0], [91.5, 1510.0], [91.6, 1510.0], [91.7, 1525.0], [91.8, 1525.0], [91.9, 1525.0], [92.0, 1525.0], [92.1, 1531.0], [92.2, 1531.0], [92.3, 1531.0], [92.4, 1531.0], [92.5, 1653.0], [92.6, 1653.0], [92.7, 1653.0], [92.8, 1653.0], [92.9, 1677.0], [93.0, 1677.0], [93.1, 1677.0], [93.2, 1677.0], [93.3, 1686.0], [93.4, 1686.0], [93.5, 1686.0], [93.6, 1686.0], [93.7, 1696.0], [93.8, 1696.0], [93.9, 1696.0], [94.0, 1696.0], [94.1, 1723.0], [94.2, 1723.0], [94.3, 1723.0], [94.4, 1723.0], [94.5, 1729.0], [94.6, 1729.0], [94.7, 1729.0], [94.8, 1729.0], [94.9, 1785.0], [95.0, 1785.0], [95.1, 1785.0], [95.2, 1785.0], [95.3, 1874.0], [95.4, 1874.0], [95.5, 1874.0], [95.6, 1874.0], [95.7, 1880.0], [95.8, 1880.0], [95.9, 1880.0], [96.0, 1880.0], [96.1, 1956.0], [96.2, 1956.0], [96.3, 1956.0], [96.4, 1956.0], [96.5, 1992.0], [96.6, 1992.0], [96.7, 1992.0], [96.8, 1992.0], [96.9, 2023.0], [97.0, 2023.0], [97.1, 2023.0], [97.2, 2023.0], [97.3, 2103.0], [97.4, 2103.0], [97.5, 2103.0], [97.6, 2103.0], [97.7, 2125.0], [97.8, 2125.0], [97.9, 2125.0], [98.0, 2125.0], [98.1, 2145.0], [98.2, 2145.0], [98.3, 2145.0], [98.4, 2145.0], [98.5, 2153.0], [98.6, 2153.0], [98.7, 2153.0], [98.8, 2153.0], [98.9, 2205.0], [99.0, 2205.0], [99.1, 2205.0], [99.2, 2205.0], [99.3, 2386.0], [99.4, 2386.0], [99.5, 2386.0], [99.6, 2386.0], [99.7, 2497.0], [99.8, 2497.0], [99.9, 2497.0], [100.0, 2497.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 72.0, "series": [{"data": [[600.0, 21.0], [700.0, 10.0], [800.0, 9.0], [900.0, 13.0], [1000.0, 5.0], [1100.0, 7.0], [1200.0, 3.0], [1300.0, 6.0], [1400.0, 6.0], [1500.0, 2.0], [1600.0, 7.0], [100.0, 38.0], [1700.0, 7.0], [1800.0, 1.0], [1900.0, 5.0], [2000.0, 6.0], [2100.0, 2.0], [2300.0, 5.0], [2200.0, 3.0], [2400.0, 5.0], [2500.0, 2.0], [2700.0, 1.0], [200.0, 38.0], [3200.0, 1.0], [300.0, 24.0], [400.0, 13.0], [500.0, 10.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[2100.0, 1.0], [2200.0, 1.0], [600.0, 15.0], [2400.0, 1.0], [700.0, 10.0], [200.0, 41.0], [800.0, 7.0], [900.0, 12.0], [1000.0, 10.0], [1100.0, 4.0], [300.0, 37.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 3.0], [100.0, 51.0], [400.0, 20.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 3.0], [1900.0, 5.0], [500.0, 17.0], [2000.0, 3.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[2100.0, 4.0], [2200.0, 1.0], [2300.0, 1.0], [600.0, 7.0], [2400.0, 1.0], [700.0, 10.0], [200.0, 48.0], [800.0, 9.0], [900.0, 16.0], [1000.0, 3.0], [1100.0, 4.0], [300.0, 21.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 5.0], [1500.0, 4.0], [100.0, 72.0], [400.0, 21.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 2.0], [500.0, 7.0], [2000.0, 1.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 90.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 425.0, "series": [{"data": [[0.0, 425.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 235.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 90.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 49.270666666666685, "minX": 1.7279337E12, "maxY": 49.270666666666685, "series": [{"data": [[1.7279337E12, 49.270666666666685]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7279337E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 139.0, "minX": 1.0, "maxY": 2023.0, "series": [{"data": [[33.0, 442.0], [35.0, 723.0], [38.0, 607.8333333333334], [39.0, 348.5], [41.0, 415.7], [40.0, 705.4444444444443], [43.0, 564.5714285714287], [42.0, 561.3124999999999], [45.0, 906.1999999999999], [44.0, 799.4000000000001], [46.0, 746.0], [47.0, 981.0], [49.0, 807.75], [51.0, 796.0], [50.0, 512.6], [53.0, 257.0], [52.0, 823.0], [55.0, 1034.8333333333333], [56.0, 1050.6666666666667], [57.0, 644.7142857142857], [58.0, 899.4285714285714], [59.0, 1152.5], [60.0, 1080.0], [61.0, 916.2], [62.0, 1861.3333333333333], [63.0, 832.4], [64.0, 1198.888888888889], [65.0, 921.875], [66.0, 1304.5], [67.0, 840.75], [68.0, 1386.3333333333333], [69.0, 1348.6666666666667], [70.0, 1633.5], [71.0, 1131.8], [72.0, 1072.9166666666665], [73.0, 236.0], [74.0, 805.0], [75.0, 474.5], [76.0, 167.0], [12.0, 1361.0], [15.0, 1625.0], [18.0, 1714.0], [20.0, 966.0], [28.0, 1477.5]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[51.34400000000002, 828.3920000000002]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[3.0, 572.0], [8.0, 549.0], [12.0, 1154.5], [13.0, 498.0], [14.0, 304.0], [17.0, 441.0], [20.0, 617.0], [22.0, 521.5], [28.0, 199.0], [29.0, 511.0], [30.0, 167.0], [33.0, 576.0], [32.0, 148.0], [35.0, 263.0], [37.0, 484.0], [39.0, 355.25], [38.0, 711.8333333333334], [41.0, 504.28], [40.0, 454.15384615384613], [43.0, 633.3], [42.0, 613.0625], [45.0, 326.2941176470588], [44.0, 931.1666666666666], [47.0, 1021.0], [46.0, 466.66666666666663], [49.0, 345.8], [48.0, 364.0], [50.0, 926.8333333333334], [51.0, 387.5], [53.0, 298.0], [52.0, 1974.0], [54.0, 372.0], [55.0, 865.75], [57.0, 301.25], [56.0, 531.0], [59.0, 1379.3333333333333], [58.0, 801.5454545454546], [61.0, 241.66666666666666], [60.0, 1369.5], [62.0, 274.5], [63.0, 162.0], [65.0, 569.0], [66.0, 255.0], [67.0, 299.5], [69.0, 266.0], [70.0, 533.5], [71.0, 528.8571428571429], [68.0, 588.5], [72.0, 619.7272727272727], [73.0, 632.3333333333334], [74.0, 799.9999999999999], [75.0, 781.6249999999999], [1.0, 854.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[49.92799999999999, 581.2239999999997]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 207.0], [3.0, 773.0], [4.0, 223.0], [5.0, 508.0], [6.0, 845.0], [7.0, 1323.0], [8.0, 441.0], [9.0, 144.0], [10.0, 1408.0], [11.0, 937.0], [12.0, 245.0], [13.0, 1466.0], [14.0, 1729.0], [15.0, 306.0], [16.0, 926.0], [17.0, 259.0], [18.0, 1098.0], [19.0, 186.0], [20.0, 144.0], [21.0, 949.0], [22.0, 881.0], [23.0, 931.0], [24.0, 169.0], [25.0, 946.0], [26.0, 181.0], [27.0, 1874.0], [28.0, 196.0], [29.0, 149.0], [30.0, 701.0], [31.0, 907.0], [33.0, 2023.0], [32.0, 177.0], [35.0, 1046.0], [34.0, 261.0], [37.0, 1510.0], [36.0, 139.0], [39.0, 581.75], [38.0, 526.3333333333334], [41.0, 460.76190476190476], [40.0, 759.5999999999999], [43.0, 473.11111111111114], [42.0, 488.72222222222223], [45.0, 366.41176470588243], [44.0, 537.1], [47.0, 292.6666666666667], [46.0, 949.0], [49.0, 347.0], [48.0, 1956.0], [51.0, 328.3333333333333], [50.0, 566.5714285714286], [53.0, 412.0], [52.0, 972.8333333333333], [55.0, 1359.0], [54.0, 364.5], [57.0, 202.0], [56.0, 1048.5], [59.0, 407.4285714285714], [58.0, 762.1428571428571], [61.0, 297.3333333333333], [60.0, 541.3333333333333], [63.0, 464.5], [62.0, 276.0], [66.0, 516.3333333333334], [67.0, 306.0], [65.0, 647.8], [64.0, 923.0], [69.0, 302.5], [70.0, 186.66666666666666], [71.0, 345.0], [68.0, 704.0], [72.0, 198.75], [73.0, 566.125], [74.0, 347.5], [75.0, 415.3333333333333], [76.0, 283.5], [1.0, 822.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[46.53999999999998, 570.2959999999999]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 76.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5508.333333333333, "minX": 1.7279337E12, "maxY": 82833.46666666666, "series": [{"data": [[1.7279337E12, 82833.46666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7279337E12, 5508.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7279337E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 570.2959999999999, "minX": 1.7279337E12, "maxY": 828.3920000000002, "series": [{"data": [[1.7279337E12, 828.3920000000002]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.7279337E12, 581.2239999999997]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.7279337E12, 570.2959999999999]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7279337E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 569.7320000000002, "minX": 1.7279337E12, "maxY": 827.0799999999996, "series": [{"data": [[1.7279337E12, 827.0799999999996]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.7279337E12, 580.0760000000005]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.7279337E12, 569.7320000000002]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7279337E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7279337E12, "maxY": 216.98799999999997, "series": [{"data": [[1.7279337E12, 216.98799999999997]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.7279337E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.7279337E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7279337E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 135.0, "minX": 1.7279337E12, "maxY": 3235.0, "series": [{"data": [[1.7279337E12, 3235.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7279337E12, 1641.5999999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7279337E12, 2477.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7279337E12, 2009.7999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7279337E12, 135.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7279337E12, 413.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7279337E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 295.5, "minX": 3.0, "maxY": 845.0, "series": [{"data": [[70.0, 374.0], [72.0, 845.0], [79.0, 311.0], [82.0, 295.5], [85.0, 363.0], [91.0, 390.0], [93.0, 498.0], [3.0, 822.0], [100.0, 471.5], [50.0, 531.0], [25.0, 773.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 295.0, "minX": 3.0, "maxY": 843.5, "series": [{"data": [[70.0, 372.5], [72.0, 843.5], [79.0, 310.0], [82.0, 295.0], [85.0, 360.0], [91.0, 389.0], [93.0, 498.0], [3.0, 822.0], [100.0, 471.0], [50.0, 530.0], [25.0, 773.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.7279337E12, "maxY": 12.5, "series": [{"data": [[1.7279337E12, 12.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7279337E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.7279337E12, "maxY": 12.5, "series": [{"data": [[1.7279337E12, 12.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7279337E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.7279337E12, "maxY": 4.166666666666667, "series": [{"data": [[1.7279337E12, 4.166666666666667]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.7279337E12, 4.166666666666667]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.7279337E12, 4.166666666666667]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7279337E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.7279337E12, "maxY": 12.5, "series": [{"data": [[1.7279337E12, 12.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7279337E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

