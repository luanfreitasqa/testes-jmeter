/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 133.0, "minX": 0.0, "maxY": 3785.0, "series": [{"data": [[0.0, 156.0], [0.1, 156.0], [0.2, 156.0], [0.3, 156.0], [0.4, 158.0], [0.5, 158.0], [0.6, 158.0], [0.7, 158.0], [0.8, 161.0], [0.9, 161.0], [1.0, 161.0], [1.1, 161.0], [1.2, 161.0], [1.3, 162.0], [1.4, 162.0], [1.5, 162.0], [1.6, 162.0], [1.7, 162.0], [1.8, 162.0], [1.9, 162.0], [2.0, 162.0], [2.1, 162.0], [2.2, 162.0], [2.3, 162.0], [2.4, 162.0], [2.5, 162.0], [2.6, 162.0], [2.7, 162.0], [2.8, 162.0], [2.9, 162.0], [3.0, 162.0], [3.1, 162.0], [3.2, 163.0], [3.3, 163.0], [3.4, 163.0], [3.5, 163.0], [3.6, 165.0], [3.7, 165.0], [3.8, 165.0], [3.9, 165.0], [4.0, 166.0], [4.1, 166.0], [4.2, 166.0], [4.3, 166.0], [4.4, 166.0], [4.5, 166.0], [4.6, 166.0], [4.7, 166.0], [4.8, 167.0], [4.9, 167.0], [5.0, 167.0], [5.1, 167.0], [5.2, 168.0], [5.3, 168.0], [5.4, 168.0], [5.5, 168.0], [5.6, 168.0], [5.7, 171.0], [5.8, 171.0], [5.9, 171.0], [6.0, 171.0], [6.1, 172.0], [6.2, 172.0], [6.3, 172.0], [6.4, 172.0], [6.5, 173.0], [6.6, 173.0], [6.7, 173.0], [6.8, 173.0], [6.9, 173.0], [7.0, 173.0], [7.1, 173.0], [7.2, 173.0], [7.3, 174.0], [7.4, 174.0], [7.5, 174.0], [7.6, 174.0], [7.7, 175.0], [7.8, 175.0], [7.9, 175.0], [8.0, 175.0], [8.1, 175.0], [8.2, 175.0], [8.3, 175.0], [8.4, 175.0], [8.5, 177.0], [8.6, 177.0], [8.7, 177.0], [8.8, 177.0], [8.9, 177.0], [9.0, 177.0], [9.1, 177.0], [9.2, 177.0], [9.3, 177.0], [9.4, 177.0], [9.5, 177.0], [9.6, 177.0], [9.7, 178.0], [9.8, 178.0], [9.9, 178.0], [10.0, 178.0], [10.1, 179.0], [10.2, 179.0], [10.3, 179.0], [10.4, 179.0], [10.5, 180.0], [10.6, 180.0], [10.7, 180.0], [10.8, 180.0], [10.9, 180.0], [11.0, 180.0], [11.1, 180.0], [11.2, 180.0], [11.3, 181.0], [11.4, 181.0], [11.5, 181.0], [11.6, 181.0], [11.7, 181.0], [11.8, 181.0], [11.9, 181.0], [12.0, 181.0], [12.1, 181.0], [12.2, 181.0], [12.3, 181.0], [12.4, 181.0], [12.5, 183.0], [12.6, 183.0], [12.7, 183.0], [12.8, 183.0], [12.9, 187.0], [13.0, 187.0], [13.1, 187.0], [13.2, 187.0], [13.3, 187.0], [13.4, 187.0], [13.5, 187.0], [13.6, 187.0], [13.7, 188.0], [13.8, 188.0], [13.9, 188.0], [14.0, 188.0], [14.1, 190.0], [14.2, 190.0], [14.3, 190.0], [14.4, 190.0], [14.5, 192.0], [14.6, 192.0], [14.7, 192.0], [14.8, 192.0], [14.9, 192.0], [15.0, 192.0], [15.1, 192.0], [15.2, 192.0], [15.3, 193.0], [15.4, 193.0], [15.5, 193.0], [15.6, 193.0], [15.7, 196.0], [15.8, 196.0], [15.9, 196.0], [16.0, 196.0], [16.1, 197.0], [16.2, 197.0], [16.3, 197.0], [16.4, 197.0], [16.5, 197.0], [16.6, 197.0], [16.7, 197.0], [16.8, 197.0], [16.9, 198.0], [17.0, 198.0], [17.1, 198.0], [17.2, 198.0], [17.3, 199.0], [17.4, 199.0], [17.5, 199.0], [17.6, 202.0], [17.7, 202.0], [17.8, 202.0], [17.9, 202.0], [18.0, 204.0], [18.1, 204.0], [18.2, 204.0], [18.3, 204.0], [18.4, 204.0], [18.5, 204.0], [18.6, 204.0], [18.7, 204.0], [18.8, 207.0], [18.9, 207.0], [19.0, 207.0], [19.1, 207.0], [19.2, 209.0], [19.3, 209.0], [19.4, 209.0], [19.5, 209.0], [19.6, 210.0], [19.7, 210.0], [19.8, 210.0], [19.9, 210.0], [20.0, 212.0], [20.1, 212.0], [20.2, 212.0], [20.3, 212.0], [20.4, 212.0], [20.5, 212.0], [20.6, 212.0], [20.7, 212.0], [20.8, 212.0], [20.9, 212.0], [21.0, 212.0], [21.1, 212.0], [21.2, 215.0], [21.3, 215.0], [21.4, 215.0], [21.5, 215.0], [21.6, 217.0], [21.7, 217.0], [21.8, 217.0], [21.9, 217.0], [22.0, 219.0], [22.1, 219.0], [22.2, 219.0], [22.3, 219.0], [22.4, 219.0], [22.5, 219.0], [22.6, 219.0], [22.7, 219.0], [22.8, 221.0], [22.9, 221.0], [23.0, 221.0], [23.1, 221.0], [23.2, 222.0], [23.3, 222.0], [23.4, 222.0], [23.5, 222.0], [23.6, 224.0], [23.7, 224.0], [23.8, 224.0], [23.9, 224.0], [24.0, 225.0], [24.1, 225.0], [24.2, 225.0], [24.3, 225.0], [24.4, 226.0], [24.5, 226.0], [24.6, 226.0], [24.7, 226.0], [24.8, 228.0], [24.9, 228.0], [25.0, 228.0], [25.1, 228.0], [25.2, 229.0], [25.3, 229.0], [25.4, 229.0], [25.5, 229.0], [25.6, 230.0], [25.7, 230.0], [25.8, 230.0], [25.9, 230.0], [26.0, 232.0], [26.1, 232.0], [26.2, 232.0], [26.3, 232.0], [26.4, 233.0], [26.5, 233.0], [26.6, 233.0], [26.7, 233.0], [26.8, 234.0], [26.9, 234.0], [27.0, 234.0], [27.1, 234.0], [27.2, 235.0], [27.3, 235.0], [27.4, 235.0], [27.5, 235.0], [27.6, 242.0], [27.7, 242.0], [27.8, 242.0], [27.9, 242.0], [28.0, 242.0], [28.1, 242.0], [28.2, 242.0], [28.3, 242.0], [28.4, 243.0], [28.5, 243.0], [28.6, 243.0], [28.7, 243.0], [28.8, 243.0], [28.9, 243.0], [29.0, 243.0], [29.1, 243.0], [29.2, 253.0], [29.3, 253.0], [29.4, 253.0], [29.5, 253.0], [29.6, 262.0], [29.7, 262.0], [29.8, 262.0], [29.9, 262.0], [30.0, 262.0], [30.1, 262.0], [30.2, 262.0], [30.3, 262.0], [30.4, 264.0], [30.5, 264.0], [30.6, 264.0], [30.7, 264.0], [30.8, 267.0], [30.9, 267.0], [31.0, 267.0], [31.1, 267.0], [31.2, 269.0], [31.3, 269.0], [31.4, 269.0], [31.5, 269.0], [31.6, 271.0], [31.7, 271.0], [31.8, 271.0], [31.9, 271.0], [32.0, 273.0], [32.1, 273.0], [32.2, 273.0], [32.3, 273.0], [32.4, 274.0], [32.5, 274.0], [32.6, 274.0], [32.7, 274.0], [32.8, 276.0], [32.9, 276.0], [33.0, 276.0], [33.1, 276.0], [33.2, 276.0], [33.3, 276.0], [33.4, 276.0], [33.5, 276.0], [33.6, 279.0], [33.7, 279.0], [33.8, 279.0], [33.9, 279.0], [34.0, 280.0], [34.1, 280.0], [34.2, 280.0], [34.3, 280.0], [34.4, 280.0], [34.5, 280.0], [34.6, 280.0], [34.7, 280.0], [34.8, 282.0], [34.9, 282.0], [35.0, 282.0], [35.1, 282.0], [35.2, 286.0], [35.3, 286.0], [35.4, 286.0], [35.5, 286.0], [35.6, 287.0], [35.7, 287.0], [35.8, 287.0], [35.9, 287.0], [36.0, 288.0], [36.1, 288.0], [36.2, 288.0], [36.3, 288.0], [36.4, 296.0], [36.5, 296.0], [36.6, 296.0], [36.7, 296.0], [36.8, 300.0], [36.9, 300.0], [37.0, 300.0], [37.1, 300.0], [37.2, 300.0], [37.3, 300.0], [37.4, 300.0], [37.5, 300.0], [37.6, 300.0], [37.7, 300.0], [37.8, 300.0], [37.9, 300.0], [38.0, 302.0], [38.1, 302.0], [38.2, 302.0], [38.3, 302.0], [38.4, 311.0], [38.5, 311.0], [38.6, 311.0], [38.7, 311.0], [38.8, 311.0], [38.9, 311.0], [39.0, 311.0], [39.1, 311.0], [39.2, 317.0], [39.3, 317.0], [39.4, 317.0], [39.5, 317.0], [39.6, 318.0], [39.7, 318.0], [39.8, 318.0], [39.9, 318.0], [40.0, 327.0], [40.1, 327.0], [40.2, 327.0], [40.3, 327.0], [40.4, 328.0], [40.5, 328.0], [40.6, 328.0], [40.7, 328.0], [40.8, 331.0], [40.9, 331.0], [41.0, 331.0], [41.1, 331.0], [41.2, 337.0], [41.3, 337.0], [41.4, 337.0], [41.5, 337.0], [41.6, 339.0], [41.7, 339.0], [41.8, 339.0], [41.9, 339.0], [42.0, 340.0], [42.1, 340.0], [42.2, 340.0], [42.3, 340.0], [42.4, 340.0], [42.5, 340.0], [42.6, 340.0], [42.7, 340.0], [42.8, 347.0], [42.9, 347.0], [43.0, 347.0], [43.1, 347.0], [43.2, 354.0], [43.3, 354.0], [43.4, 354.0], [43.5, 354.0], [43.6, 366.0], [43.7, 366.0], [43.8, 366.0], [43.9, 366.0], [44.0, 395.0], [44.1, 395.0], [44.2, 395.0], [44.3, 395.0], [44.4, 401.0], [44.5, 401.0], [44.6, 401.0], [44.7, 401.0], [44.8, 405.0], [44.9, 405.0], [45.0, 405.0], [45.1, 405.0], [45.2, 422.0], [45.3, 422.0], [45.4, 422.0], [45.5, 422.0], [45.6, 432.0], [45.7, 432.0], [45.8, 432.0], [45.9, 432.0], [46.0, 434.0], [46.1, 434.0], [46.2, 434.0], [46.3, 434.0], [46.4, 438.0], [46.5, 438.0], [46.6, 438.0], [46.7, 438.0], [46.8, 444.0], [46.9, 444.0], [47.0, 444.0], [47.1, 444.0], [47.2, 454.0], [47.3, 454.0], [47.4, 454.0], [47.5, 454.0], [47.6, 466.0], [47.7, 466.0], [47.8, 466.0], [47.9, 466.0], [48.0, 468.0], [48.1, 468.0], [48.2, 468.0], [48.3, 468.0], [48.4, 485.0], [48.5, 485.0], [48.6, 485.0], [48.7, 485.0], [48.8, 492.0], [48.9, 492.0], [49.0, 492.0], [49.1, 492.0], [49.2, 503.0], [49.3, 503.0], [49.4, 503.0], [49.5, 503.0], [49.6, 529.0], [49.7, 529.0], [49.8, 529.0], [49.9, 529.0], [50.0, 532.0], [50.1, 532.0], [50.2, 532.0], [50.3, 532.0], [50.4, 535.0], [50.5, 535.0], [50.6, 535.0], [50.7, 535.0], [50.8, 544.0], [50.9, 544.0], [51.0, 544.0], [51.1, 544.0], [51.2, 550.0], [51.3, 550.0], [51.4, 550.0], [51.5, 550.0], [51.6, 560.0], [51.7, 560.0], [51.8, 560.0], [51.9, 560.0], [52.0, 574.0], [52.1, 574.0], [52.2, 574.0], [52.3, 574.0], [52.4, 592.0], [52.5, 592.0], [52.6, 592.0], [52.7, 592.0], [52.8, 598.0], [52.9, 598.0], [53.0, 598.0], [53.1, 598.0], [53.2, 599.0], [53.3, 599.0], [53.4, 599.0], [53.5, 599.0], [53.6, 603.0], [53.7, 603.0], [53.8, 603.0], [53.9, 603.0], [54.0, 604.0], [54.1, 604.0], [54.2, 604.0], [54.3, 604.0], [54.4, 613.0], [54.5, 613.0], [54.6, 613.0], [54.7, 613.0], [54.8, 624.0], [54.9, 624.0], [55.0, 624.0], [55.1, 624.0], [55.2, 627.0], [55.3, 627.0], [55.4, 627.0], [55.5, 627.0], [55.6, 635.0], [55.7, 635.0], [55.8, 635.0], [55.9, 635.0], [56.0, 655.0], [56.1, 655.0], [56.2, 655.0], [56.3, 655.0], [56.4, 672.0], [56.5, 672.0], [56.6, 672.0], [56.7, 672.0], [56.8, 676.0], [56.9, 676.0], [57.0, 676.0], [57.1, 676.0], [57.2, 687.0], [57.3, 687.0], [57.4, 687.0], [57.5, 687.0], [57.6, 708.0], [57.7, 708.0], [57.8, 708.0], [57.9, 708.0], [58.0, 723.0], [58.1, 723.0], [58.2, 723.0], [58.3, 723.0], [58.4, 734.0], [58.5, 734.0], [58.6, 734.0], [58.7, 734.0], [58.8, 734.0], [58.9, 734.0], [59.0, 734.0], [59.1, 734.0], [59.2, 746.0], [59.3, 746.0], [59.4, 746.0], [59.5, 746.0], [59.6, 766.0], [59.7, 766.0], [59.8, 766.0], [59.9, 766.0], [60.0, 770.0], [60.1, 770.0], [60.2, 770.0], [60.3, 770.0], [60.4, 772.0], [60.5, 772.0], [60.6, 772.0], [60.7, 772.0], [60.8, 774.0], [60.9, 774.0], [61.0, 774.0], [61.1, 774.0], [61.2, 797.0], [61.3, 797.0], [61.4, 797.0], [61.5, 797.0], [61.6, 803.0], [61.7, 803.0], [61.8, 803.0], [61.9, 803.0], [62.0, 810.0], [62.1, 810.0], [62.2, 810.0], [62.3, 810.0], [62.4, 816.0], [62.5, 816.0], [62.6, 816.0], [62.7, 816.0], [62.8, 821.0], [62.9, 821.0], [63.0, 821.0], [63.1, 821.0], [63.2, 840.0], [63.3, 840.0], [63.4, 840.0], [63.5, 840.0], [63.6, 847.0], [63.7, 847.0], [63.8, 847.0], [63.9, 847.0], [64.0, 858.0], [64.1, 858.0], [64.2, 858.0], [64.3, 858.0], [64.4, 858.0], [64.5, 858.0], [64.6, 858.0], [64.7, 858.0], [64.8, 860.0], [64.9, 860.0], [65.0, 860.0], [65.1, 860.0], [65.2, 873.0], [65.3, 873.0], [65.4, 873.0], [65.5, 873.0], [65.6, 874.0], [65.7, 874.0], [65.8, 874.0], [65.9, 874.0], [66.0, 896.0], [66.1, 896.0], [66.2, 896.0], [66.3, 896.0], [66.4, 896.0], [66.5, 896.0], [66.6, 896.0], [66.7, 896.0], [66.8, 902.0], [66.9, 902.0], [67.0, 902.0], [67.1, 902.0], [67.2, 906.0], [67.3, 906.0], [67.4, 906.0], [67.5, 906.0], [67.6, 925.0], [67.7, 925.0], [67.8, 925.0], [67.9, 925.0], [68.0, 931.0], [68.1, 931.0], [68.2, 931.0], [68.3, 931.0], [68.4, 940.0], [68.5, 940.0], [68.6, 940.0], [68.7, 940.0], [68.8, 943.0], [68.9, 943.0], [69.0, 943.0], [69.1, 943.0], [69.2, 944.0], [69.3, 944.0], [69.4, 944.0], [69.5, 944.0], [69.6, 969.0], [69.7, 969.0], [69.8, 969.0], [69.9, 969.0], [70.0, 976.0], [70.1, 976.0], [70.2, 976.0], [70.3, 976.0], [70.4, 977.0], [70.5, 977.0], [70.6, 977.0], [70.7, 977.0], [70.8, 984.0], [70.9, 984.0], [71.0, 984.0], [71.1, 984.0], [71.2, 989.0], [71.3, 989.0], [71.4, 989.0], [71.5, 989.0], [71.6, 1001.0], [71.7, 1001.0], [71.8, 1001.0], [71.9, 1001.0], [72.0, 1005.0], [72.1, 1005.0], [72.2, 1005.0], [72.3, 1005.0], [72.4, 1009.0], [72.5, 1009.0], [72.6, 1009.0], [72.7, 1009.0], [72.8, 1012.0], [72.9, 1012.0], [73.0, 1012.0], [73.1, 1012.0], [73.2, 1013.0], [73.3, 1013.0], [73.4, 1013.0], [73.5, 1013.0], [73.6, 1015.0], [73.7, 1015.0], [73.8, 1015.0], [73.9, 1015.0], [74.0, 1017.0], [74.1, 1017.0], [74.2, 1017.0], [74.3, 1017.0], [74.4, 1026.0], [74.5, 1026.0], [74.6, 1026.0], [74.7, 1026.0], [74.8, 1031.0], [74.9, 1031.0], [75.0, 1031.0], [75.1, 1031.0], [75.2, 1043.0], [75.3, 1043.0], [75.4, 1043.0], [75.5, 1043.0], [75.6, 1043.0], [75.7, 1045.0], [75.8, 1045.0], [75.9, 1045.0], [76.0, 1045.0], [76.1, 1069.0], [76.2, 1069.0], [76.3, 1069.0], [76.4, 1069.0], [76.5, 1076.0], [76.6, 1076.0], [76.7, 1076.0], [76.8, 1076.0], [76.9, 1093.0], [77.0, 1093.0], [77.1, 1093.0], [77.2, 1093.0], [77.3, 1096.0], [77.4, 1096.0], [77.5, 1096.0], [77.6, 1096.0], [77.7, 1101.0], [77.8, 1101.0], [77.9, 1101.0], [78.0, 1101.0], [78.1, 1104.0], [78.2, 1104.0], [78.3, 1104.0], [78.4, 1104.0], [78.5, 1105.0], [78.6, 1105.0], [78.7, 1105.0], [78.8, 1105.0], [78.9, 1124.0], [79.0, 1124.0], [79.1, 1124.0], [79.2, 1124.0], [79.3, 1126.0], [79.4, 1126.0], [79.5, 1126.0], [79.6, 1126.0], [79.7, 1129.0], [79.8, 1129.0], [79.9, 1129.0], [80.0, 1129.0], [80.1, 1135.0], [80.2, 1135.0], [80.3, 1135.0], [80.4, 1135.0], [80.5, 1146.0], [80.6, 1146.0], [80.7, 1146.0], [80.8, 1146.0], [80.9, 1163.0], [81.0, 1163.0], [81.1, 1163.0], [81.2, 1163.0], [81.3, 1176.0], [81.4, 1176.0], [81.5, 1176.0], [81.6, 1176.0], [81.7, 1220.0], [81.8, 1220.0], [81.9, 1220.0], [82.0, 1220.0], [82.1, 1223.0], [82.2, 1223.0], [82.3, 1223.0], [82.4, 1223.0], [82.5, 1248.0], [82.6, 1248.0], [82.7, 1248.0], [82.8, 1248.0], [82.9, 1269.0], [83.0, 1269.0], [83.1, 1269.0], [83.2, 1269.0], [83.3, 1285.0], [83.4, 1285.0], [83.5, 1285.0], [83.6, 1285.0], [83.7, 1301.0], [83.8, 1301.0], [83.9, 1301.0], [84.0, 1301.0], [84.1, 1322.0], [84.2, 1322.0], [84.3, 1322.0], [84.4, 1322.0], [84.5, 1332.0], [84.6, 1332.0], [84.7, 1332.0], [84.8, 1332.0], [84.9, 1363.0], [85.0, 1363.0], [85.1, 1363.0], [85.2, 1363.0], [85.3, 1383.0], [85.4, 1383.0], [85.5, 1383.0], [85.6, 1383.0], [85.7, 1402.0], [85.8, 1402.0], [85.9, 1402.0], [86.0, 1402.0], [86.1, 1469.0], [86.2, 1469.0], [86.3, 1469.0], [86.4, 1469.0], [86.5, 1506.0], [86.6, 1506.0], [86.7, 1506.0], [86.8, 1506.0], [86.9, 1513.0], [87.0, 1513.0], [87.1, 1513.0], [87.2, 1513.0], [87.3, 1528.0], [87.4, 1528.0], [87.5, 1528.0], [87.6, 1528.0], [87.7, 1539.0], [87.8, 1539.0], [87.9, 1539.0], [88.0, 1539.0], [88.1, 1563.0], [88.2, 1563.0], [88.3, 1563.0], [88.4, 1563.0], [88.5, 1568.0], [88.6, 1568.0], [88.7, 1568.0], [88.8, 1568.0], [88.9, 1575.0], [89.0, 1575.0], [89.1, 1575.0], [89.2, 1575.0], [89.3, 1593.0], [89.4, 1593.0], [89.5, 1593.0], [89.6, 1593.0], [89.7, 1657.0], [89.8, 1657.0], [89.9, 1657.0], [90.0, 1657.0], [90.1, 1666.0], [90.2, 1666.0], [90.3, 1666.0], [90.4, 1666.0], [90.5, 1697.0], [90.6, 1697.0], [90.7, 1697.0], [90.8, 1697.0], [90.9, 1716.0], [91.0, 1716.0], [91.1, 1716.0], [91.2, 1716.0], [91.3, 1726.0], [91.4, 1726.0], [91.5, 1726.0], [91.6, 1726.0], [91.7, 1747.0], [91.8, 1747.0], [91.9, 1747.0], [92.0, 1747.0], [92.1, 1801.0], [92.2, 1801.0], [92.3, 1801.0], [92.4, 1801.0], [92.5, 1811.0], [92.6, 1811.0], [92.7, 1811.0], [92.8, 1811.0], [92.9, 1829.0], [93.0, 1829.0], [93.1, 1829.0], [93.2, 1829.0], [93.3, 1837.0], [93.4, 1837.0], [93.5, 1837.0], [93.6, 1837.0], [93.7, 1840.0], [93.8, 1840.0], [93.9, 1840.0], [94.0, 1840.0], [94.1, 1921.0], [94.2, 1921.0], [94.3, 1921.0], [94.4, 1921.0], [94.5, 1923.0], [94.6, 1923.0], [94.7, 1923.0], [94.8, 1923.0], [94.9, 1925.0], [95.0, 1925.0], [95.1, 1925.0], [95.2, 1925.0], [95.3, 2027.0], [95.4, 2027.0], [95.5, 2027.0], [95.6, 2027.0], [95.7, 2047.0], [95.8, 2047.0], [95.9, 2047.0], [96.0, 2047.0], [96.1, 2287.0], [96.2, 2287.0], [96.3, 2287.0], [96.4, 2287.0], [96.5, 2289.0], [96.6, 2289.0], [96.7, 2289.0], [96.8, 2289.0], [96.9, 2395.0], [97.0, 2395.0], [97.1, 2395.0], [97.2, 2395.0], [97.3, 2439.0], [97.4, 2439.0], [97.5, 2439.0], [97.6, 2439.0], [97.7, 2547.0], [97.8, 2547.0], [97.9, 2547.0], [98.0, 2547.0], [98.1, 2621.0], [98.2, 2621.0], [98.3, 2621.0], [98.4, 2621.0], [98.5, 2706.0], [98.6, 2706.0], [98.7, 2706.0], [98.8, 2706.0], [98.9, 2706.0], [99.0, 2706.0], [99.1, 2706.0], [99.2, 2706.0], [99.3, 3321.0], [99.4, 3321.0], [99.5, 3321.0], [99.6, 3321.0], [99.7, 3427.0], [99.8, 3427.0], [99.9, 3427.0], [100.0, 3427.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 133.0], [0.1, 133.0], [0.2, 133.0], [0.3, 133.0], [0.4, 141.0], [0.5, 141.0], [0.6, 141.0], [0.7, 141.0], [0.8, 142.0], [0.9, 142.0], [1.0, 142.0], [1.1, 142.0], [1.2, 142.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 147.0], [3.0, 147.0], [3.1, 147.0], [3.2, 148.0], [3.3, 148.0], [3.4, 148.0], [3.5, 148.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 150.0], [4.0, 150.0], [4.1, 150.0], [4.2, 150.0], [4.3, 150.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 153.0], [5.0, 153.0], [5.1, 153.0], [5.2, 153.0], [5.3, 153.0], [5.4, 153.0], [5.5, 153.0], [5.6, 153.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 155.0], [6.2, 155.0], [6.3, 155.0], [6.4, 155.0], [6.5, 156.0], [6.6, 156.0], [6.7, 156.0], [6.8, 156.0], [6.9, 156.0], [7.0, 156.0], [7.1, 156.0], [7.2, 156.0], [7.3, 158.0], [7.4, 158.0], [7.5, 158.0], [7.6, 158.0], [7.7, 159.0], [7.8, 159.0], [7.9, 159.0], [8.0, 159.0], [8.1, 160.0], [8.2, 160.0], [8.3, 160.0], [8.4, 160.0], [8.5, 160.0], [8.6, 160.0], [8.7, 160.0], [8.8, 160.0], [8.9, 162.0], [9.0, 162.0], [9.1, 162.0], [9.2, 162.0], [9.3, 162.0], [9.4, 162.0], [9.5, 162.0], [9.6, 162.0], [9.7, 164.0], [9.8, 164.0], [9.9, 164.0], [10.0, 164.0], [10.1, 164.0], [10.2, 164.0], [10.3, 164.0], [10.4, 164.0], [10.5, 164.0], [10.6, 164.0], [10.7, 164.0], [10.8, 164.0], [10.9, 164.0], [11.0, 164.0], [11.1, 164.0], [11.2, 164.0], [11.3, 166.0], [11.4, 166.0], [11.5, 166.0], [11.6, 166.0], [11.7, 166.0], [11.8, 166.0], [11.9, 166.0], [12.0, 166.0], [12.1, 167.0], [12.2, 167.0], [12.3, 167.0], [12.4, 167.0], [12.5, 169.0], [12.6, 169.0], [12.7, 169.0], [12.8, 169.0], [12.9, 171.0], [13.0, 171.0], [13.1, 171.0], [13.2, 171.0], [13.3, 172.0], [13.4, 172.0], [13.5, 172.0], [13.6, 172.0], [13.7, 172.0], [13.8, 172.0], [13.9, 172.0], [14.0, 172.0], [14.1, 173.0], [14.2, 173.0], [14.3, 173.0], [14.4, 173.0], [14.5, 173.0], [14.6, 173.0], [14.7, 173.0], [14.8, 173.0], [14.9, 175.0], [15.0, 175.0], [15.1, 175.0], [15.2, 175.0], [15.3, 178.0], [15.4, 178.0], [15.5, 178.0], [15.6, 178.0], [15.7, 181.0], [15.8, 181.0], [15.9, 181.0], [16.0, 181.0], [16.1, 183.0], [16.2, 183.0], [16.3, 183.0], [16.4, 183.0], [16.5, 183.0], [16.6, 183.0], [16.7, 183.0], [16.8, 183.0], [16.9, 185.0], [17.0, 185.0], [17.1, 185.0], [17.2, 185.0], [17.3, 187.0], [17.4, 187.0], [17.5, 187.0], [17.6, 187.0], [17.7, 187.0], [17.8, 187.0], [17.9, 187.0], [18.0, 187.0], [18.1, 188.0], [18.2, 188.0], [18.3, 188.0], [18.4, 188.0], [18.5, 189.0], [18.6, 189.0], [18.7, 189.0], [18.8, 189.0], [18.9, 190.0], [19.0, 190.0], [19.1, 190.0], [19.2, 190.0], [19.3, 190.0], [19.4, 190.0], [19.5, 190.0], [19.6, 190.0], [19.7, 190.0], [19.8, 190.0], [19.9, 190.0], [20.0, 190.0], [20.1, 192.0], [20.2, 192.0], [20.3, 192.0], [20.4, 192.0], [20.5, 192.0], [20.6, 192.0], [20.7, 192.0], [20.8, 192.0], [20.9, 193.0], [21.0, 193.0], [21.1, 193.0], [21.2, 193.0], [21.3, 194.0], [21.4, 194.0], [21.5, 194.0], [21.6, 195.0], [21.7, 195.0], [21.8, 195.0], [21.9, 195.0], [22.0, 195.0], [22.1, 195.0], [22.2, 195.0], [22.3, 195.0], [22.4, 195.0], [22.5, 196.0], [22.6, 196.0], [22.7, 196.0], [22.8, 197.0], [22.9, 197.0], [23.0, 197.0], [23.1, 197.0], [23.2, 199.0], [23.3, 199.0], [23.4, 199.0], [23.5, 199.0], [23.6, 201.0], [23.7, 201.0], [23.8, 201.0], [23.9, 201.0], [24.0, 205.0], [24.1, 205.0], [24.2, 205.0], [24.3, 205.0], [24.4, 208.0], [24.5, 208.0], [24.6, 208.0], [24.7, 208.0], [24.8, 208.0], [24.9, 208.0], [25.0, 208.0], [25.1, 208.0], [25.2, 208.0], [25.3, 208.0], [25.4, 208.0], [25.5, 208.0], [25.6, 209.0], [25.7, 209.0], [25.8, 209.0], [25.9, 209.0], [26.0, 211.0], [26.1, 211.0], [26.2, 211.0], [26.3, 211.0], [26.4, 211.0], [26.5, 211.0], [26.6, 211.0], [26.7, 211.0], [26.8, 211.0], [26.9, 211.0], [27.0, 211.0], [27.1, 211.0], [27.2, 213.0], [27.3, 213.0], [27.4, 213.0], [27.5, 213.0], [27.6, 213.0], [27.7, 213.0], [27.8, 213.0], [27.9, 213.0], [28.0, 216.0], [28.1, 216.0], [28.2, 216.0], [28.3, 216.0], [28.4, 218.0], [28.5, 218.0], [28.6, 218.0], [28.7, 218.0], [28.8, 218.0], [28.9, 218.0], [29.0, 218.0], [29.1, 218.0], [29.2, 218.0], [29.3, 218.0], [29.4, 218.0], [29.5, 218.0], [29.6, 219.0], [29.7, 219.0], [29.8, 219.0], [29.9, 219.0], [30.0, 224.0], [30.1, 224.0], [30.2, 224.0], [30.3, 224.0], [30.4, 224.0], [30.5, 224.0], [30.6, 224.0], [30.7, 224.0], [30.8, 225.0], [30.9, 225.0], [31.0, 225.0], [31.1, 225.0], [31.2, 226.0], [31.3, 226.0], [31.4, 226.0], [31.5, 226.0], [31.6, 229.0], [31.7, 229.0], [31.8, 229.0], [31.9, 229.0], [32.0, 231.0], [32.1, 231.0], [32.2, 231.0], [32.3, 231.0], [32.4, 232.0], [32.5, 232.0], [32.6, 232.0], [32.7, 232.0], [32.8, 236.0], [32.9, 236.0], [33.0, 236.0], [33.1, 236.0], [33.2, 236.0], [33.3, 236.0], [33.4, 236.0], [33.5, 236.0], [33.6, 240.0], [33.7, 240.0], [33.8, 240.0], [33.9, 240.0], [34.0, 242.0], [34.1, 242.0], [34.2, 242.0], [34.3, 242.0], [34.4, 243.0], [34.5, 243.0], [34.6, 243.0], [34.7, 243.0], [34.8, 244.0], [34.9, 244.0], [35.0, 244.0], [35.1, 244.0], [35.2, 249.0], [35.3, 249.0], [35.4, 249.0], [35.5, 249.0], [35.6, 250.0], [35.7, 250.0], [35.8, 250.0], [35.9, 250.0], [36.0, 253.0], [36.1, 253.0], [36.2, 253.0], [36.3, 253.0], [36.4, 253.0], [36.5, 253.0], [36.6, 253.0], [36.7, 253.0], [36.8, 254.0], [36.9, 254.0], [37.0, 254.0], [37.1, 254.0], [37.2, 254.0], [37.3, 254.0], [37.4, 254.0], [37.5, 254.0], [37.6, 257.0], [37.7, 257.0], [37.8, 257.0], [37.9, 257.0], [38.0, 257.0], [38.1, 257.0], [38.2, 257.0], [38.3, 257.0], [38.4, 259.0], [38.5, 259.0], [38.6, 259.0], [38.7, 259.0], [38.8, 265.0], [38.9, 265.0], [39.0, 265.0], [39.1, 265.0], [39.2, 270.0], [39.3, 270.0], [39.4, 270.0], [39.5, 270.0], [39.6, 274.0], [39.7, 274.0], [39.8, 274.0], [39.9, 274.0], [40.0, 276.0], [40.1, 276.0], [40.2, 276.0], [40.3, 276.0], [40.4, 286.0], [40.5, 286.0], [40.6, 286.0], [40.7, 286.0], [40.8, 289.0], [40.9, 289.0], [41.0, 289.0], [41.1, 289.0], [41.2, 298.0], [41.3, 298.0], [41.4, 298.0], [41.5, 298.0], [41.6, 301.0], [41.7, 301.0], [41.8, 301.0], [41.9, 301.0], [42.0, 305.0], [42.1, 305.0], [42.2, 305.0], [42.3, 305.0], [42.4, 307.0], [42.5, 307.0], [42.6, 307.0], [42.7, 307.0], [42.8, 308.0], [42.9, 308.0], [43.0, 308.0], [43.1, 308.0], [43.2, 310.0], [43.3, 310.0], [43.4, 310.0], [43.5, 310.0], [43.6, 311.0], [43.7, 311.0], [43.8, 311.0], [43.9, 311.0], [44.0, 314.0], [44.1, 314.0], [44.2, 314.0], [44.3, 314.0], [44.4, 315.0], [44.5, 315.0], [44.6, 315.0], [44.7, 315.0], [44.8, 320.0], [44.9, 320.0], [45.0, 320.0], [45.1, 320.0], [45.2, 327.0], [45.3, 327.0], [45.4, 327.0], [45.5, 327.0], [45.6, 332.0], [45.7, 332.0], [45.8, 332.0], [45.9, 332.0], [46.0, 334.0], [46.1, 334.0], [46.2, 334.0], [46.3, 334.0], [46.4, 334.0], [46.5, 334.0], [46.6, 334.0], [46.7, 334.0], [46.8, 335.0], [46.9, 335.0], [47.0, 335.0], [47.1, 335.0], [47.2, 351.0], [47.3, 351.0], [47.4, 351.0], [47.5, 351.0], [47.6, 353.0], [47.7, 353.0], [47.8, 353.0], [47.9, 353.0], [48.0, 356.0], [48.1, 356.0], [48.2, 356.0], [48.3, 356.0], [48.4, 359.0], [48.5, 359.0], [48.6, 359.0], [48.7, 359.0], [48.8, 365.0], [48.9, 365.0], [49.0, 365.0], [49.1, 365.0], [49.2, 368.0], [49.3, 368.0], [49.4, 368.0], [49.5, 368.0], [49.6, 372.0], [49.7, 372.0], [49.8, 372.0], [49.9, 372.0], [50.0, 377.0], [50.1, 377.0], [50.2, 377.0], [50.3, 377.0], [50.4, 378.0], [50.5, 378.0], [50.6, 378.0], [50.7, 378.0], [50.8, 379.0], [50.9, 379.0], [51.0, 379.0], [51.1, 379.0], [51.2, 387.0], [51.3, 387.0], [51.4, 387.0], [51.5, 387.0], [51.6, 407.0], [51.7, 407.0], [51.8, 407.0], [51.9, 407.0], [52.0, 420.0], [52.1, 420.0], [52.2, 420.0], [52.3, 420.0], [52.4, 448.0], [52.5, 448.0], [52.6, 448.0], [52.7, 448.0], [52.8, 459.0], [52.9, 459.0], [53.0, 459.0], [53.1, 459.0], [53.2, 476.0], [53.3, 476.0], [53.4, 476.0], [53.5, 476.0], [53.6, 481.0], [53.7, 481.0], [53.8, 481.0], [53.9, 481.0], [54.0, 485.0], [54.1, 485.0], [54.2, 485.0], [54.3, 485.0], [54.4, 489.0], [54.5, 489.0], [54.6, 489.0], [54.7, 489.0], [54.8, 500.0], [54.9, 500.0], [55.0, 500.0], [55.1, 500.0], [55.2, 501.0], [55.3, 501.0], [55.4, 501.0], [55.5, 501.0], [55.6, 501.0], [55.7, 501.0], [55.8, 501.0], [55.9, 501.0], [56.0, 502.0], [56.1, 502.0], [56.2, 502.0], [56.3, 502.0], [56.4, 505.0], [56.5, 505.0], [56.6, 505.0], [56.7, 505.0], [56.8, 506.0], [56.9, 506.0], [57.0, 506.0], [57.1, 506.0], [57.2, 513.0], [57.3, 513.0], [57.4, 513.0], [57.5, 513.0], [57.6, 527.0], [57.7, 527.0], [57.8, 527.0], [57.9, 527.0], [58.0, 532.0], [58.1, 532.0], [58.2, 532.0], [58.3, 532.0], [58.4, 534.0], [58.5, 534.0], [58.6, 534.0], [58.7, 534.0], [58.8, 535.0], [58.9, 535.0], [59.0, 535.0], [59.1, 535.0], [59.2, 536.0], [59.3, 536.0], [59.4, 536.0], [59.5, 536.0], [59.6, 536.0], [59.7, 536.0], [59.8, 536.0], [59.9, 536.0], [60.0, 555.0], [60.1, 555.0], [60.2, 555.0], [60.3, 555.0], [60.4, 559.0], [60.5, 559.0], [60.6, 559.0], [60.7, 559.0], [60.8, 562.0], [60.9, 562.0], [61.0, 562.0], [61.1, 562.0], [61.2, 574.0], [61.3, 574.0], [61.4, 574.0], [61.5, 574.0], [61.6, 584.0], [61.7, 584.0], [61.8, 584.0], [61.9, 584.0], [62.0, 601.0], [62.1, 601.0], [62.2, 601.0], [62.3, 601.0], [62.4, 607.0], [62.5, 607.0], [62.6, 607.0], [62.7, 607.0], [62.8, 608.0], [62.9, 608.0], [63.0, 608.0], [63.1, 608.0], [63.2, 632.0], [63.3, 632.0], [63.4, 632.0], [63.5, 632.0], [63.6, 637.0], [63.7, 637.0], [63.8, 637.0], [63.9, 637.0], [64.0, 642.0], [64.1, 642.0], [64.2, 642.0], [64.3, 642.0], [64.4, 657.0], [64.5, 657.0], [64.6, 657.0], [64.7, 657.0], [64.8, 658.0], [64.9, 658.0], [65.0, 658.0], [65.1, 658.0], [65.2, 668.0], [65.3, 668.0], [65.4, 668.0], [65.5, 668.0], [65.6, 673.0], [65.7, 673.0], [65.8, 673.0], [65.9, 673.0], [66.0, 679.0], [66.1, 679.0], [66.2, 679.0], [66.3, 679.0], [66.4, 683.0], [66.5, 683.0], [66.6, 683.0], [66.7, 683.0], [66.8, 696.0], [66.9, 696.0], [67.0, 696.0], [67.1, 696.0], [67.2, 717.0], [67.3, 717.0], [67.4, 717.0], [67.5, 717.0], [67.6, 720.0], [67.7, 720.0], [67.8, 720.0], [67.9, 720.0], [68.0, 721.0], [68.1, 721.0], [68.2, 721.0], [68.3, 721.0], [68.4, 730.0], [68.5, 730.0], [68.6, 730.0], [68.7, 730.0], [68.8, 732.0], [68.9, 732.0], [69.0, 732.0], [69.1, 732.0], [69.2, 740.0], [69.3, 740.0], [69.4, 740.0], [69.5, 740.0], [69.6, 750.0], [69.7, 750.0], [69.8, 750.0], [69.9, 750.0], [70.0, 766.0], [70.1, 766.0], [70.2, 766.0], [70.3, 766.0], [70.4, 775.0], [70.5, 775.0], [70.6, 775.0], [70.7, 775.0], [70.8, 778.0], [70.9, 778.0], [71.0, 778.0], [71.1, 778.0], [71.2, 780.0], [71.3, 780.0], [71.4, 780.0], [71.5, 780.0], [71.6, 781.0], [71.7, 781.0], [71.8, 781.0], [71.9, 781.0], [72.0, 790.0], [72.1, 790.0], [72.2, 790.0], [72.3, 790.0], [72.4, 790.0], [72.5, 790.0], [72.6, 790.0], [72.7, 790.0], [72.8, 802.0], [72.9, 802.0], [73.0, 802.0], [73.1, 802.0], [73.2, 808.0], [73.3, 808.0], [73.4, 808.0], [73.5, 808.0], [73.6, 830.0], [73.7, 830.0], [73.8, 830.0], [73.9, 830.0], [74.0, 836.0], [74.1, 836.0], [74.2, 836.0], [74.3, 836.0], [74.4, 855.0], [74.5, 855.0], [74.6, 855.0], [74.7, 855.0], [74.8, 855.0], [74.9, 858.0], [75.0, 858.0], [75.1, 858.0], [75.2, 858.0], [75.3, 861.0], [75.4, 861.0], [75.5, 861.0], [75.6, 861.0], [75.7, 870.0], [75.8, 870.0], [75.9, 870.0], [76.0, 870.0], [76.1, 872.0], [76.2, 872.0], [76.3, 872.0], [76.4, 872.0], [76.5, 886.0], [76.6, 886.0], [76.7, 886.0], [76.8, 886.0], [76.9, 904.0], [77.0, 904.0], [77.1, 904.0], [77.2, 904.0], [77.3, 906.0], [77.4, 906.0], [77.5, 906.0], [77.6, 906.0], [77.7, 909.0], [77.8, 909.0], [77.9, 909.0], [78.0, 909.0], [78.1, 916.0], [78.2, 916.0], [78.3, 916.0], [78.4, 916.0], [78.5, 927.0], [78.6, 927.0], [78.7, 927.0], [78.8, 927.0], [78.9, 948.0], [79.0, 948.0], [79.1, 948.0], [79.2, 948.0], [79.3, 980.0], [79.4, 980.0], [79.5, 980.0], [79.6, 980.0], [79.7, 1004.0], [79.8, 1004.0], [79.9, 1004.0], [80.0, 1004.0], [80.1, 1004.0], [80.2, 1004.0], [80.3, 1004.0], [80.4, 1004.0], [80.5, 1011.0], [80.6, 1011.0], [80.7, 1011.0], [80.8, 1011.0], [80.9, 1028.0], [81.0, 1028.0], [81.1, 1028.0], [81.2, 1028.0], [81.3, 1037.0], [81.4, 1037.0], [81.5, 1037.0], [81.6, 1037.0], [81.7, 1039.0], [81.8, 1039.0], [81.9, 1039.0], [82.0, 1039.0], [82.1, 1040.0], [82.2, 1040.0], [82.3, 1040.0], [82.4, 1040.0], [82.5, 1049.0], [82.6, 1049.0], [82.7, 1049.0], [82.8, 1049.0], [82.9, 1076.0], [83.0, 1076.0], [83.1, 1076.0], [83.2, 1076.0], [83.3, 1085.0], [83.4, 1085.0], [83.5, 1085.0], [83.6, 1085.0], [83.7, 1088.0], [83.8, 1088.0], [83.9, 1088.0], [84.0, 1088.0], [84.1, 1110.0], [84.2, 1110.0], [84.3, 1110.0], [84.4, 1110.0], [84.5, 1112.0], [84.6, 1112.0], [84.7, 1112.0], [84.8, 1112.0], [84.9, 1120.0], [85.0, 1120.0], [85.1, 1120.0], [85.2, 1120.0], [85.3, 1123.0], [85.4, 1123.0], [85.5, 1123.0], [85.6, 1123.0], [85.7, 1136.0], [85.8, 1136.0], [85.9, 1136.0], [86.0, 1136.0], [86.1, 1138.0], [86.2, 1138.0], [86.3, 1138.0], [86.4, 1138.0], [86.5, 1145.0], [86.6, 1145.0], [86.7, 1145.0], [86.8, 1145.0], [86.9, 1157.0], [87.0, 1157.0], [87.1, 1157.0], [87.2, 1157.0], [87.3, 1175.0], [87.4, 1175.0], [87.5, 1175.0], [87.6, 1175.0], [87.7, 1182.0], [87.8, 1182.0], [87.9, 1182.0], [88.0, 1182.0], [88.1, 1188.0], [88.2, 1188.0], [88.3, 1188.0], [88.4, 1188.0], [88.5, 1191.0], [88.6, 1191.0], [88.7, 1191.0], [88.8, 1191.0], [88.9, 1221.0], [89.0, 1221.0], [89.1, 1221.0], [89.2, 1221.0], [89.3, 1261.0], [89.4, 1261.0], [89.5, 1261.0], [89.6, 1261.0], [89.7, 1261.0], [89.8, 1261.0], [89.9, 1261.0], [90.0, 1261.0], [90.1, 1273.0], [90.2, 1273.0], [90.3, 1273.0], [90.4, 1273.0], [90.5, 1275.0], [90.6, 1275.0], [90.7, 1275.0], [90.8, 1275.0], [90.9, 1302.0], [91.0, 1302.0], [91.1, 1302.0], [91.2, 1302.0], [91.3, 1315.0], [91.4, 1315.0], [91.5, 1315.0], [91.6, 1315.0], [91.7, 1318.0], [91.8, 1318.0], [91.9, 1318.0], [92.0, 1318.0], [92.1, 1325.0], [92.2, 1325.0], [92.3, 1325.0], [92.4, 1325.0], [92.5, 1332.0], [92.6, 1332.0], [92.7, 1332.0], [92.8, 1332.0], [92.9, 1333.0], [93.0, 1333.0], [93.1, 1333.0], [93.2, 1333.0], [93.3, 1348.0], [93.4, 1348.0], [93.5, 1348.0], [93.6, 1348.0], [93.7, 1380.0], [93.8, 1380.0], [93.9, 1380.0], [94.0, 1380.0], [94.1, 1384.0], [94.2, 1384.0], [94.3, 1384.0], [94.4, 1384.0], [94.5, 1416.0], [94.6, 1416.0], [94.7, 1416.0], [94.8, 1416.0], [94.9, 1419.0], [95.0, 1419.0], [95.1, 1419.0], [95.2, 1419.0], [95.3, 1482.0], [95.4, 1482.0], [95.5, 1482.0], [95.6, 1482.0], [95.7, 1542.0], [95.8, 1542.0], [95.9, 1542.0], [96.0, 1542.0], [96.1, 1555.0], [96.2, 1555.0], [96.3, 1555.0], [96.4, 1555.0], [96.5, 1703.0], [96.6, 1703.0], [96.7, 1703.0], [96.8, 1703.0], [96.9, 1730.0], [97.0, 1730.0], [97.1, 1730.0], [97.2, 1730.0], [97.3, 1817.0], [97.4, 1817.0], [97.5, 1817.0], [97.6, 1817.0], [97.7, 2577.0], [97.8, 2577.0], [97.9, 2577.0], [98.0, 2577.0], [98.1, 2654.0], [98.2, 2654.0], [98.3, 2654.0], [98.4, 2654.0], [98.5, 2741.0], [98.6, 2741.0], [98.7, 2741.0], [98.8, 2741.0], [98.9, 2979.0], [99.0, 2979.0], [99.1, 2979.0], [99.2, 2979.0], [99.3, 3206.0], [99.4, 3206.0], [99.5, 3206.0], [99.6, 3206.0], [99.7, 3393.0], [99.8, 3393.0], [99.9, 3393.0], [100.0, 3393.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 134.0], [0.1, 134.0], [0.2, 134.0], [0.3, 134.0], [0.4, 137.0], [0.5, 137.0], [0.6, 137.0], [0.7, 137.0], [0.8, 140.0], [0.9, 140.0], [1.0, 140.0], [1.1, 140.0], [1.2, 140.0], [1.3, 141.0], [1.4, 141.0], [1.5, 141.0], [1.6, 143.0], [1.7, 143.0], [1.8, 143.0], [1.9, 143.0], [2.0, 143.0], [2.1, 143.0], [2.2, 143.0], [2.3, 143.0], [2.4, 143.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 145.0], [3.4, 145.0], [3.5, 145.0], [3.6, 145.0], [3.7, 146.0], [3.8, 146.0], [3.9, 146.0], [4.0, 146.0], [4.1, 147.0], [4.2, 147.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 148.0], [5.0, 148.0], [5.1, 148.0], [5.2, 148.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 151.0], [5.7, 152.0], [5.8, 152.0], [5.9, 152.0], [6.0, 152.0], [6.1, 152.0], [6.2, 152.0], [6.3, 152.0], [6.4, 152.0], [6.5, 152.0], [6.6, 152.0], [6.7, 152.0], [6.8, 152.0], [6.9, 153.0], [7.0, 153.0], [7.1, 153.0], [7.2, 153.0], [7.3, 153.0], [7.4, 153.0], [7.5, 153.0], [7.6, 153.0], [7.7, 153.0], [7.8, 153.0], [7.9, 153.0], [8.0, 153.0], [8.1, 153.0], [8.2, 153.0], [8.3, 153.0], [8.4, 153.0], [8.5, 153.0], [8.6, 153.0], [8.7, 153.0], [8.8, 153.0], [8.9, 153.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 154.0], [9.4, 154.0], [9.5, 154.0], [9.6, 154.0], [9.7, 154.0], [9.8, 154.0], [9.9, 154.0], [10.0, 154.0], [10.1, 155.0], [10.2, 155.0], [10.3, 155.0], [10.4, 155.0], [10.5, 156.0], [10.6, 156.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 156.0], [11.1, 156.0], [11.2, 156.0], [11.3, 157.0], [11.4, 157.0], [11.5, 157.0], [11.6, 157.0], [11.7, 158.0], [11.8, 158.0], [11.9, 158.0], [12.0, 158.0], [12.1, 158.0], [12.2, 158.0], [12.3, 158.0], [12.4, 158.0], [12.5, 159.0], [12.6, 159.0], [12.7, 159.0], [12.8, 159.0], [12.9, 159.0], [13.0, 159.0], [13.1, 159.0], [13.2, 159.0], [13.3, 159.0], [13.4, 159.0], [13.5, 159.0], [13.6, 159.0], [13.7, 161.0], [13.8, 161.0], [13.9, 161.0], [14.0, 161.0], [14.1, 161.0], [14.2, 161.0], [14.3, 161.0], [14.4, 161.0], [14.5, 162.0], [14.6, 162.0], [14.7, 162.0], [14.8, 162.0], [14.9, 162.0], [15.0, 162.0], [15.1, 162.0], [15.2, 162.0], [15.3, 164.0], [15.4, 164.0], [15.5, 164.0], [15.6, 164.0], [15.7, 164.0], [15.8, 164.0], [15.9, 164.0], [16.0, 164.0], [16.1, 167.0], [16.2, 167.0], [16.3, 167.0], [16.4, 167.0], [16.5, 167.0], [16.6, 167.0], [16.7, 167.0], [16.8, 167.0], [16.9, 168.0], [17.0, 168.0], [17.1, 168.0], [17.2, 168.0], [17.3, 168.0], [17.4, 168.0], [17.5, 168.0], [17.6, 168.0], [17.7, 169.0], [17.8, 169.0], [17.9, 169.0], [18.0, 169.0], [18.1, 172.0], [18.2, 172.0], [18.3, 172.0], [18.4, 172.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 174.0], [18.9, 174.0], [19.0, 174.0], [19.1, 174.0], [19.2, 175.0], [19.3, 175.0], [19.4, 175.0], [19.5, 175.0], [19.6, 175.0], [19.7, 175.0], [19.8, 175.0], [19.9, 175.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 177.0], [20.5, 177.0], [20.6, 177.0], [20.7, 177.0], [20.8, 180.0], [20.9, 180.0], [21.0, 180.0], [21.1, 180.0], [21.2, 181.0], [21.3, 181.0], [21.4, 181.0], [21.5, 181.0], [21.6, 183.0], [21.7, 183.0], [21.8, 183.0], [21.9, 183.0], [22.0, 185.0], [22.1, 185.0], [22.2, 185.0], [22.3, 185.0], [22.4, 185.0], [22.5, 185.0], [22.6, 185.0], [22.7, 185.0], [22.8, 185.0], [22.9, 185.0], [23.0, 185.0], [23.1, 185.0], [23.2, 186.0], [23.3, 186.0], [23.4, 186.0], [23.5, 186.0], [23.6, 188.0], [23.7, 188.0], [23.8, 188.0], [23.9, 188.0], [24.0, 190.0], [24.1, 190.0], [24.2, 190.0], [24.3, 190.0], [24.4, 192.0], [24.5, 192.0], [24.6, 192.0], [24.7, 192.0], [24.8, 195.0], [24.9, 195.0], [25.0, 195.0], [25.1, 195.0], [25.2, 195.0], [25.3, 195.0], [25.4, 195.0], [25.5, 195.0], [25.6, 196.0], [25.7, 196.0], [25.8, 196.0], [25.9, 196.0], [26.0, 196.0], [26.1, 196.0], [26.2, 196.0], [26.3, 196.0], [26.4, 196.0], [26.5, 196.0], [26.6, 196.0], [26.7, 196.0], [26.8, 198.0], [26.9, 198.0], [27.0, 198.0], [27.1, 198.0], [27.2, 199.0], [27.3, 199.0], [27.4, 199.0], [27.5, 199.0], [27.6, 201.0], [27.7, 201.0], [27.8, 201.0], [27.9, 201.0], [28.0, 203.0], [28.1, 203.0], [28.2, 203.0], [28.3, 203.0], [28.4, 205.0], [28.5, 205.0], [28.6, 205.0], [28.7, 205.0], [28.8, 207.0], [28.9, 207.0], [29.0, 207.0], [29.1, 207.0], [29.2, 208.0], [29.3, 208.0], [29.4, 208.0], [29.5, 208.0], [29.6, 210.0], [29.7, 210.0], [29.8, 210.0], [29.9, 210.0], [30.0, 211.0], [30.1, 211.0], [30.2, 211.0], [30.3, 211.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 213.0], [30.8, 214.0], [30.9, 214.0], [31.0, 214.0], [31.1, 214.0], [31.2, 215.0], [31.3, 215.0], [31.4, 215.0], [31.5, 215.0], [31.6, 218.0], [31.7, 218.0], [31.8, 218.0], [31.9, 218.0], [32.0, 219.0], [32.1, 219.0], [32.2, 219.0], [32.3, 219.0], [32.4, 220.0], [32.5, 220.0], [32.6, 220.0], [32.7, 220.0], [32.8, 222.0], [32.9, 222.0], [33.0, 222.0], [33.1, 222.0], [33.2, 224.0], [33.3, 224.0], [33.4, 224.0], [33.5, 224.0], [33.6, 227.0], [33.7, 227.0], [33.8, 227.0], [33.9, 227.0], [34.0, 227.0], [34.1, 227.0], [34.2, 227.0], [34.3, 227.0], [34.4, 228.0], [34.5, 228.0], [34.6, 228.0], [34.7, 228.0], [34.8, 228.0], [34.9, 228.0], [35.0, 228.0], [35.1, 228.0], [35.2, 230.0], [35.3, 230.0], [35.4, 230.0], [35.5, 230.0], [35.6, 231.0], [35.7, 231.0], [35.8, 231.0], [35.9, 231.0], [36.0, 231.0], [36.1, 231.0], [36.2, 231.0], [36.3, 231.0], [36.4, 232.0], [36.5, 232.0], [36.6, 232.0], [36.7, 232.0], [36.8, 232.0], [36.9, 232.0], [37.0, 232.0], [37.1, 232.0], [37.2, 232.0], [37.3, 232.0], [37.4, 232.0], [37.5, 232.0], [37.6, 234.0], [37.7, 234.0], [37.8, 234.0], [37.9, 234.0], [38.0, 236.0], [38.1, 236.0], [38.2, 236.0], [38.3, 236.0], [38.4, 237.0], [38.5, 237.0], [38.6, 237.0], [38.7, 237.0], [38.8, 237.0], [38.9, 237.0], [39.0, 237.0], [39.1, 237.0], [39.2, 242.0], [39.3, 242.0], [39.4, 242.0], [39.5, 242.0], [39.6, 243.0], [39.7, 243.0], [39.8, 243.0], [39.9, 243.0], [40.0, 243.0], [40.1, 243.0], [40.2, 243.0], [40.3, 243.0], [40.4, 245.0], [40.5, 245.0], [40.6, 245.0], [40.7, 245.0], [40.8, 246.0], [40.9, 246.0], [41.0, 246.0], [41.1, 246.0], [41.2, 254.0], [41.3, 254.0], [41.4, 254.0], [41.5, 254.0], [41.6, 255.0], [41.7, 255.0], [41.8, 255.0], [41.9, 255.0], [42.0, 256.0], [42.1, 256.0], [42.2, 256.0], [42.3, 256.0], [42.4, 258.0], [42.5, 258.0], [42.6, 258.0], [42.7, 258.0], [42.8, 259.0], [42.9, 259.0], [43.0, 259.0], [43.1, 259.0], [43.2, 261.0], [43.3, 261.0], [43.4, 261.0], [43.5, 261.0], [43.6, 261.0], [43.7, 261.0], [43.8, 261.0], [43.9, 261.0], [44.0, 262.0], [44.1, 262.0], [44.2, 262.0], [44.3, 262.0], [44.4, 266.0], [44.5, 266.0], [44.6, 266.0], [44.7, 266.0], [44.8, 267.0], [44.9, 267.0], [45.0, 267.0], [45.1, 267.0], [45.2, 268.0], [45.3, 268.0], [45.4, 268.0], [45.5, 268.0], [45.6, 270.0], [45.7, 270.0], [45.8, 270.0], [45.9, 270.0], [46.0, 270.0], [46.1, 270.0], [46.2, 270.0], [46.3, 270.0], [46.4, 271.0], [46.5, 271.0], [46.6, 271.0], [46.7, 271.0], [46.8, 274.0], [46.9, 274.0], [47.0, 274.0], [47.1, 274.0], [47.2, 284.0], [47.3, 284.0], [47.4, 284.0], [47.5, 284.0], [47.6, 284.0], [47.7, 284.0], [47.8, 284.0], [47.9, 284.0], [48.0, 285.0], [48.1, 285.0], [48.2, 285.0], [48.3, 285.0], [48.4, 309.0], [48.5, 309.0], [48.6, 309.0], [48.7, 309.0], [48.8, 311.0], [48.9, 311.0], [49.0, 311.0], [49.1, 311.0], [49.2, 312.0], [49.3, 312.0], [49.4, 312.0], [49.5, 312.0], [49.6, 315.0], [49.7, 315.0], [49.8, 315.0], [49.9, 315.0], [50.0, 320.0], [50.1, 320.0], [50.2, 320.0], [50.3, 320.0], [50.4, 327.0], [50.5, 327.0], [50.6, 327.0], [50.7, 327.0], [50.8, 328.0], [50.9, 328.0], [51.0, 328.0], [51.1, 328.0], [51.2, 333.0], [51.3, 333.0], [51.4, 333.0], [51.5, 333.0], [51.6, 334.0], [51.7, 334.0], [51.8, 334.0], [51.9, 334.0], [52.0, 334.0], [52.1, 334.0], [52.2, 334.0], [52.3, 334.0], [52.4, 344.0], [52.5, 344.0], [52.6, 344.0], [52.7, 344.0], [52.8, 357.0], [52.9, 357.0], [53.0, 357.0], [53.1, 357.0], [53.2, 358.0], [53.3, 358.0], [53.4, 358.0], [53.5, 358.0], [53.6, 359.0], [53.7, 359.0], [53.8, 359.0], [53.9, 359.0], [54.0, 381.0], [54.1, 381.0], [54.2, 381.0], [54.3, 381.0], [54.4, 390.0], [54.5, 390.0], [54.6, 390.0], [54.7, 390.0], [54.8, 391.0], [54.9, 391.0], [55.0, 391.0], [55.1, 391.0], [55.2, 423.0], [55.3, 423.0], [55.4, 423.0], [55.5, 423.0], [55.6, 438.0], [55.7, 438.0], [55.8, 438.0], [55.9, 438.0], [56.0, 439.0], [56.1, 439.0], [56.2, 439.0], [56.3, 439.0], [56.4, 441.0], [56.5, 441.0], [56.6, 441.0], [56.7, 441.0], [56.8, 448.0], [56.9, 448.0], [57.0, 448.0], [57.1, 448.0], [57.2, 449.0], [57.3, 449.0], [57.4, 449.0], [57.5, 449.0], [57.6, 458.0], [57.7, 458.0], [57.8, 458.0], [57.9, 458.0], [58.0, 459.0], [58.1, 459.0], [58.2, 459.0], [58.3, 459.0], [58.4, 481.0], [58.5, 481.0], [58.6, 481.0], [58.7, 481.0], [58.8, 487.0], [58.9, 487.0], [59.0, 487.0], [59.1, 487.0], [59.2, 504.0], [59.3, 504.0], [59.4, 504.0], [59.5, 504.0], [59.6, 512.0], [59.7, 512.0], [59.8, 512.0], [59.9, 512.0], [60.0, 518.0], [60.1, 518.0], [60.2, 518.0], [60.3, 518.0], [60.4, 521.0], [60.5, 521.0], [60.6, 521.0], [60.7, 521.0], [60.8, 534.0], [60.9, 534.0], [61.0, 534.0], [61.1, 534.0], [61.2, 536.0], [61.3, 536.0], [61.4, 536.0], [61.5, 536.0], [61.6, 538.0], [61.7, 538.0], [61.8, 538.0], [61.9, 538.0], [62.0, 557.0], [62.1, 557.0], [62.2, 557.0], [62.3, 557.0], [62.4, 564.0], [62.5, 564.0], [62.6, 564.0], [62.7, 564.0], [62.8, 594.0], [62.9, 594.0], [63.0, 594.0], [63.1, 594.0], [63.2, 596.0], [63.3, 596.0], [63.4, 596.0], [63.5, 596.0], [63.6, 596.0], [63.7, 596.0], [63.8, 596.0], [63.9, 596.0], [64.0, 602.0], [64.1, 602.0], [64.2, 602.0], [64.3, 602.0], [64.4, 606.0], [64.5, 606.0], [64.6, 606.0], [64.7, 606.0], [64.8, 614.0], [64.9, 614.0], [65.0, 614.0], [65.1, 614.0], [65.2, 616.0], [65.3, 616.0], [65.4, 616.0], [65.5, 616.0], [65.6, 631.0], [65.7, 631.0], [65.8, 631.0], [65.9, 631.0], [66.0, 635.0], [66.1, 635.0], [66.2, 635.0], [66.3, 635.0], [66.4, 644.0], [66.5, 644.0], [66.6, 644.0], [66.7, 644.0], [66.8, 647.0], [66.9, 647.0], [67.0, 647.0], [67.1, 647.0], [67.2, 663.0], [67.3, 663.0], [67.4, 663.0], [67.5, 663.0], [67.6, 666.0], [67.7, 666.0], [67.8, 666.0], [67.9, 666.0], [68.0, 690.0], [68.1, 690.0], [68.2, 690.0], [68.3, 690.0], [68.4, 702.0], [68.5, 702.0], [68.6, 702.0], [68.7, 702.0], [68.8, 707.0], [68.9, 707.0], [69.0, 707.0], [69.1, 707.0], [69.2, 710.0], [69.3, 710.0], [69.4, 710.0], [69.5, 710.0], [69.6, 724.0], [69.7, 724.0], [69.8, 724.0], [69.9, 724.0], [70.0, 741.0], [70.1, 741.0], [70.2, 741.0], [70.3, 741.0], [70.4, 745.0], [70.5, 745.0], [70.6, 745.0], [70.7, 745.0], [70.8, 746.0], [70.9, 746.0], [71.0, 746.0], [71.1, 746.0], [71.2, 747.0], [71.3, 747.0], [71.4, 747.0], [71.5, 747.0], [71.6, 750.0], [71.7, 750.0], [71.8, 750.0], [71.9, 750.0], [72.0, 770.0], [72.1, 770.0], [72.2, 770.0], [72.3, 770.0], [72.4, 792.0], [72.5, 792.0], [72.6, 792.0], [72.7, 792.0], [72.8, 802.0], [72.9, 802.0], [73.0, 802.0], [73.1, 802.0], [73.2, 832.0], [73.3, 832.0], [73.4, 832.0], [73.5, 832.0], [73.6, 834.0], [73.7, 834.0], [73.8, 834.0], [73.9, 834.0], [74.0, 837.0], [74.1, 837.0], [74.2, 837.0], [74.3, 837.0], [74.4, 852.0], [74.5, 852.0], [74.6, 852.0], [74.7, 852.0], [74.8, 852.0], [74.9, 862.0], [75.0, 862.0], [75.1, 862.0], [75.2, 862.0], [75.3, 871.0], [75.4, 871.0], [75.5, 871.0], [75.6, 871.0], [75.7, 874.0], [75.8, 874.0], [75.9, 874.0], [76.0, 874.0], [76.1, 874.0], [76.2, 874.0], [76.3, 874.0], [76.4, 874.0], [76.5, 877.0], [76.6, 877.0], [76.7, 877.0], [76.8, 877.0], [76.9, 878.0], [77.0, 878.0], [77.1, 878.0], [77.2, 878.0], [77.3, 881.0], [77.4, 881.0], [77.5, 881.0], [77.6, 881.0], [77.7, 882.0], [77.8, 882.0], [77.9, 882.0], [78.0, 882.0], [78.1, 884.0], [78.2, 884.0], [78.3, 884.0], [78.4, 884.0], [78.5, 902.0], [78.6, 902.0], [78.7, 902.0], [78.8, 902.0], [78.9, 926.0], [79.0, 926.0], [79.1, 926.0], [79.2, 926.0], [79.3, 928.0], [79.4, 928.0], [79.5, 928.0], [79.6, 928.0], [79.7, 935.0], [79.8, 935.0], [79.9, 935.0], [80.0, 935.0], [80.1, 942.0], [80.2, 942.0], [80.3, 942.0], [80.4, 942.0], [80.5, 958.0], [80.6, 958.0], [80.7, 958.0], [80.8, 958.0], [80.9, 991.0], [81.0, 991.0], [81.1, 991.0], [81.2, 991.0], [81.3, 995.0], [81.4, 995.0], [81.5, 995.0], [81.6, 995.0], [81.7, 998.0], [81.8, 998.0], [81.9, 998.0], [82.0, 998.0], [82.1, 1008.0], [82.2, 1008.0], [82.3, 1008.0], [82.4, 1008.0], [82.5, 1022.0], [82.6, 1022.0], [82.7, 1022.0], [82.8, 1022.0], [82.9, 1027.0], [83.0, 1027.0], [83.1, 1027.0], [83.2, 1027.0], [83.3, 1038.0], [83.4, 1038.0], [83.5, 1038.0], [83.6, 1038.0], [83.7, 1039.0], [83.8, 1039.0], [83.9, 1039.0], [84.0, 1039.0], [84.1, 1040.0], [84.2, 1040.0], [84.3, 1040.0], [84.4, 1040.0], [84.5, 1071.0], [84.6, 1071.0], [84.7, 1071.0], [84.8, 1071.0], [84.9, 1074.0], [85.0, 1074.0], [85.1, 1074.0], [85.2, 1074.0], [85.3, 1076.0], [85.4, 1076.0], [85.5, 1076.0], [85.6, 1076.0], [85.7, 1081.0], [85.8, 1081.0], [85.9, 1081.0], [86.0, 1081.0], [86.1, 1082.0], [86.2, 1082.0], [86.3, 1082.0], [86.4, 1082.0], [86.5, 1084.0], [86.6, 1084.0], [86.7, 1084.0], [86.8, 1084.0], [86.9, 1088.0], [87.0, 1088.0], [87.1, 1088.0], [87.2, 1088.0], [87.3, 1088.0], [87.4, 1088.0], [87.5, 1088.0], [87.6, 1088.0], [87.7, 1093.0], [87.8, 1093.0], [87.9, 1093.0], [88.0, 1093.0], [88.1, 1107.0], [88.2, 1107.0], [88.3, 1107.0], [88.4, 1107.0], [88.5, 1112.0], [88.6, 1112.0], [88.7, 1112.0], [88.8, 1112.0], [88.9, 1133.0], [89.0, 1133.0], [89.1, 1133.0], [89.2, 1133.0], [89.3, 1162.0], [89.4, 1162.0], [89.5, 1162.0], [89.6, 1162.0], [89.7, 1179.0], [89.8, 1179.0], [89.9, 1179.0], [90.0, 1179.0], [90.1, 1227.0], [90.2, 1227.0], [90.3, 1227.0], [90.4, 1227.0], [90.5, 1283.0], [90.6, 1283.0], [90.7, 1283.0], [90.8, 1283.0], [90.9, 1287.0], [91.0, 1287.0], [91.1, 1287.0], [91.2, 1287.0], [91.3, 1297.0], [91.4, 1297.0], [91.5, 1297.0], [91.6, 1297.0], [91.7, 1316.0], [91.8, 1316.0], [91.9, 1316.0], [92.0, 1316.0], [92.1, 1346.0], [92.2, 1346.0], [92.3, 1346.0], [92.4, 1346.0], [92.5, 1382.0], [92.6, 1382.0], [92.7, 1382.0], [92.8, 1382.0], [92.9, 1383.0], [93.0, 1383.0], [93.1, 1383.0], [93.2, 1383.0], [93.3, 1494.0], [93.4, 1494.0], [93.5, 1494.0], [93.6, 1494.0], [93.7, 1642.0], [93.8, 1642.0], [93.9, 1642.0], [94.0, 1642.0], [94.1, 1664.0], [94.2, 1664.0], [94.3, 1664.0], [94.4, 1664.0], [94.5, 1787.0], [94.6, 1787.0], [94.7, 1787.0], [94.8, 1787.0], [94.9, 2589.0], [95.0, 2589.0], [95.1, 2589.0], [95.2, 2589.0], [95.3, 2697.0], [95.4, 2697.0], [95.5, 2697.0], [95.6, 2697.0], [95.7, 2920.0], [95.8, 2920.0], [95.9, 2920.0], [96.0, 2920.0], [96.1, 3024.0], [96.2, 3024.0], [96.3, 3024.0], [96.4, 3024.0], [96.5, 3030.0], [96.6, 3030.0], [96.7, 3030.0], [96.8, 3030.0], [96.9, 3053.0], [97.0, 3053.0], [97.1, 3053.0], [97.2, 3053.0], [97.3, 3146.0], [97.4, 3146.0], [97.5, 3146.0], [97.6, 3146.0], [97.7, 3242.0], [97.8, 3242.0], [97.9, 3242.0], [98.0, 3242.0], [98.1, 3255.0], [98.2, 3255.0], [98.3, 3255.0], [98.4, 3255.0], [98.5, 3364.0], [98.6, 3364.0], [98.7, 3364.0], [98.8, 3364.0], [98.9, 3547.0], [99.0, 3547.0], [99.1, 3547.0], [99.2, 3547.0], [99.3, 3571.0], [99.4, 3571.0], [99.5, 3571.0], [99.6, 3571.0], [99.7, 3785.0], [99.8, 3785.0], [99.9, 3785.0], [100.0, 3785.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 69.0, "series": [{"data": [[600.0, 10.0], [700.0, 10.0], [800.0, 13.0], [900.0, 12.0], [1000.0, 15.0], [1100.0, 10.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 2.0], [1500.0, 8.0], [1600.0, 3.0], [100.0, 44.0], [1700.0, 3.0], [1800.0, 5.0], [1900.0, 3.0], [2000.0, 2.0], [2200.0, 2.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 2.0], [200.0, 48.0], [3300.0, 1.0], [3400.0, 1.0], [300.0, 19.0], [400.0, 12.0], [500.0, 11.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[600.0, 13.0], [2500.0, 1.0], [2600.0, 1.0], [700.0, 14.0], [2700.0, 1.0], [2900.0, 1.0], [200.0, 45.0], [800.0, 10.0], [3200.0, 1.0], [3300.0, 1.0], [900.0, 7.0], [1000.0, 11.0], [1100.0, 12.0], [300.0, 25.0], [1200.0, 5.0], [1300.0, 9.0], [1400.0, 3.0], [1500.0, 2.0], [100.0, 59.0], [400.0, 8.0], [1700.0, 2.0], [1800.0, 1.0], [500.0, 18.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[600.0, 11.0], [700.0, 11.0], [800.0, 14.0], [900.0, 9.0], [1000.0, 15.0], [1100.0, 5.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 1.0], [100.0, 69.0], [1600.0, 2.0], [1700.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 1.0], [200.0, 52.0], [3300.0, 1.0], [3200.0, 2.0], [3500.0, 2.0], [3700.0, 1.0], [300.0, 17.0], [400.0, 10.0], [500.0, 12.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 61.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 409.0, "series": [{"data": [[0.0, 409.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 280.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 61.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 47.71599999999999, "minX": 1.72793274E12, "maxY": 47.71599999999999, "series": [{"data": [[1.72793274E12, 47.71599999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793274E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 152.0, "minX": 1.0, "maxY": 3785.0, "series": [{"data": [[37.0, 226.0], [36.0, 499.6], [39.0, 359.75], [38.0, 682.4], [41.0, 452.0], [40.0, 654.5714285714286], [42.0, 702.8999999999999], [43.0, 418.4545454545454], [44.0, 582.0], [45.0, 1043.3333333333333], [47.0, 376.3333333333333], [46.0, 228.0], [49.0, 496.1111111111111], [48.0, 677.2222222222222], [50.0, 706.0], [51.0, 729.3333333333334], [52.0, 1125.4285714285713], [53.0, 766.0], [54.0, 1340.5], [55.0, 1096.5555555555557], [56.0, 822.5], [57.0, 924.0], [59.0, 708.3000000000001], [58.0, 1007.6], [60.0, 1042.75], [61.0, 179.0], [62.0, 1389.4285714285713], [63.0, 503.0], [64.0, 1093.2], [65.0, 784.8], [66.0, 1237.3636363636365], [67.0, 567.5], [68.0, 667.6], [69.0, 829.8], [70.0, 560.0], [5.0, 3427.0], [11.0, 1528.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[49.50799999999998, 738.028]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[32.0, 653.0], [37.0, 368.5], [36.0, 665.0], [39.0, 411.25], [38.0, 301.3333333333333], [41.0, 631.2857142857143], [40.0, 380.8461538461538], [43.0, 425.4], [42.0, 527.8399999999999], [45.0, 321.2], [44.0, 682.9090909090909], [47.0, 551.7500000000001], [46.0, 1284.0], [48.0, 636.7142857142857], [49.0, 403.25], [50.0, 577.4], [51.0, 347.25], [52.0, 761.4], [55.0, 381.28571428571433], [54.0, 254.0], [57.0, 731.5], [58.0, 528.1666666666667], [59.0, 581.25], [60.0, 707.1666666666666], [61.0, 584.0], [62.0, 332.75], [63.0, 404.5], [64.0, 442.8333333333333], [66.0, 619.8571428571428], [65.0, 906.8181818181819], [67.0, 790.5], [68.0, 1000.6666666666666], [69.0, 1008.0], [5.0, 545.0], [9.0, 1548.5], [16.0, 2979.0], [19.0, 1175.0], [25.0, 1302.0], [30.0, 353.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[48.564000000000014, 600.4839999999996]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 3547.0], [3.0, 3785.0], [4.0, 159.0], [5.0, 228.0], [6.0, 177.0], [7.0, 1383.0], [8.0, 167.0], [9.0, 3242.0], [10.0, 1038.0], [11.0, 3146.0], [12.0, 1162.0], [13.0, 1316.0], [14.0, 153.0], [15.0, 3030.0], [16.0, 237.0], [17.0, 1179.0], [18.0, 926.0], [19.0, 602.0], [20.0, 750.0], [21.0, 176.0], [22.0, 616.0], [23.0, 1093.0], [24.0, 255.0], [25.0, 159.0], [26.0, 262.0], [27.0, 243.0], [28.0, 596.0], [29.0, 334.0], [30.0, 928.0], [31.0, 152.0], [33.0, 707.0], [32.0, 157.0], [35.0, 175.0], [34.0, 1346.0], [37.0, 803.25], [36.0, 262.0], [39.0, 349.3333333333333], [38.0, 566.3333333333333], [41.0, 620.7692307692307], [40.0, 433.45454545454544], [43.0, 696.5238095238096], [42.0, 703.5882352941177], [45.0, 812.8181818181818], [44.0, 332.25], [47.0, 296.25], [46.0, 723.0], [49.0, 801.2499999999999], [48.0, 362.1818181818182], [51.0, 434.15384615384613], [50.0, 585.3333333333333], [53.0, 816.5], [52.0, 593.4], [55.0, 514.5], [54.0, 627.0], [56.0, 717.5], [59.0, 505.1111111111111], [58.0, 677.0], [61.0, 1082.0], [60.0, 579.4], [63.0, 287.5], [62.0, 214.33333333333334], [65.0, 339.4], [64.0, 156.0], [67.0, 396.70000000000005], [66.0, 859.1666666666666], [68.0, 195.0], [70.0, 511.5], [69.0, 596.0], [1.0, 3255.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[45.076, 625.7040000000003]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 70.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5508.333333333333, "minX": 1.72793274E12, "maxY": 82833.33333333333, "series": [{"data": [[1.72793274E12, 82833.33333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72793274E12, 5508.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793274E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 600.4839999999996, "minX": 1.72793274E12, "maxY": 738.028, "series": [{"data": [[1.72793274E12, 738.028]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793274E12, 600.4839999999996]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793274E12, 625.7040000000003]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793274E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 599.3559999999999, "minX": 1.72793274E12, "maxY": 736.9159999999996, "series": [{"data": [[1.72793274E12, 736.9159999999996]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793274E12, 599.3559999999999]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793274E12, 625.0600000000001]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793274E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72793274E12, "maxY": 173.41200000000006, "series": [{"data": [[1.72793274E12, 173.41200000000006]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793274E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793274E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793274E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 133.0, "minX": 1.72793274E12, "maxY": 3785.0, "series": [{"data": [[1.72793274E12, 3785.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72793274E12, 1344.6999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72793274E12, 3287.3400000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72793274E12, 1822.3999999999992]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72793274E12, 133.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72793274E12, 388.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793274E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 269.5, "minX": 2.0, "maxY": 3401.0, "series": [{"data": [[2.0, 3401.0], [74.0, 356.0], [78.0, 269.5], [81.0, 328.0], [84.0, 300.5], [93.0, 778.0], [92.0, 595.0], [23.0, 1162.0], [6.0, 545.0], [59.0, 365.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 93.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 269.0, "minX": 2.0, "maxY": 3401.0, "series": [{"data": [[2.0, 3401.0], [74.0, 355.5], [78.0, 269.0], [81.0, 327.0], [84.0, 299.0], [93.0, 778.0], [92.0, 594.5], [23.0, 1162.0], [6.0, 544.5], [59.0, 364.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 93.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793274E12, "maxY": 12.5, "series": [{"data": [[1.72793274E12, 12.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793274E12, "maxY": 12.5, "series": [{"data": [[1.72793274E12, 12.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793274E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.72793274E12, "maxY": 4.166666666666667, "series": [{"data": [[1.72793274E12, 4.166666666666667]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.72793274E12, 4.166666666666667]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.72793274E12, 4.166666666666667]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793274E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793274E12, "maxY": 12.5, "series": [{"data": [[1.72793274E12, 12.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793274E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

