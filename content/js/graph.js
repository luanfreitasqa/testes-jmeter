/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 159.0, "minX": 0.0, "maxY": 2861.0, "series": [{"data": [[0.0, 180.0], [0.1, 180.0], [0.2, 180.0], [0.3, 180.0], [0.4, 184.0], [0.5, 184.0], [0.6, 184.0], [0.7, 184.0], [0.8, 185.0], [0.9, 185.0], [1.0, 185.0], [1.1, 185.0], [1.2, 185.0], [1.3, 186.0], [1.4, 186.0], [1.5, 186.0], [1.6, 187.0], [1.7, 187.0], [1.8, 187.0], [1.9, 187.0], [2.0, 189.0], [2.1, 189.0], [2.2, 189.0], [2.3, 189.0], [2.4, 190.0], [2.5, 190.0], [2.6, 190.0], [2.7, 190.0], [2.8, 191.0], [2.9, 191.0], [3.0, 191.0], [3.1, 191.0], [3.2, 192.0], [3.3, 192.0], [3.4, 192.0], [3.5, 192.0], [3.6, 192.0], [3.7, 192.0], [3.8, 192.0], [3.9, 192.0], [4.0, 193.0], [4.1, 193.0], [4.2, 193.0], [4.3, 193.0], [4.4, 194.0], [4.5, 194.0], [4.6, 194.0], [4.7, 194.0], [4.8, 194.0], [4.9, 194.0], [5.0, 194.0], [5.1, 194.0], [5.2, 195.0], [5.3, 195.0], [5.4, 195.0], [5.5, 195.0], [5.6, 195.0], [5.7, 196.0], [5.8, 196.0], [5.9, 196.0], [6.0, 196.0], [6.1, 198.0], [6.2, 198.0], [6.3, 198.0], [6.4, 198.0], [6.5, 199.0], [6.6, 199.0], [6.7, 199.0], [6.8, 199.0], [6.9, 200.0], [7.0, 200.0], [7.1, 200.0], [7.2, 200.0], [7.3, 204.0], [7.4, 204.0], [7.5, 204.0], [7.6, 204.0], [7.7, 204.0], [7.8, 204.0], [7.9, 204.0], [8.0, 204.0], [8.1, 204.0], [8.2, 204.0], [8.3, 204.0], [8.4, 204.0], [8.5, 205.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 205.0], [9.1, 205.0], [9.2, 205.0], [9.3, 206.0], [9.4, 206.0], [9.5, 206.0], [9.6, 206.0], [9.7, 207.0], [9.8, 207.0], [9.9, 207.0], [10.0, 207.0], [10.1, 207.0], [10.2, 207.0], [10.3, 207.0], [10.4, 207.0], [10.5, 208.0], [10.6, 208.0], [10.7, 208.0], [10.8, 208.0], [10.9, 209.0], [11.0, 209.0], [11.1, 209.0], [11.2, 209.0], [11.3, 209.0], [11.4, 209.0], [11.5, 209.0], [11.6, 209.0], [11.7, 210.0], [11.8, 210.0], [11.9, 210.0], [12.0, 210.0], [12.1, 211.0], [12.2, 211.0], [12.3, 211.0], [12.4, 211.0], [12.5, 211.0], [12.6, 211.0], [12.7, 211.0], [12.8, 211.0], [12.9, 212.0], [13.0, 212.0], [13.1, 212.0], [13.2, 212.0], [13.3, 212.0], [13.4, 212.0], [13.5, 212.0], [13.6, 212.0], [13.7, 212.0], [13.8, 212.0], [13.9, 212.0], [14.0, 212.0], [14.1, 215.0], [14.2, 215.0], [14.3, 215.0], [14.4, 215.0], [14.5, 215.0], [14.6, 215.0], [14.7, 215.0], [14.8, 215.0], [14.9, 216.0], [15.0, 216.0], [15.1, 216.0], [15.2, 216.0], [15.3, 217.0], [15.4, 217.0], [15.5, 217.0], [15.6, 217.0], [15.7, 218.0], [15.8, 218.0], [15.9, 218.0], [16.0, 218.0], [16.1, 219.0], [16.2, 219.0], [16.3, 219.0], [16.4, 219.0], [16.5, 219.0], [16.6, 219.0], [16.7, 219.0], [16.8, 219.0], [16.9, 220.0], [17.0, 220.0], [17.1, 220.0], [17.2, 220.0], [17.3, 220.0], [17.4, 220.0], [17.5, 220.0], [17.6, 220.0], [17.7, 224.0], [17.8, 224.0], [17.9, 224.0], [18.0, 224.0], [18.1, 225.0], [18.2, 225.0], [18.3, 225.0], [18.4, 225.0], [18.5, 225.0], [18.6, 225.0], [18.7, 225.0], [18.8, 225.0], [18.9, 225.0], [19.0, 225.0], [19.1, 225.0], [19.2, 225.0], [19.3, 226.0], [19.4, 226.0], [19.5, 226.0], [19.6, 226.0], [19.7, 226.0], [19.8, 226.0], [19.9, 226.0], [20.0, 226.0], [20.1, 227.0], [20.2, 227.0], [20.3, 227.0], [20.4, 227.0], [20.5, 228.0], [20.6, 228.0], [20.7, 228.0], [20.8, 228.0], [20.9, 230.0], [21.0, 230.0], [21.1, 230.0], [21.2, 230.0], [21.3, 234.0], [21.4, 234.0], [21.5, 234.0], [21.6, 235.0], [21.7, 235.0], [21.8, 235.0], [21.9, 235.0], [22.0, 236.0], [22.1, 236.0], [22.2, 236.0], [22.3, 236.0], [22.4, 237.0], [22.5, 237.0], [22.6, 237.0], [22.7, 237.0], [22.8, 237.0], [22.9, 237.0], [23.0, 237.0], [23.1, 237.0], [23.2, 240.0], [23.3, 240.0], [23.4, 240.0], [23.5, 240.0], [23.6, 241.0], [23.7, 241.0], [23.8, 241.0], [23.9, 241.0], [24.0, 241.0], [24.1, 241.0], [24.2, 241.0], [24.3, 241.0], [24.4, 242.0], [24.5, 242.0], [24.6, 242.0], [24.7, 242.0], [24.8, 243.0], [24.9, 243.0], [25.0, 243.0], [25.1, 243.0], [25.2, 244.0], [25.3, 244.0], [25.4, 244.0], [25.5, 244.0], [25.6, 248.0], [25.7, 248.0], [25.8, 248.0], [25.9, 248.0], [26.0, 250.0], [26.1, 250.0], [26.2, 250.0], [26.3, 250.0], [26.4, 251.0], [26.5, 251.0], [26.6, 251.0], [26.7, 251.0], [26.8, 251.0], [26.9, 251.0], [27.0, 251.0], [27.1, 251.0], [27.2, 254.0], [27.3, 254.0], [27.4, 254.0], [27.5, 254.0], [27.6, 255.0], [27.7, 255.0], [27.8, 255.0], [27.9, 255.0], [28.0, 255.0], [28.1, 255.0], [28.2, 255.0], [28.3, 255.0], [28.4, 255.0], [28.5, 255.0], [28.6, 255.0], [28.7, 255.0], [28.8, 256.0], [28.9, 256.0], [29.0, 256.0], [29.1, 256.0], [29.2, 256.0], [29.3, 256.0], [29.4, 256.0], [29.5, 256.0], [29.6, 257.0], [29.7, 257.0], [29.8, 257.0], [29.9, 257.0], [30.0, 258.0], [30.1, 258.0], [30.2, 258.0], [30.3, 258.0], [30.4, 260.0], [30.5, 260.0], [30.6, 260.0], [30.7, 260.0], [30.8, 262.0], [30.9, 262.0], [31.0, 262.0], [31.1, 262.0], [31.2, 264.0], [31.3, 264.0], [31.4, 264.0], [31.5, 264.0], [31.6, 267.0], [31.7, 267.0], [31.8, 267.0], [31.9, 267.0], [32.0, 268.0], [32.1, 268.0], [32.2, 268.0], [32.3, 268.0], [32.4, 269.0], [32.5, 269.0], [32.6, 269.0], [32.7, 269.0], [32.8, 270.0], [32.9, 270.0], [33.0, 270.0], [33.1, 270.0], [33.2, 275.0], [33.3, 275.0], [33.4, 275.0], [33.5, 275.0], [33.6, 276.0], [33.7, 276.0], [33.8, 276.0], [33.9, 276.0], [34.0, 283.0], [34.1, 283.0], [34.2, 283.0], [34.3, 283.0], [34.4, 284.0], [34.5, 284.0], [34.6, 284.0], [34.7, 284.0], [34.8, 289.0], [34.9, 289.0], [35.0, 289.0], [35.1, 289.0], [35.2, 290.0], [35.3, 290.0], [35.4, 290.0], [35.5, 290.0], [35.6, 291.0], [35.7, 291.0], [35.8, 291.0], [35.9, 291.0], [36.0, 294.0], [36.1, 294.0], [36.2, 294.0], [36.3, 294.0], [36.4, 294.0], [36.5, 294.0], [36.6, 294.0], [36.7, 294.0], [36.8, 295.0], [36.9, 295.0], [37.0, 295.0], [37.1, 295.0], [37.2, 300.0], [37.3, 300.0], [37.4, 300.0], [37.5, 300.0], [37.6, 301.0], [37.7, 301.0], [37.8, 301.0], [37.9, 301.0], [38.0, 306.0], [38.1, 306.0], [38.2, 306.0], [38.3, 306.0], [38.4, 307.0], [38.5, 307.0], [38.6, 307.0], [38.7, 307.0], [38.8, 308.0], [38.9, 308.0], [39.0, 308.0], [39.1, 308.0], [39.2, 308.0], [39.3, 308.0], [39.4, 308.0], [39.5, 308.0], [39.6, 315.0], [39.7, 315.0], [39.8, 315.0], [39.9, 315.0], [40.0, 318.0], [40.1, 318.0], [40.2, 318.0], [40.3, 318.0], [40.4, 324.0], [40.5, 324.0], [40.6, 324.0], [40.7, 324.0], [40.8, 327.0], [40.9, 327.0], [41.0, 327.0], [41.1, 327.0], [41.2, 330.0], [41.3, 330.0], [41.4, 330.0], [41.5, 330.0], [41.6, 331.0], [41.7, 331.0], [41.8, 331.0], [41.9, 331.0], [42.0, 334.0], [42.1, 334.0], [42.2, 334.0], [42.3, 334.0], [42.4, 335.0], [42.5, 335.0], [42.6, 335.0], [42.7, 335.0], [42.8, 338.0], [42.9, 338.0], [43.0, 338.0], [43.1, 338.0], [43.2, 347.0], [43.3, 347.0], [43.4, 347.0], [43.5, 347.0], [43.6, 347.0], [43.7, 347.0], [43.8, 347.0], [43.9, 347.0], [44.0, 350.0], [44.1, 350.0], [44.2, 350.0], [44.3, 350.0], [44.4, 351.0], [44.5, 351.0], [44.6, 351.0], [44.7, 351.0], [44.8, 362.0], [44.9, 362.0], [45.0, 362.0], [45.1, 362.0], [45.2, 365.0], [45.3, 365.0], [45.4, 365.0], [45.5, 365.0], [45.6, 368.0], [45.7, 368.0], [45.8, 368.0], [45.9, 368.0], [46.0, 370.0], [46.1, 370.0], [46.2, 370.0], [46.3, 370.0], [46.4, 373.0], [46.5, 373.0], [46.6, 373.0], [46.7, 373.0], [46.8, 375.0], [46.9, 375.0], [47.0, 375.0], [47.1, 375.0], [47.2, 379.0], [47.3, 379.0], [47.4, 379.0], [47.5, 379.0], [47.6, 383.0], [47.7, 383.0], [47.8, 383.0], [47.9, 383.0], [48.0, 387.0], [48.1, 387.0], [48.2, 387.0], [48.3, 387.0], [48.4, 389.0], [48.5, 389.0], [48.6, 389.0], [48.7, 389.0], [48.8, 390.0], [48.9, 390.0], [49.0, 390.0], [49.1, 390.0], [49.2, 392.0], [49.3, 392.0], [49.4, 392.0], [49.5, 392.0], [49.6, 396.0], [49.7, 396.0], [49.8, 396.0], [49.9, 396.0], [50.0, 399.0], [50.1, 399.0], [50.2, 399.0], [50.3, 399.0], [50.4, 401.0], [50.5, 401.0], [50.6, 401.0], [50.7, 401.0], [50.8, 412.0], [50.9, 412.0], [51.0, 412.0], [51.1, 412.0], [51.2, 414.0], [51.3, 414.0], [51.4, 414.0], [51.5, 414.0], [51.6, 438.0], [51.7, 438.0], [51.8, 438.0], [51.9, 438.0], [52.0, 446.0], [52.1, 446.0], [52.2, 446.0], [52.3, 446.0], [52.4, 452.0], [52.5, 452.0], [52.6, 452.0], [52.7, 452.0], [52.8, 463.0], [52.9, 463.0], [53.0, 463.0], [53.1, 463.0], [53.2, 468.0], [53.3, 468.0], [53.4, 468.0], [53.5, 468.0], [53.6, 469.0], [53.7, 469.0], [53.8, 469.0], [53.9, 469.0], [54.0, 470.0], [54.1, 470.0], [54.2, 470.0], [54.3, 470.0], [54.4, 471.0], [54.5, 471.0], [54.6, 471.0], [54.7, 471.0], [54.8, 478.0], [54.9, 478.0], [55.0, 478.0], [55.1, 478.0], [55.2, 481.0], [55.3, 481.0], [55.4, 481.0], [55.5, 481.0], [55.6, 483.0], [55.7, 483.0], [55.8, 483.0], [55.9, 483.0], [56.0, 486.0], [56.1, 486.0], [56.2, 486.0], [56.3, 486.0], [56.4, 501.0], [56.5, 501.0], [56.6, 501.0], [56.7, 501.0], [56.8, 502.0], [56.9, 502.0], [57.0, 502.0], [57.1, 502.0], [57.2, 506.0], [57.3, 506.0], [57.4, 506.0], [57.5, 506.0], [57.6, 509.0], [57.7, 509.0], [57.8, 509.0], [57.9, 509.0], [58.0, 516.0], [58.1, 516.0], [58.2, 516.0], [58.3, 516.0], [58.4, 518.0], [58.5, 518.0], [58.6, 518.0], [58.7, 518.0], [58.8, 525.0], [58.9, 525.0], [59.0, 525.0], [59.1, 525.0], [59.2, 530.0], [59.3, 530.0], [59.4, 530.0], [59.5, 530.0], [59.6, 543.0], [59.7, 543.0], [59.8, 543.0], [59.9, 543.0], [60.0, 557.0], [60.1, 557.0], [60.2, 557.0], [60.3, 557.0], [60.4, 562.0], [60.5, 562.0], [60.6, 562.0], [60.7, 562.0], [60.8, 568.0], [60.9, 568.0], [61.0, 568.0], [61.1, 568.0], [61.2, 573.0], [61.3, 573.0], [61.4, 573.0], [61.5, 573.0], [61.6, 580.0], [61.7, 580.0], [61.8, 580.0], [61.9, 580.0], [62.0, 582.0], [62.1, 582.0], [62.2, 582.0], [62.3, 582.0], [62.4, 591.0], [62.5, 591.0], [62.6, 591.0], [62.7, 591.0], [62.8, 592.0], [62.9, 592.0], [63.0, 592.0], [63.1, 592.0], [63.2, 592.0], [63.3, 592.0], [63.4, 592.0], [63.5, 592.0], [63.6, 597.0], [63.7, 597.0], [63.8, 597.0], [63.9, 597.0], [64.0, 613.0], [64.1, 613.0], [64.2, 613.0], [64.3, 613.0], [64.4, 613.0], [64.5, 613.0], [64.6, 613.0], [64.7, 613.0], [64.8, 615.0], [64.9, 615.0], [65.0, 615.0], [65.1, 615.0], [65.2, 616.0], [65.3, 616.0], [65.4, 616.0], [65.5, 616.0], [65.6, 617.0], [65.7, 617.0], [65.8, 617.0], [65.9, 617.0], [66.0, 626.0], [66.1, 626.0], [66.2, 626.0], [66.3, 626.0], [66.4, 627.0], [66.5, 627.0], [66.6, 627.0], [66.7, 627.0], [66.8, 632.0], [66.9, 632.0], [67.0, 632.0], [67.1, 632.0], [67.2, 633.0], [67.3, 633.0], [67.4, 633.0], [67.5, 633.0], [67.6, 640.0], [67.7, 640.0], [67.8, 640.0], [67.9, 640.0], [68.0, 648.0], [68.1, 648.0], [68.2, 648.0], [68.3, 648.0], [68.4, 658.0], [68.5, 658.0], [68.6, 658.0], [68.7, 658.0], [68.8, 662.0], [68.9, 662.0], [69.0, 662.0], [69.1, 662.0], [69.2, 672.0], [69.3, 672.0], [69.4, 672.0], [69.5, 672.0], [69.6, 681.0], [69.7, 681.0], [69.8, 681.0], [69.9, 681.0], [70.0, 682.0], [70.1, 682.0], [70.2, 682.0], [70.3, 682.0], [70.4, 685.0], [70.5, 685.0], [70.6, 685.0], [70.7, 685.0], [70.8, 686.0], [70.9, 686.0], [71.0, 686.0], [71.1, 686.0], [71.2, 688.0], [71.3, 688.0], [71.4, 688.0], [71.5, 688.0], [71.6, 690.0], [71.7, 690.0], [71.8, 690.0], [71.9, 690.0], [72.0, 693.0], [72.1, 693.0], [72.2, 693.0], [72.3, 693.0], [72.4, 699.0], [72.5, 699.0], [72.6, 699.0], [72.7, 699.0], [72.8, 705.0], [72.9, 705.0], [73.0, 705.0], [73.1, 705.0], [73.2, 706.0], [73.3, 706.0], [73.4, 706.0], [73.5, 706.0], [73.6, 710.0], [73.7, 710.0], [73.8, 710.0], [73.9, 710.0], [74.0, 714.0], [74.1, 714.0], [74.2, 714.0], [74.3, 714.0], [74.4, 715.0], [74.5, 715.0], [74.6, 715.0], [74.7, 715.0], [74.8, 715.0], [74.9, 716.0], [75.0, 716.0], [75.1, 716.0], [75.2, 716.0], [75.3, 722.0], [75.4, 722.0], [75.5, 722.0], [75.6, 722.0], [75.7, 724.0], [75.8, 724.0], [75.9, 724.0], [76.0, 724.0], [76.1, 731.0], [76.2, 731.0], [76.3, 731.0], [76.4, 731.0], [76.5, 786.0], [76.6, 786.0], [76.7, 786.0], [76.8, 786.0], [76.9, 795.0], [77.0, 795.0], [77.1, 795.0], [77.2, 795.0], [77.3, 799.0], [77.4, 799.0], [77.5, 799.0], [77.6, 799.0], [77.7, 844.0], [77.8, 844.0], [77.9, 844.0], [78.0, 844.0], [78.1, 896.0], [78.2, 896.0], [78.3, 896.0], [78.4, 896.0], [78.5, 897.0], [78.6, 897.0], [78.7, 897.0], [78.8, 897.0], [78.9, 902.0], [79.0, 902.0], [79.1, 902.0], [79.2, 902.0], [79.3, 904.0], [79.4, 904.0], [79.5, 904.0], [79.6, 904.0], [79.7, 904.0], [79.8, 904.0], [79.9, 904.0], [80.0, 904.0], [80.1, 919.0], [80.2, 919.0], [80.3, 919.0], [80.4, 919.0], [80.5, 927.0], [80.6, 927.0], [80.7, 927.0], [80.8, 927.0], [80.9, 927.0], [81.0, 927.0], [81.1, 927.0], [81.2, 927.0], [81.3, 941.0], [81.4, 941.0], [81.5, 941.0], [81.6, 941.0], [81.7, 964.0], [81.8, 964.0], [81.9, 964.0], [82.0, 964.0], [82.1, 966.0], [82.2, 966.0], [82.3, 966.0], [82.4, 966.0], [82.5, 984.0], [82.6, 984.0], [82.7, 984.0], [82.8, 984.0], [82.9, 1005.0], [83.0, 1005.0], [83.1, 1005.0], [83.2, 1005.0], [83.3, 1033.0], [83.4, 1033.0], [83.5, 1033.0], [83.6, 1033.0], [83.7, 1038.0], [83.8, 1038.0], [83.9, 1038.0], [84.0, 1038.0], [84.1, 1042.0], [84.2, 1042.0], [84.3, 1042.0], [84.4, 1042.0], [84.5, 1042.0], [84.6, 1042.0], [84.7, 1042.0], [84.8, 1042.0], [84.9, 1076.0], [85.0, 1076.0], [85.1, 1076.0], [85.2, 1076.0], [85.3, 1080.0], [85.4, 1080.0], [85.5, 1080.0], [85.6, 1080.0], [85.7, 1088.0], [85.8, 1088.0], [85.9, 1088.0], [86.0, 1088.0], [86.1, 1102.0], [86.2, 1102.0], [86.3, 1102.0], [86.4, 1102.0], [86.5, 1160.0], [86.6, 1160.0], [86.7, 1160.0], [86.8, 1160.0], [86.9, 1177.0], [87.0, 1177.0], [87.1, 1177.0], [87.2, 1177.0], [87.3, 1201.0], [87.4, 1201.0], [87.5, 1201.0], [87.6, 1201.0], [87.7, 1223.0], [87.8, 1223.0], [87.9, 1223.0], [88.0, 1223.0], [88.1, 1285.0], [88.2, 1285.0], [88.3, 1285.0], [88.4, 1285.0], [88.5, 1297.0], [88.6, 1297.0], [88.7, 1297.0], [88.8, 1297.0], [88.9, 1310.0], [89.0, 1310.0], [89.1, 1310.0], [89.2, 1310.0], [89.3, 1458.0], [89.4, 1458.0], [89.5, 1458.0], [89.6, 1458.0], [89.7, 1468.0], [89.8, 1468.0], [89.9, 1468.0], [90.0, 1468.0], [90.1, 1481.0], [90.2, 1481.0], [90.3, 1481.0], [90.4, 1481.0], [90.5, 1563.0], [90.6, 1563.0], [90.7, 1563.0], [90.8, 1563.0], [90.9, 1607.0], [91.0, 1607.0], [91.1, 1607.0], [91.2, 1607.0], [91.3, 1644.0], [91.4, 1644.0], [91.5, 1644.0], [91.6, 1644.0], [91.7, 1644.0], [91.8, 1644.0], [91.9, 1644.0], [92.0, 1644.0], [92.1, 1647.0], [92.2, 1647.0], [92.3, 1647.0], [92.4, 1647.0], [92.5, 1649.0], [92.6, 1649.0], [92.7, 1649.0], [92.8, 1649.0], [92.9, 1655.0], [93.0, 1655.0], [93.1, 1655.0], [93.2, 1655.0], [93.3, 1655.0], [93.4, 1655.0], [93.5, 1655.0], [93.6, 1655.0], [93.7, 1675.0], [93.8, 1675.0], [93.9, 1675.0], [94.0, 1675.0], [94.1, 1689.0], [94.2, 1689.0], [94.3, 1689.0], [94.4, 1689.0], [94.5, 1728.0], [94.6, 1728.0], [94.7, 1728.0], [94.8, 1728.0], [94.9, 1875.0], [95.0, 1875.0], [95.1, 1875.0], [95.2, 1875.0], [95.3, 1991.0], [95.4, 1991.0], [95.5, 1991.0], [95.6, 1991.0], [95.7, 1994.0], [95.8, 1994.0], [95.9, 1994.0], [96.0, 1994.0], [96.1, 2072.0], [96.2, 2072.0], [96.3, 2072.0], [96.4, 2072.0], [96.5, 2129.0], [96.6, 2129.0], [96.7, 2129.0], [96.8, 2129.0], [96.9, 2138.0], [97.0, 2138.0], [97.1, 2138.0], [97.2, 2138.0], [97.3, 2197.0], [97.4, 2197.0], [97.5, 2197.0], [97.6, 2197.0], [97.7, 2206.0], [97.8, 2206.0], [97.9, 2206.0], [98.0, 2206.0], [98.1, 2397.0], [98.2, 2397.0], [98.3, 2397.0], [98.4, 2397.0], [98.5, 2584.0], [98.6, 2584.0], [98.7, 2584.0], [98.8, 2584.0], [98.9, 2634.0], [99.0, 2634.0], [99.1, 2634.0], [99.2, 2634.0], [99.3, 2757.0], [99.4, 2757.0], [99.5, 2757.0], [99.6, 2757.0], [99.7, 2861.0], [99.8, 2861.0], [99.9, 2861.0], [100.0, 2861.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[0.0, 162.0], [0.1, 162.0], [0.2, 162.0], [0.3, 162.0], [0.4, 169.0], [0.5, 169.0], [0.6, 169.0], [0.7, 169.0], [0.8, 172.0], [0.9, 172.0], [1.0, 172.0], [1.1, 172.0], [1.2, 172.0], [1.3, 173.0], [1.4, 173.0], [1.5, 173.0], [1.6, 173.0], [1.7, 173.0], [1.8, 173.0], [1.9, 173.0], [2.0, 173.0], [2.1, 173.0], [2.2, 173.0], [2.3, 173.0], [2.4, 173.0], [2.5, 174.0], [2.6, 174.0], [2.7, 174.0], [2.8, 174.0], [2.9, 174.0], [3.0, 174.0], [3.1, 174.0], [3.2, 174.0], [3.3, 174.0], [3.4, 174.0], [3.5, 174.0], [3.6, 174.0], [3.7, 175.0], [3.8, 175.0], [3.9, 175.0], [4.0, 175.0], [4.1, 176.0], [4.2, 176.0], [4.3, 176.0], [4.4, 176.0], [4.5, 179.0], [4.6, 179.0], [4.7, 179.0], [4.8, 179.0], [4.9, 181.0], [5.0, 181.0], [5.1, 181.0], [5.2, 181.0], [5.3, 182.0], [5.4, 182.0], [5.5, 182.0], [5.6, 182.0], [5.7, 183.0], [5.8, 183.0], [5.9, 183.0], [6.0, 183.0], [6.1, 185.0], [6.2, 185.0], [6.3, 185.0], [6.4, 185.0], [6.5, 186.0], [6.6, 186.0], [6.7, 186.0], [6.8, 186.0], [6.9, 186.0], [7.0, 186.0], [7.1, 186.0], [7.2, 186.0], [7.3, 186.0], [7.4, 186.0], [7.5, 186.0], [7.6, 186.0], [7.7, 186.0], [7.8, 186.0], [7.9, 186.0], [8.0, 186.0], [8.1, 187.0], [8.2, 187.0], [8.3, 187.0], [8.4, 187.0], [8.5, 188.0], [8.6, 188.0], [8.7, 188.0], [8.8, 188.0], [8.9, 189.0], [9.0, 189.0], [9.1, 189.0], [9.2, 189.0], [9.3, 189.0], [9.4, 189.0], [9.5, 189.0], [9.6, 189.0], [9.7, 191.0], [9.8, 191.0], [9.9, 191.0], [10.0, 191.0], [10.1, 192.0], [10.2, 192.0], [10.3, 192.0], [10.4, 192.0], [10.5, 194.0], [10.6, 194.0], [10.7, 194.0], [10.8, 194.0], [10.9, 194.0], [11.0, 194.0], [11.1, 194.0], [11.2, 194.0], [11.3, 196.0], [11.4, 196.0], [11.5, 196.0], [11.6, 196.0], [11.7, 197.0], [11.8, 197.0], [11.9, 197.0], [12.0, 197.0], [12.1, 197.0], [12.2, 197.0], [12.3, 197.0], [12.4, 197.0], [12.5, 198.0], [12.6, 198.0], [12.7, 198.0], [12.8, 198.0], [12.9, 199.0], [13.0, 199.0], [13.1, 199.0], [13.2, 199.0], [13.3, 200.0], [13.4, 200.0], [13.5, 200.0], [13.6, 200.0], [13.7, 202.0], [13.8, 202.0], [13.9, 202.0], [14.0, 202.0], [14.1, 202.0], [14.2, 202.0], [14.3, 202.0], [14.4, 202.0], [14.5, 204.0], [14.6, 204.0], [14.7, 204.0], [14.8, 204.0], [14.9, 204.0], [15.0, 204.0], [15.1, 204.0], [15.2, 204.0], [15.3, 204.0], [15.4, 204.0], [15.5, 204.0], [15.6, 204.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 208.0], [16.2, 208.0], [16.3, 208.0], [16.4, 208.0], [16.5, 209.0], [16.6, 209.0], [16.7, 209.0], [16.8, 209.0], [16.9, 209.0], [17.0, 209.0], [17.1, 209.0], [17.2, 209.0], [17.3, 209.0], [17.4, 209.0], [17.5, 209.0], [17.6, 209.0], [17.7, 210.0], [17.8, 210.0], [17.9, 210.0], [18.0, 210.0], [18.1, 211.0], [18.2, 211.0], [18.3, 211.0], [18.4, 211.0], [18.5, 213.0], [18.6, 213.0], [18.7, 213.0], [18.8, 215.0], [18.9, 215.0], [19.0, 215.0], [19.1, 215.0], [19.2, 215.0], [19.3, 215.0], [19.4, 215.0], [19.5, 215.0], [19.6, 216.0], [19.7, 216.0], [19.8, 216.0], [19.9, 216.0], [20.0, 216.0], [20.1, 216.0], [20.2, 216.0], [20.3, 216.0], [20.4, 216.0], [20.5, 219.0], [20.6, 219.0], [20.7, 219.0], [20.8, 220.0], [20.9, 220.0], [21.0, 220.0], [21.1, 220.0], [21.2, 220.0], [21.3, 220.0], [21.4, 220.0], [21.5, 220.0], [21.6, 221.0], [21.7, 221.0], [21.8, 221.0], [21.9, 221.0], [22.0, 222.0], [22.1, 222.0], [22.2, 222.0], [22.3, 222.0], [22.4, 222.0], [22.5, 222.0], [22.6, 222.0], [22.7, 222.0], [22.8, 222.0], [22.9, 222.0], [23.0, 222.0], [23.1, 222.0], [23.2, 222.0], [23.3, 222.0], [23.4, 222.0], [23.5, 222.0], [23.6, 222.0], [23.7, 222.0], [23.8, 222.0], [23.9, 222.0], [24.0, 223.0], [24.1, 223.0], [24.2, 223.0], [24.3, 223.0], [24.4, 223.0], [24.5, 223.0], [24.6, 223.0], [24.7, 223.0], [24.8, 223.0], [24.9, 223.0], [25.0, 223.0], [25.1, 223.0], [25.2, 224.0], [25.3, 224.0], [25.4, 224.0], [25.5, 224.0], [25.6, 225.0], [25.7, 225.0], [25.8, 225.0], [25.9, 225.0], [26.0, 226.0], [26.1, 226.0], [26.2, 226.0], [26.3, 226.0], [26.4, 228.0], [26.5, 228.0], [26.6, 228.0], [26.7, 228.0], [26.8, 229.0], [26.9, 229.0], [27.0, 229.0], [27.1, 229.0], [27.2, 229.0], [27.3, 229.0], [27.4, 229.0], [27.5, 229.0], [27.6, 231.0], [27.7, 231.0], [27.8, 231.0], [27.9, 231.0], [28.0, 234.0], [28.1, 234.0], [28.2, 234.0], [28.3, 234.0], [28.4, 234.0], [28.5, 234.0], [28.6, 234.0], [28.7, 234.0], [28.8, 236.0], [28.9, 236.0], [29.0, 236.0], [29.1, 236.0], [29.2, 237.0], [29.3, 237.0], [29.4, 237.0], [29.5, 237.0], [29.6, 238.0], [29.7, 238.0], [29.8, 238.0], [29.9, 238.0], [30.0, 239.0], [30.1, 239.0], [30.2, 239.0], [30.3, 239.0], [30.4, 243.0], [30.5, 243.0], [30.6, 243.0], [30.7, 243.0], [30.8, 243.0], [30.9, 243.0], [31.0, 243.0], [31.1, 243.0], [31.2, 246.0], [31.3, 246.0], [31.4, 246.0], [31.5, 246.0], [31.6, 253.0], [31.7, 253.0], [31.8, 253.0], [31.9, 253.0], [32.0, 254.0], [32.1, 254.0], [32.2, 254.0], [32.3, 254.0], [32.4, 255.0], [32.5, 255.0], [32.6, 255.0], [32.7, 255.0], [32.8, 255.0], [32.9, 255.0], [33.0, 255.0], [33.1, 255.0], [33.2, 256.0], [33.3, 256.0], [33.4, 256.0], [33.5, 256.0], [33.6, 256.0], [33.7, 256.0], [33.8, 256.0], [33.9, 256.0], [34.0, 259.0], [34.1, 259.0], [34.2, 259.0], [34.3, 259.0], [34.4, 260.0], [34.5, 260.0], [34.6, 260.0], [34.7, 260.0], [34.8, 261.0], [34.9, 261.0], [35.0, 261.0], [35.1, 261.0], [35.2, 263.0], [35.3, 263.0], [35.4, 263.0], [35.5, 263.0], [35.6, 267.0], [35.7, 267.0], [35.8, 267.0], [35.9, 267.0], [36.0, 278.0], [36.1, 278.0], [36.2, 278.0], [36.3, 278.0], [36.4, 279.0], [36.5, 279.0], [36.6, 279.0], [36.7, 279.0], [36.8, 281.0], [36.9, 281.0], [37.0, 281.0], [37.1, 281.0], [37.2, 281.0], [37.3, 281.0], [37.4, 281.0], [37.5, 281.0], [37.6, 283.0], [37.7, 283.0], [37.8, 283.0], [37.9, 283.0], [38.0, 287.0], [38.1, 287.0], [38.2, 287.0], [38.3, 287.0], [38.4, 288.0], [38.5, 288.0], [38.6, 288.0], [38.7, 288.0], [38.8, 289.0], [38.9, 289.0], [39.0, 289.0], [39.1, 289.0], [39.2, 293.0], [39.3, 293.0], [39.4, 293.0], [39.5, 293.0], [39.6, 295.0], [39.7, 295.0], [39.8, 295.0], [39.9, 295.0], [40.0, 296.0], [40.1, 296.0], [40.2, 296.0], [40.3, 296.0], [40.4, 296.0], [40.5, 296.0], [40.6, 296.0], [40.7, 296.0], [40.8, 298.0], [40.9, 298.0], [41.0, 298.0], [41.1, 298.0], [41.2, 298.0], [41.3, 298.0], [41.4, 298.0], [41.5, 298.0], [41.6, 301.0], [41.7, 301.0], [41.8, 301.0], [41.9, 301.0], [42.0, 304.0], [42.1, 304.0], [42.2, 304.0], [42.3, 304.0], [42.4, 307.0], [42.5, 307.0], [42.6, 307.0], [42.7, 307.0], [42.8, 309.0], [42.9, 309.0], [43.0, 309.0], [43.1, 309.0], [43.2, 315.0], [43.3, 315.0], [43.4, 315.0], [43.5, 315.0], [43.6, 318.0], [43.7, 318.0], [43.8, 318.0], [43.9, 318.0], [44.0, 320.0], [44.1, 320.0], [44.2, 320.0], [44.3, 320.0], [44.4, 332.0], [44.5, 332.0], [44.6, 332.0], [44.7, 332.0], [44.8, 333.0], [44.9, 333.0], [45.0, 333.0], [45.1, 333.0], [45.2, 343.0], [45.3, 343.0], [45.4, 343.0], [45.5, 343.0], [45.6, 343.0], [45.7, 343.0], [45.8, 343.0], [45.9, 343.0], [46.0, 345.0], [46.1, 345.0], [46.2, 345.0], [46.3, 345.0], [46.4, 347.0], [46.5, 347.0], [46.6, 347.0], [46.7, 347.0], [46.8, 347.0], [46.9, 347.0], [47.0, 347.0], [47.1, 347.0], [47.2, 358.0], [47.3, 358.0], [47.4, 358.0], [47.5, 358.0], [47.6, 358.0], [47.7, 358.0], [47.8, 358.0], [47.9, 358.0], [48.0, 366.0], [48.1, 366.0], [48.2, 366.0], [48.3, 366.0], [48.4, 368.0], [48.5, 368.0], [48.6, 368.0], [48.7, 368.0], [48.8, 379.0], [48.9, 379.0], [49.0, 379.0], [49.1, 379.0], [49.2, 380.0], [49.3, 380.0], [49.4, 380.0], [49.5, 380.0], [49.6, 386.0], [49.7, 386.0], [49.8, 386.0], [49.9, 386.0], [50.0, 397.0], [50.1, 397.0], [50.2, 397.0], [50.3, 397.0], [50.4, 405.0], [50.5, 405.0], [50.6, 405.0], [50.7, 405.0], [50.8, 406.0], [50.9, 406.0], [51.0, 406.0], [51.1, 406.0], [51.2, 414.0], [51.3, 414.0], [51.4, 414.0], [51.5, 414.0], [51.6, 423.0], [51.7, 423.0], [51.8, 423.0], [51.9, 423.0], [52.0, 425.0], [52.1, 425.0], [52.2, 425.0], [52.3, 425.0], [52.4, 431.0], [52.5, 431.0], [52.6, 431.0], [52.7, 431.0], [52.8, 444.0], [52.9, 444.0], [53.0, 444.0], [53.1, 444.0], [53.2, 447.0], [53.3, 447.0], [53.4, 447.0], [53.5, 447.0], [53.6, 457.0], [53.7, 457.0], [53.8, 457.0], [53.9, 457.0], [54.0, 457.0], [54.1, 457.0], [54.2, 457.0], [54.3, 457.0], [54.4, 459.0], [54.5, 459.0], [54.6, 459.0], [54.7, 459.0], [54.8, 461.0], [54.9, 461.0], [55.0, 461.0], [55.1, 461.0], [55.2, 472.0], [55.3, 472.0], [55.4, 472.0], [55.5, 472.0], [55.6, 478.0], [55.7, 478.0], [55.8, 478.0], [55.9, 478.0], [56.0, 487.0], [56.1, 487.0], [56.2, 487.0], [56.3, 487.0], [56.4, 488.0], [56.5, 488.0], [56.6, 488.0], [56.7, 488.0], [56.8, 489.0], [56.9, 489.0], [57.0, 489.0], [57.1, 489.0], [57.2, 489.0], [57.3, 489.0], [57.4, 489.0], [57.5, 489.0], [57.6, 493.0], [57.7, 493.0], [57.8, 493.0], [57.9, 493.0], [58.0, 493.0], [58.1, 493.0], [58.2, 493.0], [58.3, 493.0], [58.4, 494.0], [58.5, 494.0], [58.6, 494.0], [58.7, 494.0], [58.8, 495.0], [58.9, 495.0], [59.0, 495.0], [59.1, 495.0], [59.2, 497.0], [59.3, 497.0], [59.4, 497.0], [59.5, 497.0], [59.6, 504.0], [59.7, 504.0], [59.8, 504.0], [59.9, 504.0], [60.0, 506.0], [60.1, 506.0], [60.2, 506.0], [60.3, 506.0], [60.4, 523.0], [60.5, 523.0], [60.6, 523.0], [60.7, 523.0], [60.8, 532.0], [60.9, 532.0], [61.0, 532.0], [61.1, 532.0], [61.2, 532.0], [61.3, 532.0], [61.4, 532.0], [61.5, 532.0], [61.6, 534.0], [61.7, 534.0], [61.8, 534.0], [61.9, 534.0], [62.0, 536.0], [62.1, 536.0], [62.2, 536.0], [62.3, 536.0], [62.4, 536.0], [62.5, 536.0], [62.6, 536.0], [62.7, 536.0], [62.8, 539.0], [62.9, 539.0], [63.0, 539.0], [63.1, 539.0], [63.2, 545.0], [63.3, 545.0], [63.4, 545.0], [63.5, 545.0], [63.6, 552.0], [63.7, 552.0], [63.8, 552.0], [63.9, 552.0], [64.0, 555.0], [64.1, 555.0], [64.2, 555.0], [64.3, 555.0], [64.4, 557.0], [64.5, 557.0], [64.6, 557.0], [64.7, 557.0], [64.8, 561.0], [64.9, 561.0], [65.0, 561.0], [65.1, 561.0], [65.2, 565.0], [65.3, 565.0], [65.4, 565.0], [65.5, 565.0], [65.6, 572.0], [65.7, 572.0], [65.8, 572.0], [65.9, 572.0], [66.0, 581.0], [66.1, 581.0], [66.2, 581.0], [66.3, 581.0], [66.4, 588.0], [66.5, 588.0], [66.6, 588.0], [66.7, 588.0], [66.8, 595.0], [66.9, 595.0], [67.0, 595.0], [67.1, 595.0], [67.2, 599.0], [67.3, 599.0], [67.4, 599.0], [67.5, 599.0], [67.6, 599.0], [67.7, 599.0], [67.8, 599.0], [67.9, 599.0], [68.0, 612.0], [68.1, 612.0], [68.2, 612.0], [68.3, 612.0], [68.4, 634.0], [68.5, 634.0], [68.6, 634.0], [68.7, 634.0], [68.8, 648.0], [68.9, 648.0], [69.0, 648.0], [69.1, 648.0], [69.2, 655.0], [69.3, 655.0], [69.4, 655.0], [69.5, 655.0], [69.6, 658.0], [69.7, 658.0], [69.8, 658.0], [69.9, 658.0], [70.0, 661.0], [70.1, 661.0], [70.2, 661.0], [70.3, 661.0], [70.4, 669.0], [70.5, 669.0], [70.6, 669.0], [70.7, 669.0], [70.8, 672.0], [70.9, 672.0], [71.0, 672.0], [71.1, 672.0], [71.2, 675.0], [71.3, 675.0], [71.4, 675.0], [71.5, 675.0], [71.6, 682.0], [71.7, 682.0], [71.8, 682.0], [71.9, 682.0], [72.0, 684.0], [72.1, 684.0], [72.2, 684.0], [72.3, 684.0], [72.4, 690.0], [72.5, 690.0], [72.6, 690.0], [72.7, 690.0], [72.8, 698.0], [72.9, 698.0], [73.0, 698.0], [73.1, 698.0], [73.2, 704.0], [73.3, 704.0], [73.4, 704.0], [73.5, 704.0], [73.6, 708.0], [73.7, 708.0], [73.8, 708.0], [73.9, 708.0], [74.0, 716.0], [74.1, 716.0], [74.2, 716.0], [74.3, 716.0], [74.4, 737.0], [74.5, 737.0], [74.6, 737.0], [74.7, 737.0], [74.8, 737.0], [74.9, 741.0], [75.0, 741.0], [75.1, 741.0], [75.2, 741.0], [75.3, 754.0], [75.4, 754.0], [75.5, 754.0], [75.6, 754.0], [75.7, 761.0], [75.8, 761.0], [75.9, 761.0], [76.0, 761.0], [76.1, 770.0], [76.2, 770.0], [76.3, 770.0], [76.4, 770.0], [76.5, 774.0], [76.6, 774.0], [76.7, 774.0], [76.8, 774.0], [76.9, 781.0], [77.0, 781.0], [77.1, 781.0], [77.2, 781.0], [77.3, 810.0], [77.4, 810.0], [77.5, 810.0], [77.6, 810.0], [77.7, 817.0], [77.8, 817.0], [77.9, 817.0], [78.0, 817.0], [78.1, 820.0], [78.2, 820.0], [78.3, 820.0], [78.4, 820.0], [78.5, 826.0], [78.6, 826.0], [78.7, 826.0], [78.8, 826.0], [78.9, 841.0], [79.0, 841.0], [79.1, 841.0], [79.2, 841.0], [79.3, 847.0], [79.4, 847.0], [79.5, 847.0], [79.6, 847.0], [79.7, 854.0], [79.8, 854.0], [79.9, 854.0], [80.0, 854.0], [80.1, 855.0], [80.2, 855.0], [80.3, 855.0], [80.4, 855.0], [80.5, 864.0], [80.6, 864.0], [80.7, 864.0], [80.8, 864.0], [80.9, 873.0], [81.0, 873.0], [81.1, 873.0], [81.2, 873.0], [81.3, 884.0], [81.4, 884.0], [81.5, 884.0], [81.6, 884.0], [81.7, 886.0], [81.8, 886.0], [81.9, 886.0], [82.0, 886.0], [82.1, 907.0], [82.2, 907.0], [82.3, 907.0], [82.4, 907.0], [82.5, 907.0], [82.6, 907.0], [82.7, 907.0], [82.8, 907.0], [82.9, 908.0], [83.0, 908.0], [83.1, 908.0], [83.2, 908.0], [83.3, 922.0], [83.4, 922.0], [83.5, 922.0], [83.6, 922.0], [83.7, 945.0], [83.8, 945.0], [83.9, 945.0], [84.0, 945.0], [84.1, 947.0], [84.2, 947.0], [84.3, 947.0], [84.4, 947.0], [84.5, 978.0], [84.6, 978.0], [84.7, 978.0], [84.8, 978.0], [84.9, 1014.0], [85.0, 1014.0], [85.1, 1014.0], [85.2, 1014.0], [85.3, 1047.0], [85.4, 1047.0], [85.5, 1047.0], [85.6, 1047.0], [85.7, 1092.0], [85.8, 1092.0], [85.9, 1092.0], [86.0, 1092.0], [86.1, 1127.0], [86.2, 1127.0], [86.3, 1127.0], [86.4, 1127.0], [86.5, 1128.0], [86.6, 1128.0], [86.7, 1128.0], [86.8, 1128.0], [86.9, 1129.0], [87.0, 1129.0], [87.1, 1129.0], [87.2, 1129.0], [87.3, 1170.0], [87.4, 1170.0], [87.5, 1170.0], [87.6, 1170.0], [87.7, 1171.0], [87.8, 1171.0], [87.9, 1171.0], [88.0, 1171.0], [88.1, 1206.0], [88.2, 1206.0], [88.3, 1206.0], [88.4, 1206.0], [88.5, 1209.0], [88.6, 1209.0], [88.7, 1209.0], [88.8, 1209.0], [88.9, 1210.0], [89.0, 1210.0], [89.1, 1210.0], [89.2, 1210.0], [89.3, 1240.0], [89.4, 1240.0], [89.5, 1240.0], [89.6, 1240.0], [89.7, 1259.0], [89.8, 1259.0], [89.9, 1259.0], [90.0, 1259.0], [90.1, 1307.0], [90.2, 1307.0], [90.3, 1307.0], [90.4, 1307.0], [90.5, 1331.0], [90.6, 1331.0], [90.7, 1331.0], [90.8, 1331.0], [90.9, 1408.0], [91.0, 1408.0], [91.1, 1408.0], [91.2, 1408.0], [91.3, 1504.0], [91.4, 1504.0], [91.5, 1504.0], [91.6, 1504.0], [91.7, 1513.0], [91.8, 1513.0], [91.9, 1513.0], [92.0, 1513.0], [92.1, 1536.0], [92.2, 1536.0], [92.3, 1536.0], [92.4, 1536.0], [92.5, 1594.0], [92.6, 1594.0], [92.7, 1594.0], [92.8, 1594.0], [92.9, 1605.0], [93.0, 1605.0], [93.1, 1605.0], [93.2, 1605.0], [93.3, 1626.0], [93.4, 1626.0], [93.5, 1626.0], [93.6, 1626.0], [93.7, 1627.0], [93.8, 1627.0], [93.9, 1627.0], [94.0, 1627.0], [94.1, 1690.0], [94.2, 1690.0], [94.3, 1690.0], [94.4, 1690.0], [94.5, 1698.0], [94.6, 1698.0], [94.7, 1698.0], [94.8, 1698.0], [94.9, 1705.0], [95.0, 1705.0], [95.1, 1705.0], [95.2, 1705.0], [95.3, 2106.0], [95.4, 2106.0], [95.5, 2106.0], [95.6, 2106.0], [95.7, 2136.0], [95.8, 2136.0], [95.9, 2136.0], [96.0, 2136.0], [96.1, 2267.0], [96.2, 2267.0], [96.3, 2267.0], [96.4, 2267.0], [96.5, 2298.0], [96.6, 2298.0], [96.7, 2298.0], [96.8, 2298.0], [96.9, 2513.0], [97.0, 2513.0], [97.1, 2513.0], [97.2, 2513.0], [97.3, 2564.0], [97.4, 2564.0], [97.5, 2564.0], [97.6, 2564.0], [97.7, 2593.0], [97.8, 2593.0], [97.9, 2593.0], [98.0, 2593.0], [98.1, 2599.0], [98.2, 2599.0], [98.3, 2599.0], [98.4, 2599.0], [98.5, 2639.0], [98.6, 2639.0], [98.7, 2639.0], [98.8, 2639.0], [98.9, 2679.0], [99.0, 2679.0], [99.1, 2679.0], [99.2, 2679.0], [99.3, 2715.0], [99.4, 2715.0], [99.5, 2715.0], [99.6, 2715.0], [99.7, 2834.0], [99.8, 2834.0], [99.9, 2834.0], [100.0, 2834.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[0.0, 159.0], [0.1, 159.0], [0.2, 159.0], [0.3, 159.0], [0.4, 159.0], [0.5, 159.0], [0.6, 159.0], [0.7, 159.0], [0.8, 161.0], [0.9, 161.0], [1.0, 161.0], [1.1, 161.0], [1.2, 161.0], [1.3, 162.0], [1.4, 162.0], [1.5, 162.0], [1.6, 164.0], [1.7, 164.0], [1.8, 164.0], [1.9, 164.0], [2.0, 165.0], [2.1, 165.0], [2.2, 165.0], [2.3, 165.0], [2.4, 166.0], [2.5, 166.0], [2.6, 166.0], [2.7, 166.0], [2.8, 167.0], [2.9, 167.0], [3.0, 167.0], [3.1, 167.0], [3.2, 169.0], [3.3, 169.0], [3.4, 169.0], [3.5, 169.0], [3.6, 170.0], [3.7, 170.0], [3.8, 170.0], [3.9, 170.0], [4.0, 172.0], [4.1, 172.0], [4.2, 172.0], [4.3, 172.0], [4.4, 173.0], [4.5, 173.0], [4.6, 173.0], [4.7, 173.0], [4.8, 174.0], [4.9, 174.0], [5.0, 174.0], [5.1, 174.0], [5.2, 178.0], [5.3, 178.0], [5.4, 178.0], [5.5, 178.0], [5.6, 178.0], [5.7, 179.0], [5.8, 179.0], [5.9, 179.0], [6.0, 179.0], [6.1, 179.0], [6.2, 179.0], [6.3, 179.0], [6.4, 182.0], [6.5, 182.0], [6.6, 182.0], [6.7, 182.0], [6.8, 182.0], [6.9, 182.0], [7.0, 182.0], [7.1, 182.0], [7.2, 182.0], [7.3, 182.0], [7.4, 182.0], [7.5, 182.0], [7.6, 182.0], [7.7, 183.0], [7.8, 183.0], [7.9, 183.0], [8.0, 184.0], [8.1, 184.0], [8.2, 184.0], [8.3, 184.0], [8.4, 188.0], [8.5, 188.0], [8.6, 188.0], [8.7, 188.0], [8.8, 188.0], [8.9, 188.0], [9.0, 188.0], [9.1, 188.0], [9.2, 188.0], [9.3, 188.0], [9.4, 188.0], [9.5, 188.0], [9.6, 188.0], [9.7, 188.0], [9.8, 188.0], [9.9, 188.0], [10.0, 190.0], [10.1, 190.0], [10.2, 190.0], [10.3, 190.0], [10.4, 190.0], [10.5, 190.0], [10.6, 190.0], [10.7, 190.0], [10.8, 190.0], [10.9, 190.0], [11.0, 190.0], [11.1, 190.0], [11.2, 190.0], [11.3, 190.0], [11.4, 190.0], [11.5, 190.0], [11.6, 191.0], [11.7, 191.0], [11.8, 191.0], [11.9, 191.0], [12.0, 192.0], [12.1, 192.0], [12.2, 192.0], [12.3, 192.0], [12.4, 192.0], [12.5, 192.0], [12.6, 192.0], [12.7, 192.0], [12.8, 193.0], [12.9, 193.0], [13.0, 193.0], [13.1, 193.0], [13.2, 193.0], [13.3, 193.0], [13.4, 193.0], [13.5, 193.0], [13.6, 193.0], [13.7, 194.0], [13.8, 194.0], [13.9, 194.0], [14.0, 194.0], [14.1, 195.0], [14.2, 195.0], [14.3, 195.0], [14.4, 195.0], [14.5, 195.0], [14.6, 195.0], [14.7, 195.0], [14.8, 195.0], [14.9, 196.0], [15.0, 196.0], [15.1, 196.0], [15.2, 196.0], [15.3, 196.0], [15.4, 196.0], [15.5, 196.0], [15.6, 196.0], [15.7, 197.0], [15.8, 197.0], [15.9, 197.0], [16.0, 197.0], [16.1, 197.0], [16.2, 197.0], [16.3, 197.0], [16.4, 197.0], [16.5, 200.0], [16.6, 200.0], [16.7, 200.0], [16.8, 200.0], [16.9, 200.0], [17.0, 200.0], [17.1, 200.0], [17.2, 200.0], [17.3, 201.0], [17.4, 201.0], [17.5, 201.0], [17.6, 202.0], [17.7, 202.0], [17.8, 202.0], [17.9, 202.0], [18.0, 204.0], [18.1, 204.0], [18.2, 204.0], [18.3, 204.0], [18.4, 205.0], [18.5, 205.0], [18.6, 205.0], [18.7, 205.0], [18.8, 206.0], [18.9, 206.0], [19.0, 206.0], [19.1, 206.0], [19.2, 208.0], [19.3, 208.0], [19.4, 208.0], [19.5, 208.0], [19.6, 209.0], [19.7, 209.0], [19.8, 209.0], [19.9, 209.0], [20.0, 209.0], [20.1, 209.0], [20.2, 209.0], [20.3, 209.0], [20.4, 209.0], [20.5, 209.0], [20.6, 209.0], [20.7, 209.0], [20.8, 210.0], [20.9, 210.0], [21.0, 210.0], [21.1, 210.0], [21.2, 211.0], [21.3, 211.0], [21.4, 211.0], [21.5, 211.0], [21.6, 214.0], [21.7, 214.0], [21.8, 214.0], [21.9, 214.0], [22.0, 216.0], [22.1, 216.0], [22.2, 216.0], [22.3, 216.0], [22.4, 216.0], [22.5, 216.0], [22.6, 216.0], [22.7, 216.0], [22.8, 216.0], [22.9, 216.0], [23.0, 216.0], [23.1, 216.0], [23.2, 216.0], [23.3, 216.0], [23.4, 216.0], [23.5, 216.0], [23.6, 217.0], [23.7, 217.0], [23.8, 217.0], [23.9, 217.0], [24.0, 218.0], [24.1, 218.0], [24.2, 218.0], [24.3, 218.0], [24.4, 218.0], [24.5, 218.0], [24.6, 218.0], [24.7, 218.0], [24.8, 219.0], [24.9, 219.0], [25.0, 219.0], [25.1, 219.0], [25.2, 221.0], [25.3, 221.0], [25.4, 221.0], [25.5, 221.0], [25.6, 222.0], [25.7, 222.0], [25.8, 222.0], [25.9, 222.0], [26.0, 223.0], [26.1, 223.0], [26.2, 223.0], [26.3, 223.0], [26.4, 224.0], [26.5, 224.0], [26.6, 224.0], [26.7, 224.0], [26.8, 224.0], [26.9, 224.0], [27.0, 224.0], [27.1, 224.0], [27.2, 225.0], [27.3, 225.0], [27.4, 225.0], [27.5, 225.0], [27.6, 226.0], [27.7, 226.0], [27.8, 226.0], [27.9, 226.0], [28.0, 229.0], [28.1, 229.0], [28.2, 229.0], [28.3, 229.0], [28.4, 230.0], [28.5, 230.0], [28.6, 230.0], [28.7, 230.0], [28.8, 230.0], [28.9, 230.0], [29.0, 230.0], [29.1, 230.0], [29.2, 232.0], [29.3, 232.0], [29.4, 232.0], [29.5, 232.0], [29.6, 232.0], [29.7, 232.0], [29.8, 232.0], [29.9, 232.0], [30.0, 233.0], [30.1, 233.0], [30.2, 233.0], [30.3, 233.0], [30.4, 234.0], [30.5, 234.0], [30.6, 234.0], [30.7, 234.0], [30.8, 235.0], [30.9, 235.0], [31.0, 235.0], [31.1, 235.0], [31.2, 235.0], [31.3, 235.0], [31.4, 235.0], [31.5, 235.0], [31.6, 235.0], [31.7, 235.0], [31.8, 235.0], [31.9, 235.0], [32.0, 236.0], [32.1, 236.0], [32.2, 236.0], [32.3, 236.0], [32.4, 237.0], [32.5, 237.0], [32.6, 237.0], [32.7, 237.0], [32.8, 241.0], [32.9, 241.0], [33.0, 241.0], [33.1, 241.0], [33.2, 244.0], [33.3, 244.0], [33.4, 244.0], [33.5, 244.0], [33.6, 247.0], [33.7, 247.0], [33.8, 247.0], [33.9, 247.0], [34.0, 251.0], [34.1, 251.0], [34.2, 251.0], [34.3, 251.0], [34.4, 253.0], [34.5, 253.0], [34.6, 253.0], [34.7, 253.0], [34.8, 253.0], [34.9, 253.0], [35.0, 253.0], [35.1, 253.0], [35.2, 254.0], [35.3, 254.0], [35.4, 254.0], [35.5, 254.0], [35.6, 255.0], [35.7, 255.0], [35.8, 255.0], [35.9, 255.0], [36.0, 258.0], [36.1, 258.0], [36.2, 258.0], [36.3, 258.0], [36.4, 258.0], [36.5, 258.0], [36.6, 258.0], [36.7, 258.0], [36.8, 259.0], [36.9, 259.0], [37.0, 259.0], [37.1, 259.0], [37.2, 259.0], [37.3, 259.0], [37.4, 259.0], [37.5, 259.0], [37.6, 260.0], [37.7, 260.0], [37.8, 260.0], [37.9, 260.0], [38.0, 261.0], [38.1, 261.0], [38.2, 261.0], [38.3, 261.0], [38.4, 264.0], [38.5, 264.0], [38.6, 264.0], [38.7, 264.0], [38.8, 265.0], [38.9, 265.0], [39.0, 265.0], [39.1, 265.0], [39.2, 265.0], [39.3, 265.0], [39.4, 265.0], [39.5, 265.0], [39.6, 266.0], [39.7, 266.0], [39.8, 266.0], [39.9, 266.0], [40.0, 268.0], [40.1, 268.0], [40.2, 268.0], [40.3, 268.0], [40.4, 269.0], [40.5, 269.0], [40.6, 269.0], [40.7, 269.0], [40.8, 271.0], [40.9, 271.0], [41.0, 271.0], [41.1, 271.0], [41.2, 272.0], [41.3, 272.0], [41.4, 272.0], [41.5, 272.0], [41.6, 272.0], [41.7, 272.0], [41.8, 272.0], [41.9, 272.0], [42.0, 274.0], [42.1, 274.0], [42.2, 274.0], [42.3, 274.0], [42.4, 278.0], [42.5, 278.0], [42.6, 278.0], [42.7, 278.0], [42.8, 279.0], [42.9, 279.0], [43.0, 279.0], [43.1, 279.0], [43.2, 282.0], [43.3, 282.0], [43.4, 282.0], [43.5, 282.0], [43.6, 283.0], [43.7, 283.0], [43.8, 283.0], [43.9, 283.0], [44.0, 285.0], [44.1, 285.0], [44.2, 285.0], [44.3, 285.0], [44.4, 285.0], [44.5, 285.0], [44.6, 285.0], [44.7, 285.0], [44.8, 289.0], [44.9, 289.0], [45.0, 289.0], [45.1, 289.0], [45.2, 291.0], [45.3, 291.0], [45.4, 291.0], [45.5, 291.0], [45.6, 291.0], [45.7, 291.0], [45.8, 291.0], [45.9, 291.0], [46.0, 294.0], [46.1, 294.0], [46.2, 294.0], [46.3, 294.0], [46.4, 303.0], [46.5, 303.0], [46.6, 303.0], [46.7, 303.0], [46.8, 304.0], [46.9, 304.0], [47.0, 304.0], [47.1, 304.0], [47.2, 304.0], [47.3, 304.0], [47.4, 304.0], [47.5, 304.0], [47.6, 309.0], [47.7, 309.0], [47.8, 309.0], [47.9, 309.0], [48.0, 316.0], [48.1, 316.0], [48.2, 316.0], [48.3, 316.0], [48.4, 317.0], [48.5, 317.0], [48.6, 317.0], [48.7, 317.0], [48.8, 322.0], [48.9, 322.0], [49.0, 322.0], [49.1, 322.0], [49.2, 323.0], [49.3, 323.0], [49.4, 323.0], [49.5, 323.0], [49.6, 323.0], [49.7, 323.0], [49.8, 323.0], [49.9, 323.0], [50.0, 323.0], [50.1, 323.0], [50.2, 323.0], [50.3, 323.0], [50.4, 333.0], [50.5, 333.0], [50.6, 333.0], [50.7, 333.0], [50.8, 336.0], [50.9, 336.0], [51.0, 336.0], [51.1, 336.0], [51.2, 338.0], [51.3, 338.0], [51.4, 338.0], [51.5, 338.0], [51.6, 339.0], [51.7, 339.0], [51.8, 339.0], [51.9, 339.0], [52.0, 340.0], [52.1, 340.0], [52.2, 340.0], [52.3, 340.0], [52.4, 343.0], [52.5, 343.0], [52.6, 343.0], [52.7, 343.0], [52.8, 344.0], [52.9, 344.0], [53.0, 344.0], [53.1, 344.0], [53.2, 344.0], [53.3, 344.0], [53.4, 344.0], [53.5, 344.0], [53.6, 354.0], [53.7, 354.0], [53.8, 354.0], [53.9, 354.0], [54.0, 362.0], [54.1, 362.0], [54.2, 362.0], [54.3, 362.0], [54.4, 369.0], [54.5, 369.0], [54.6, 369.0], [54.7, 369.0], [54.8, 374.0], [54.9, 374.0], [55.0, 374.0], [55.1, 374.0], [55.2, 377.0], [55.3, 377.0], [55.4, 377.0], [55.5, 377.0], [55.6, 385.0], [55.7, 385.0], [55.8, 385.0], [55.9, 385.0], [56.0, 394.0], [56.1, 394.0], [56.2, 394.0], [56.3, 394.0], [56.4, 400.0], [56.5, 400.0], [56.6, 400.0], [56.7, 400.0], [56.8, 400.0], [56.9, 400.0], [57.0, 400.0], [57.1, 400.0], [57.2, 406.0], [57.3, 406.0], [57.4, 406.0], [57.5, 406.0], [57.6, 409.0], [57.7, 409.0], [57.8, 409.0], [57.9, 409.0], [58.0, 412.0], [58.1, 412.0], [58.2, 412.0], [58.3, 412.0], [58.4, 420.0], [58.5, 420.0], [58.6, 420.0], [58.7, 420.0], [58.8, 430.0], [58.9, 430.0], [59.0, 430.0], [59.1, 430.0], [59.2, 434.0], [59.3, 434.0], [59.4, 434.0], [59.5, 434.0], [59.6, 443.0], [59.7, 443.0], [59.8, 443.0], [59.9, 443.0], [60.0, 445.0], [60.1, 445.0], [60.2, 445.0], [60.3, 445.0], [60.4, 458.0], [60.5, 458.0], [60.6, 458.0], [60.7, 458.0], [60.8, 460.0], [60.9, 460.0], [61.0, 460.0], [61.1, 460.0], [61.2, 462.0], [61.3, 462.0], [61.4, 462.0], [61.5, 462.0], [61.6, 477.0], [61.7, 477.0], [61.8, 477.0], [61.9, 477.0], [62.0, 479.0], [62.1, 479.0], [62.2, 479.0], [62.3, 479.0], [62.4, 479.0], [62.5, 479.0], [62.6, 479.0], [62.7, 479.0], [62.8, 480.0], [62.9, 480.0], [63.0, 480.0], [63.1, 480.0], [63.2, 489.0], [63.3, 489.0], [63.4, 489.0], [63.5, 489.0], [63.6, 491.0], [63.7, 491.0], [63.8, 491.0], [63.9, 491.0], [64.0, 492.0], [64.1, 492.0], [64.2, 492.0], [64.3, 492.0], [64.4, 502.0], [64.5, 502.0], [64.6, 502.0], [64.7, 502.0], [64.8, 532.0], [64.9, 532.0], [65.0, 532.0], [65.1, 532.0], [65.2, 535.0], [65.3, 535.0], [65.4, 535.0], [65.5, 535.0], [65.6, 556.0], [65.7, 556.0], [65.8, 556.0], [65.9, 556.0], [66.0, 556.0], [66.1, 556.0], [66.2, 556.0], [66.3, 556.0], [66.4, 558.0], [66.5, 558.0], [66.6, 558.0], [66.7, 558.0], [66.8, 560.0], [66.9, 560.0], [67.0, 560.0], [67.1, 560.0], [67.2, 562.0], [67.3, 562.0], [67.4, 562.0], [67.5, 562.0], [67.6, 566.0], [67.7, 566.0], [67.8, 566.0], [67.9, 566.0], [68.0, 576.0], [68.1, 576.0], [68.2, 576.0], [68.3, 576.0], [68.4, 577.0], [68.5, 577.0], [68.6, 577.0], [68.7, 577.0], [68.8, 598.0], [68.9, 598.0], [69.0, 598.0], [69.1, 598.0], [69.2, 603.0], [69.3, 603.0], [69.4, 603.0], [69.5, 603.0], [69.6, 603.0], [69.7, 603.0], [69.8, 603.0], [69.9, 603.0], [70.0, 606.0], [70.1, 606.0], [70.2, 606.0], [70.3, 606.0], [70.4, 607.0], [70.5, 607.0], [70.6, 607.0], [70.7, 607.0], [70.8, 607.0], [70.9, 607.0], [71.0, 607.0], [71.1, 607.0], [71.2, 611.0], [71.3, 611.0], [71.4, 611.0], [71.5, 611.0], [71.6, 616.0], [71.7, 616.0], [71.8, 616.0], [71.9, 616.0], [72.0, 630.0], [72.1, 630.0], [72.2, 630.0], [72.3, 630.0], [72.4, 638.0], [72.5, 638.0], [72.6, 638.0], [72.7, 638.0], [72.8, 663.0], [72.9, 663.0], [73.0, 663.0], [73.1, 663.0], [73.2, 664.0], [73.3, 664.0], [73.4, 664.0], [73.5, 664.0], [73.6, 668.0], [73.7, 668.0], [73.8, 668.0], [73.9, 668.0], [74.0, 693.0], [74.1, 693.0], [74.2, 693.0], [74.3, 693.0], [74.4, 694.0], [74.5, 694.0], [74.6, 694.0], [74.7, 694.0], [74.8, 694.0], [74.9, 694.0], [75.0, 694.0], [75.1, 694.0], [75.2, 719.0], [75.3, 719.0], [75.4, 719.0], [75.5, 719.0], [75.6, 722.0], [75.7, 722.0], [75.8, 722.0], [75.9, 722.0], [76.0, 723.0], [76.1, 723.0], [76.2, 723.0], [76.3, 723.0], [76.4, 734.0], [76.5, 734.0], [76.6, 734.0], [76.7, 734.0], [76.8, 750.0], [76.9, 750.0], [77.0, 750.0], [77.1, 750.0], [77.2, 755.0], [77.3, 755.0], [77.4, 755.0], [77.5, 755.0], [77.6, 755.0], [77.7, 756.0], [77.8, 756.0], [77.9, 756.0], [78.0, 756.0], [78.1, 776.0], [78.2, 776.0], [78.3, 776.0], [78.4, 776.0], [78.5, 780.0], [78.6, 780.0], [78.7, 780.0], [78.8, 780.0], [78.9, 791.0], [79.0, 791.0], [79.1, 791.0], [79.2, 791.0], [79.3, 813.0], [79.4, 813.0], [79.5, 813.0], [79.6, 813.0], [79.7, 821.0], [79.8, 821.0], [79.9, 821.0], [80.0, 821.0], [80.1, 844.0], [80.2, 844.0], [80.3, 844.0], [80.4, 844.0], [80.5, 847.0], [80.6, 847.0], [80.7, 847.0], [80.8, 847.0], [80.9, 850.0], [81.0, 850.0], [81.1, 850.0], [81.2, 850.0], [81.3, 860.0], [81.4, 860.0], [81.5, 860.0], [81.6, 860.0], [81.7, 871.0], [81.8, 871.0], [81.9, 871.0], [82.0, 871.0], [82.1, 908.0], [82.2, 908.0], [82.3, 908.0], [82.4, 908.0], [82.5, 910.0], [82.6, 910.0], [82.7, 910.0], [82.8, 910.0], [82.9, 918.0], [83.0, 918.0], [83.1, 918.0], [83.2, 918.0], [83.3, 920.0], [83.4, 920.0], [83.5, 920.0], [83.6, 920.0], [83.7, 922.0], [83.8, 922.0], [83.9, 922.0], [84.0, 922.0], [84.1, 939.0], [84.2, 939.0], [84.3, 939.0], [84.4, 939.0], [84.5, 952.0], [84.6, 952.0], [84.7, 952.0], [84.8, 952.0], [84.9, 954.0], [85.0, 954.0], [85.1, 954.0], [85.2, 954.0], [85.3, 969.0], [85.4, 969.0], [85.5, 969.0], [85.6, 969.0], [85.7, 973.0], [85.8, 973.0], [85.9, 973.0], [86.0, 973.0], [86.1, 986.0], [86.2, 986.0], [86.3, 986.0], [86.4, 986.0], [86.5, 1021.0], [86.6, 1021.0], [86.7, 1021.0], [86.8, 1021.0], [86.9, 1036.0], [87.0, 1036.0], [87.1, 1036.0], [87.2, 1036.0], [87.3, 1042.0], [87.4, 1042.0], [87.5, 1042.0], [87.6, 1042.0], [87.7, 1064.0], [87.8, 1064.0], [87.9, 1064.0], [88.0, 1064.0], [88.1, 1078.0], [88.2, 1078.0], [88.3, 1078.0], [88.4, 1078.0], [88.5, 1091.0], [88.6, 1091.0], [88.7, 1091.0], [88.8, 1091.0], [88.9, 1094.0], [89.0, 1094.0], [89.1, 1094.0], [89.2, 1094.0], [89.3, 1110.0], [89.4, 1110.0], [89.5, 1110.0], [89.6, 1110.0], [89.7, 1149.0], [89.8, 1149.0], [89.9, 1149.0], [90.0, 1149.0], [90.1, 1178.0], [90.2, 1178.0], [90.3, 1178.0], [90.4, 1178.0], [90.5, 1188.0], [90.6, 1188.0], [90.7, 1188.0], [90.8, 1188.0], [90.9, 1207.0], [91.0, 1207.0], [91.1, 1207.0], [91.2, 1207.0], [91.3, 1238.0], [91.4, 1238.0], [91.5, 1238.0], [91.6, 1238.0], [91.7, 1238.0], [91.8, 1238.0], [91.9, 1238.0], [92.0, 1238.0], [92.1, 1241.0], [92.2, 1241.0], [92.3, 1241.0], [92.4, 1241.0], [92.5, 1243.0], [92.6, 1243.0], [92.7, 1243.0], [92.8, 1243.0], [92.9, 1288.0], [93.0, 1288.0], [93.1, 1288.0], [93.2, 1288.0], [93.3, 1299.0], [93.4, 1299.0], [93.5, 1299.0], [93.6, 1299.0], [93.7, 1378.0], [93.8, 1378.0], [93.9, 1378.0], [94.0, 1378.0], [94.1, 1401.0], [94.2, 1401.0], [94.3, 1401.0], [94.4, 1401.0], [94.5, 1510.0], [94.6, 1510.0], [94.7, 1510.0], [94.8, 1510.0], [94.9, 1521.0], [95.0, 1521.0], [95.1, 1521.0], [95.2, 1521.0], [95.3, 1592.0], [95.4, 1592.0], [95.5, 1592.0], [95.6, 1592.0], [95.7, 1696.0], [95.8, 1696.0], [95.9, 1696.0], [96.0, 1696.0], [96.1, 1762.0], [96.2, 1762.0], [96.3, 1762.0], [96.4, 1762.0], [96.5, 1972.0], [96.6, 1972.0], [96.7, 1972.0], [96.8, 1972.0], [96.9, 2012.0], [97.0, 2012.0], [97.1, 2012.0], [97.2, 2012.0], [97.3, 2057.0], [97.4, 2057.0], [97.5, 2057.0], [97.6, 2057.0], [97.7, 2152.0], [97.8, 2152.0], [97.9, 2152.0], [98.0, 2152.0], [98.1, 2481.0], [98.2, 2481.0], [98.3, 2481.0], [98.4, 2481.0], [98.5, 2482.0], [98.6, 2482.0], [98.7, 2482.0], [98.8, 2482.0], [98.9, 2484.0], [99.0, 2484.0], [99.1, 2484.0], [99.2, 2484.0], [99.3, 2746.0], [99.4, 2746.0], [99.5, 2746.0], [99.6, 2746.0], [99.7, 2824.0], [99.8, 2824.0], [99.9, 2824.0], [100.0, 2824.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 76.0, "series": [{"data": [[600.0, 22.0], [700.0, 12.0], [800.0, 3.0], [900.0, 10.0], [1000.0, 8.0], [1100.0, 3.0], [1200.0, 4.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 1.0], [100.0, 17.0], [1600.0, 9.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 1.0], [2100.0, 3.0], [2200.0, 1.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [2700.0, 1.0], [200.0, 76.0], [300.0, 33.0], [400.0, 15.0], [500.0, 19.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[2100.0, 2.0], [2200.0, 2.0], [600.0, 13.0], [2500.0, 4.0], [2600.0, 2.0], [700.0, 10.0], [2800.0, 1.0], [2700.0, 1.0], [200.0, 71.0], [800.0, 12.0], [900.0, 7.0], [1000.0, 3.0], [1100.0, 5.0], [300.0, 22.0], [1200.0, 5.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 4.0], [100.0, 33.0], [400.0, 23.0], [1600.0, 5.0], [1700.0, 1.0], [500.0, 21.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[2100.0, 1.0], [600.0, 15.0], [2400.0, 3.0], [700.0, 10.0], [2700.0, 1.0], [2800.0, 1.0], [200.0, 75.0], [800.0, 7.0], [900.0, 11.0], [1000.0, 7.0], [1100.0, 4.0], [300.0, 25.0], [1200.0, 7.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 3.0], [400.0, 20.0], [100.0, 41.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [500.0, 12.0], [2000.0, 2.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 60.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 451.0, "series": [{"data": [[0.0, 451.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 239.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 60.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 40.922666666666686, "minX": 1.72793304E12, "maxY": 40.922666666666686, "series": [{"data": [[1.72793304E12, 40.922666666666686]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793304E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 159.0, "minX": 1.0, "maxY": 2861.0, "series": [{"data": [[32.0, 482.3333333333333], [33.0, 308.0], [34.0, 408.57142857142856], [35.0, 351.33333333333337], [36.0, 614.3636363636364], [37.0, 302.8], [38.0, 413.83333333333337], [39.0, 1337.5], [41.0, 419.58333333333337], [40.0, 804.25], [42.0, 513.2758620689655], [43.0, 620.2631578947369], [45.0, 565.6999999999999], [44.0, 447.6363636363636], [46.0, 560.5384615384615], [47.0, 566.5], [48.0, 651.2105263157895], [49.0, 545.6666666666666], [50.0, 813.4], [51.0, 564.1666666666667], [52.0, 331.6], [53.0, 960.7499999999999], [54.0, 746.75], [5.0, 2757.0], [12.0, 1689.0], [13.0, 2861.0], [21.0, 816.7142857142858], [22.0, 656.0], [23.0, 545.5], [24.0, 877.2], [25.0, 433.33333333333337], [26.0, 362.0], [27.0, 634.5], [28.0, 1076.0], [29.0, 589.0], [30.0, 555.25], [31.0, 478.0]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[40.97999999999995, 623.58]], "isOverall": false, "label": "Escolha do destino-Aggregated", "isController": false}, {"data": [[32.0, 413.5], [33.0, 245.5], [34.0, 335.75], [35.0, 385.6], [36.0, 606.2], [37.0, 426.3], [38.0, 434.0], [39.0, 540.875], [40.0, 777.0], [41.0, 429.875], [42.0, 518.5500000000001], [43.0, 585.0], [44.0, 947.8000000000001], [45.0, 569.4545454545455], [46.0, 811.5], [47.0, 682.7857142857142], [48.0, 814.25], [49.0, 589.5], [50.0, 482.66666666666663], [51.0, 566.4444444444445], [52.0, 574.3333333333334], [53.0, 449.3333333333333], [54.0, 429.16666666666663], [5.0, 720.5], [9.0, 1504.0], [11.0, 179.0], [12.0, 847.0], [13.0, 381.5], [1.0, 1171.0], [21.0, 196.0], [23.0, 1458.0], [24.0, 669.0], [25.0, 1013.3333333333334], [26.0, 200.0], [27.0, 278.5], [28.0, 209.5], [29.0, 192.0], [30.0, 273.66666666666663], [31.0, 229.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[41.160000000000025, 602.92]], "isOverall": false, "label": "Escolha da passagem-Aggregated", "isController": false}, {"data": [[2.0, 2012.0], [3.0, 598.0], [4.0, 918.0], [5.0, 434.0], [6.0, 271.0], [7.0, 1021.0], [8.0, 394.0], [9.0, 344.0], [10.0, 209.0], [11.0, 603.0], [12.0, 247.0], [13.0, 489.0], [14.0, 179.0], [15.0, 204.0], [16.0, 274.0], [17.0, 973.0], [18.0, 908.0], [19.0, 269.0], [20.0, 196.0], [21.0, 2824.0], [22.0, 480.0], [23.0, 291.0], [24.0, 224.0], [25.0, 159.0], [26.0, 694.0], [27.0, 560.0], [28.0, 197.0], [29.0, 221.0], [30.0, 638.0], [31.0, 225.0], [33.0, 446.33333333333337], [32.0, 182.0], [35.0, 370.7142857142857], [34.0, 1139.3333333333335], [36.0, 420.4285714285714], [37.0, 502.22222222222223], [39.0, 528.9999999999999], [38.0, 565.125], [41.0, 686.0833333333334], [40.0, 374.8], [42.0, 461.1666666666667], [43.0, 397.69565217391306], [44.0, 470.06666666666666], [45.0, 518.8823529411765], [46.0, 624.3076923076924], [47.0, 515.3636363636364], [48.0, 453.0526315789474], [49.0, 463.63636363636357], [51.0, 457.5454545454546], [50.0, 862.0], [52.0, 1146.6], [53.0, 1213.2], [54.0, 596.1428571428571], [1.0, 197.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}, {"data": [[40.627999999999986, 543.5639999999997]], "isOverall": false, "label": "Confirmação de compra-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 54.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5508.333333333333, "minX": 1.72793304E12, "maxY": 82833.33333333333, "series": [{"data": [[1.72793304E12, 82833.33333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72793304E12, 5508.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793304E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 543.5639999999997, "minX": 1.72793304E12, "maxY": 623.58, "series": [{"data": [[1.72793304E12, 623.58]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793304E12, 602.92]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793304E12, 543.5639999999997]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793304E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 542.1719999999995, "minX": 1.72793304E12, "maxY": 620.7560000000003, "series": [{"data": [[1.72793304E12, 620.7560000000003]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793304E12, 600.5160000000002]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793304E12, 542.1719999999995]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793304E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72793304E12, "maxY": 41.467999999999996, "series": [{"data": [[1.72793304E12, 41.467999999999996]], "isOverall": false, "label": "Escolha do destino", "isController": false}, {"data": [[1.72793304E12, 0.0]], "isOverall": false, "label": "Escolha da passagem", "isController": false}, {"data": [[1.72793304E12, 0.0]], "isOverall": false, "label": "Confirmação de compra", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793304E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 159.0, "minX": 1.72793304E12, "maxY": 2861.0, "series": [{"data": [[1.72793304E12, 2861.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72793304E12, 1242.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72793304E12, 2658.6000000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72793304E12, 1701.1499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72793304E12, 159.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72793304E12, 371.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793304E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 317.0, "minX": 4.0, "maxY": 884.5, "series": [{"data": [[66.0, 323.5], [4.0, 884.5], [68.0, 336.5], [69.0, 376.5], [73.0, 502.0], [9.0, 494.0], [78.0, 461.5], [80.0, 327.0], [82.0, 394.5], [45.0, 353.5], [62.0, 317.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 82.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 315.5, "minX": 4.0, "maxY": 881.5, "series": [{"data": [[66.0, 321.5], [4.0, 881.5], [68.0, 334.5], [69.0, 373.5], [73.0, 501.0], [9.0, 491.0], [78.0, 460.0], [80.0, 325.0], [82.0, 392.5], [45.0, 351.0], [62.0, 315.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 82.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793304E12, "maxY": 12.5, "series": [{"data": [[1.72793304E12, 12.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793304E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793304E12, "maxY": 12.5, "series": [{"data": [[1.72793304E12, 12.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72793304E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.72793304E12, "maxY": 4.166666666666667, "series": [{"data": [[1.72793304E12, 4.166666666666667]], "isOverall": false, "label": "Escolha da passagem-success", "isController": false}, {"data": [[1.72793304E12, 4.166666666666667]], "isOverall": false, "label": "Confirmação de compra-success", "isController": false}, {"data": [[1.72793304E12, 4.166666666666667]], "isOverall": false, "label": "Escolha do destino-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793304E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.5, "minX": 1.72793304E12, "maxY": 12.5, "series": [{"data": [[1.72793304E12, 12.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72793304E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

